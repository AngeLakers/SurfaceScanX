// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace PCI9850
{
    public enum EmADClkSel
    {
        ADCLK_INT = 0,
        ADCLK_EXT = 1
    }

    public enum EmADFormat
    {
        ADFMT_STBIN = 0,
        ADFMT_2SBIN = 1
    }

    public enum EmTriggerMode
    {
        TRIG_MODE_CONTINUE = 0,
        TRIG_MODE_POST = 1,
        TRIG_MODE_DELAY = 2,
        TRIG_MODE_PRE = 3,
        TRIG_MODE_MIDDLE = 4
    }

    public enum EmTriggerSource
    {
        TRIG_SRC_EXT_RISING = 0,
        TRIG_SRC_EXT_FALLING = 1,
        TRIG_SRC_SOFT = 2
    }

    public unsafe partial class _PCI9850_PARA_INIT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 28)]
        public partial struct __Internal
        {
            internal int ClkDiv;
            internal int TriggerMode;
            internal int TriggerSource;
            internal int TriggerDelay;
            internal int TriggerLength;
            internal int TriggerLevel;
            internal int lADFmt;

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "??0_PCI9850_PARA_INIT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PCI9850._PCI9850_PARA_INIT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PCI9850._PCI9850_PARA_INIT>();

        protected bool __ownsNativeInstance;

        internal static _PCI9850_PARA_INIT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new _PCI9850_PARA_INIT(native.ToPointer(), skipVTables);
        }

        internal static _PCI9850_PARA_INIT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (_PCI9850_PARA_INIT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static _PCI9850_PARA_INIT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new _PCI9850_PARA_INIT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private _PCI9850_PARA_INIT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected _PCI9850_PARA_INIT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public _PCI9850_PARA_INIT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PCI9850._PCI9850_PARA_INIT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public _PCI9850_PARA_INIT(global::PCI9850._PCI9850_PARA_INIT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PCI9850._PCI9850_PARA_INIT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PCI9850._PCI9850_PARA_INIT.__Internal*) __Instance) = *((global::PCI9850._PCI9850_PARA_INIT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int ClkDiv
        {
            get
            {
                return ((__Internal*)__Instance)->ClkDiv;
            }

            set
            {
                ((__Internal*)__Instance)->ClkDiv = value;
            }
        }

        public int TriggerMode
        {
            get
            {
                return ((__Internal*)__Instance)->TriggerMode;
            }

            set
            {
                ((__Internal*)__Instance)->TriggerMode = value;
            }
        }

        public int TriggerSource
        {
            get
            {
                return ((__Internal*)__Instance)->TriggerSource;
            }

            set
            {
                ((__Internal*)__Instance)->TriggerSource = value;
            }
        }

        public int TriggerDelay
        {
            get
            {
                return ((__Internal*)__Instance)->TriggerDelay;
            }

            set
            {
                ((__Internal*)__Instance)->TriggerDelay = value;
            }
        }

        public int TriggerLength
        {
            get
            {
                return ((__Internal*)__Instance)->TriggerLength;
            }

            set
            {
                ((__Internal*)__Instance)->TriggerLength = value;
            }
        }

        public int TriggerLevel
        {
            get
            {
                return ((__Internal*)__Instance)->TriggerLevel;
            }

            set
            {
                ((__Internal*)__Instance)->TriggerLevel = value;
            }
        }

        public int LADFmt
        {
            get
            {
                return ((__Internal*)__Instance)->lADFmt;
            }

            set
            {
                ((__Internal*)__Instance)->lADFmt = value;
            }
        }
    }

    public unsafe partial class PCI9850
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_Link", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr PCI9850_Link(byte DeviceNO);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_UnLink", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_UnLink(__IntPtr hdl);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_initAD", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_initAD(__IntPtr hdl, __IntPtr para_init);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_ReadAD", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_ReadAD(__IntPtr hdl, byte* pBuf, uint nCount, uint* bBufOver);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_ADoffset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_ADoffset(__IntPtr hdl, int bRdWt, int* pOffsetVal);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_StopAD", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_StopAD(__IntPtr hdl);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_SetDO", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_SetDO(__IntPtr hdl, uint nDO);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_GetDI", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_GetDI(__IntPtr hdl, uint* nDI);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_GetBufCnt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_GetBufCnt(__IntPtr hdl);

            [SuppressUnmanagedCodeSecurity, DllImport("PCI9850", EntryPoint = "PCI9850_ExeSoftTrig", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PCI9850_ExeSoftTrig(__IntPtr hdl);
        }

        public static __IntPtr PCI9850_Link(byte DeviceNO)
        {
            var __ret = __Internal.PCI9850_Link(DeviceNO);
            return __ret;
        }

        public static int PCI9850_UnLink(__IntPtr hdl)
        {
            var __ret = __Internal.PCI9850_UnLink(hdl);
            return __ret;
        }

        public static int PCI9850_initAD(__IntPtr hdl, global::PCI9850._PCI9850_PARA_INIT para_init)
        {
            var __arg1 = para_init is null ? __IntPtr.Zero : para_init.__Instance;
            var __ret = __Internal.PCI9850_initAD(hdl, __arg1);
            return __ret;
        }

        public static int PCI9850_ReadAD(__IntPtr hdl, byte* pBuf, uint nCount, ref uint bBufOver)
        {
            fixed (uint* __bBufOver3 = &bBufOver)
            {
                var __arg3 = __bBufOver3;
                var __ret = __Internal.PCI9850_ReadAD(hdl, pBuf, nCount, __arg3);
                return __ret;
            }
        }

        public static int PCI9850_ADoffset(__IntPtr hdl, int bRdWt, ref int pOffsetVal)
        {
            fixed (int* __pOffsetVal2 = &pOffsetVal)
            {
                var __arg2 = __pOffsetVal2;
                var __ret = __Internal.PCI9850_ADoffset(hdl, bRdWt, __arg2);
                return __ret;
            }
        }

        public static int PCI9850_StopAD(__IntPtr hdl)
        {
            var __ret = __Internal.PCI9850_StopAD(hdl);
            return __ret;
        }

        public static int PCI9850_SetDO(__IntPtr hdl, uint nDO)
        {
            var __ret = __Internal.PCI9850_SetDO(hdl, nDO);
            return __ret;
        }

        public static int PCI9850_GetDI(__IntPtr hdl, ref uint nDI)
        {
            fixed (uint* __nDI1 = &nDI)
            {
                var __arg1 = __nDI1;
                var __ret = __Internal.PCI9850_GetDI(hdl, __arg1);
                return __ret;
            }
        }

        public static int PCI9850_GetBufCnt(__IntPtr hdl)
        {
            var __ret = __Internal.PCI9850_GetBufCnt(hdl);
            return __ret;
        }

        public static int PCI9850_ExeSoftTrig(__IntPtr hdl)
        {
            var __ret = __Internal.PCI9850_ExeSoftTrig(hdl);
            return __ret;
        }
    }
}
