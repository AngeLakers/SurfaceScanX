// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace LTDMC
{
    public unsafe partial class struct_PidAdjustData : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal uint m_Time;
            internal int m_CommandPos;
            internal double m_CommandVel;
            internal uint m_CommandAcc;
            internal int m_FpgaPos;
            internal double m_FpgaVel;
            internal int m_EncoderPos;
            internal double m_ErrorPos;

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "??0struct_PidAdjustData@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTDMC.struct_PidAdjustData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTDMC.struct_PidAdjustData>();

        protected bool __ownsNativeInstance;

        internal static struct_PidAdjustData __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new struct_PidAdjustData(native.ToPointer(), skipVTables);
        }

        internal static struct_PidAdjustData __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (struct_PidAdjustData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static struct_PidAdjustData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new struct_PidAdjustData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private struct_PidAdjustData(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected struct_PidAdjustData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public struct_PidAdjustData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTDMC.struct_PidAdjustData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public struct_PidAdjustData(global::LTDMC.struct_PidAdjustData __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTDMC.struct_PidAdjustData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::LTDMC.struct_PidAdjustData.__Internal*) __Instance) = *((global::LTDMC.struct_PidAdjustData.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MTime
        {
            get
            {
                return ((__Internal*)__Instance)->m_Time;
            }

            set
            {
                ((__Internal*)__Instance)->m_Time = value;
            }
        }

        public int MCommandPos
        {
            get
            {
                return ((__Internal*)__Instance)->m_CommandPos;
            }

            set
            {
                ((__Internal*)__Instance)->m_CommandPos = value;
            }
        }

        public double MCommandVel
        {
            get
            {
                return ((__Internal*)__Instance)->m_CommandVel;
            }

            set
            {
                ((__Internal*)__Instance)->m_CommandVel = value;
            }
        }

        public uint MCommandAcc
        {
            get
            {
                return ((__Internal*)__Instance)->m_CommandAcc;
            }

            set
            {
                ((__Internal*)__Instance)->m_CommandAcc = value;
            }
        }

        public int MFpgaPos
        {
            get
            {
                return ((__Internal*)__Instance)->m_FpgaPos;
            }

            set
            {
                ((__Internal*)__Instance)->m_FpgaPos = value;
            }
        }

        public double MFpgaVel
        {
            get
            {
                return ((__Internal*)__Instance)->m_FpgaVel;
            }

            set
            {
                ((__Internal*)__Instance)->m_FpgaVel = value;
            }
        }

        public int MEncoderPos
        {
            get
            {
                return ((__Internal*)__Instance)->m_EncoderPos;
            }

            set
            {
                ((__Internal*)__Instance)->m_EncoderPos = value;
            }
        }

        public double MErrorPos
        {
            get
            {
                return ((__Internal*)__Instance)->m_ErrorPos;
            }

            set
            {
                ((__Internal*)__Instance)->m_ErrorPos = value;
            }
        }
    }

    public unsafe partial class LTDMC
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_debug_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_debug_mode(ushort mode, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_debug_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_debug_mode(ushort* mode, sbyte* pFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_board_init", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_board_init();

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_board_init_onecard", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_board_init_onecard(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_board_close_onecard", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_board_close_onecard(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_CardInfList", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_CardInfList(ushort* CardNum, uint* CardTypeList, ushort* CardIdList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_board_close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_board_close();

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_board_reset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_board_reset();

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_board_reset_onecard", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_board_reset_onecard(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_soft_reset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_soft_reset(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_cool_reset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_cool_reset(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_original_reset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_original_reset(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_card_ID", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_card_ID(ushort CardNo, uint* CardID);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_release_version", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_release_version(ushort CardNo, sbyte* ReleaseVersion);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_card_version", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_card_version(ushort CardNo, uint* CardVersion);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_card_soft_version", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_card_soft_version(ushort CardNo, uint* FirmID, uint* SubFirmID);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_card_lib_version", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_card_lib_version(uint* LibVer);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_total_axes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_total_axes(ushort CardNo, uint* TotalAxis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_total_liners", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_total_liners(ushort CardNo, uint* TotalLiner);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_total_ionum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_total_ionum(ushort CardNo, ushort* TotalIn, ushort* TotalOut);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_total_adcnum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_total_adcnum(ushort CardNo, ushort* TotalIn, ushort* TotalOut);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_check_sn", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_check_sn(ushort CardNo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_sn);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_sn", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_sn(ushort CardNo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_sn);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_pulse_outmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_pulse_outmode(ushort CardNo, ushort axis, ushort outmode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_pulse_outmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_pulse_outmode(ushort CardNo, ushort axis, ushort* outmode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_equiv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_equiv(ushort CardNo, ushort axis, double equiv);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_equiv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_equiv(ushort CardNo, ushort axis, double* equiv);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_backlash_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_backlash_unit(ushort CardNo, ushort axis, double backlash);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_backlash_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_backlash_unit(ushort CardNo, ushort axis, double* backlash);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_backlash", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_backlash(ushort CardNo, ushort axis, int backlash);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_backlash", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_backlash(ushort CardNo, ushort axis, int* backlash);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_download_file", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_download_file(ushort CardNo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pfilename, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pfilenameinControl, ushort filetype);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_download_memfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_download_memfile(ushort CardNo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pbuffer, uint buffsize, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pfilenameinControl, ushort filetype);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_upload_file", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_upload_file(ushort CardNo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pfilename, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pfilenameinControl, ushort filetype);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_upload_memfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_upload_memfile(ushort CardNo, sbyte* pbuffer, uint buffsize, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pfilenameinControl, uint* puifilesize, ushort filetype);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_download_configfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_download_configfile(ushort CardNo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_download_firmware", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_download_firmware(ushort CardNo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_progress", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_progress(ushort CardNo, float* process);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_softlimit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_softlimit(ushort CardNo, ushort axis, ushort enable, ushort source_sel, ushort SL_action, int N_limit, int P_limit);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_softlimit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_softlimit(ushort CardNo, ushort axis, ushort* enable, ushort* source_sel, ushort* SL_action, int* N_limit, int* P_limit);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_el_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_el_mode(ushort CardNo, ushort axis, ushort enable, ushort el_logic, ushort el_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_el_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_el_mode(ushort CardNo, ushort axis, ushort* enable, ushort* el_logic, ushort* el_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_emg_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_emg_mode(ushort CardNo, ushort axis, ushort enable, ushort emg_logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_emg_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_emg_mode(ushort CardNo, ushort axis, ushort* enable, ushort* emg_logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_profile(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double stop_vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_profile(ushort CardNo, ushort axis, double* Min_Vel, double* Max_Vel, double* Tacc, double* Tdec, double* stop_vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_profile_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_profile_unit(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Stop_Vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_profile_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_profile_unit(ushort CardNo, ushort axis, double* Min_Vel, double* Max_Vel, double* Tacc, double* Tdec, double* Stop_Vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_profile_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_profile_extern(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Ajerk, double Djerk, double stop_vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_profile_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_profile_extern(ushort CardNo, ushort axis, double* Min_Vel, double* Max_Vel, double* Tacc, double* Tdec, double* Ajerk, double* Djerk, double* stop_vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_acc_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_acc_profile(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Acc, double Dec, double stop_vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_acc_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_acc_profile(ushort CardNo, ushort axis, double* Min_Vel, double* Max_Vel, double* Acc, double* Dec, double* stop_vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_profile_unit_acc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_profile_unit_acc(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Stop_Vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_profile_unit_acc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_profile_unit_acc(ushort CardNo, ushort axis, double* Min_Vel, double* Max_Vel, double* Tacc, double* Tdec, double* Stop_Vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_s_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_s_profile(ushort CardNo, ushort axis, ushort s_mode, double s_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_s_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_s_profile(ushort CardNo, ushort axis, ushort s_mode, double* s_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_pmove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_pmove(ushort CardNo, ushort axis, int dist, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_pmove_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_pmove_unit(ushort CardNo, ushort axis, double Dist, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_vmove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_vmove(ushort CardNo, ushort axis, ushort dir);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_pmove_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_pmove_extern(ushort CardNo, ushort axis, double dist, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double stop_Vel, double s_para, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_reset_target_position", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_reset_target_position(ushort CardNo, ushort axis, int dist, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_change_speed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_change_speed(ushort CardNo, ushort axis, double Curr_Vel, double Taccdec);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_update_target_position", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_update_target_position(ushort CardNo, ushort axis, int dist, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_reset_target_position_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_reset_target_position_unit(ushort CardNo, ushort axis, double New_Pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_change_speed_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_change_speed_unit(ushort CardNo, ushort axis, double New_Vel, double Taccdec);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_update_target_position_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_update_target_position_unit(ushort CardNo, ushort axis, double New_Pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_vector_profile_multicoor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_vector_profile_multicoor(ushort CardNo, ushort Crd, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Stop_Vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_vector_profile_multicoor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_vector_profile_multicoor(ushort CardNo, ushort Crd, double* Min_Vel, double* Max_Vel, double* Tacc, double* Tdec, double* Stop_Vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_vector_s_profile_multicoor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_vector_s_profile_multicoor(ushort CardNo, ushort Crd, ushort s_mode, double s_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_vector_s_profile_multicoor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_vector_s_profile_multicoor(ushort CardNo, ushort Crd, ushort s_mode, double* s_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_vector_profile_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_vector_profile_unit(ushort CardNo, ushort Crd, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Stop_Vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_vector_profile_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_vector_profile_unit(ushort CardNo, ushort Crd, double* Min_Vel, double* Max_Vel, double* Tacc, double* Tdec, double* Stop_Vel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_vector_s_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_vector_s_profile(ushort CardNo, ushort Crd, ushort s_mode, double s_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_vector_s_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_vector_s_profile(ushort CardNo, ushort Crd, ushort s_mode, double* s_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_line_multicoor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_line_multicoor(ushort CardNo, ushort Crd, ushort axisNum, ushort* axisList, int* DistList, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_arc_move_multicoor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_arc_move_multicoor(ushort CardNo, ushort Crd, ushort* AxisList, int* Target_Pos, int* Cen_Pos, ushort Arc_Dir, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_line_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_line_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Dist, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_arc_move_center_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_arc_move_center_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double* Cen_Pos, ushort Arc_Dir, int Circle, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_arc_move_radius_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_arc_move_radius_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double Arc_Radius, ushort Arc_Dir, int Circle, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_arc_move_3points_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_arc_move_3points_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double* Mid_Pos, int Circle, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_rectangle_move_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_rectangle_move_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double* Mark_Pos, int num, ushort rect_mode, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_PvtTable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_PvtTable(ushort CardNo, ushort iaxis, uint count, double* pTime, int* pPos, double* pVel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_PtsTable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_PtsTable(ushort CardNo, ushort iaxis, uint count, double* pTime, int* pPos, double* pPercent);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_PvtsTable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_PvtsTable(ushort CardNo, ushort iaxis, uint count, double* pTime, int* pPos, double velBegin, double velEnd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_PttTable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_PttTable(ushort CardNo, ushort iaxis, uint count, double* pTime, int* pPos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_PvtMove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_PvtMove(ushort CardNo, ushort AxisNum, ushort* AxisList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_PttTable_add", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_PttTable_add(ushort CardNo, ushort iaxis, uint count, double* pTime, int* pPos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_PtsTable_add", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_PtsTable_add(ushort CardNo, ushort iaxis, uint count, double* pTime, int* pPos, double* pPercent);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_pvt_get_remain_space", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_pvt_get_remain_space(ushort CardNo, ushort iaxis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_pvt_table_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_pvt_table_unit(ushort CardNo, ushort iaxis, uint count, double* pTime, double* pPos, double* pVel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_pts_table_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_pts_table_unit(ushort CardNo, ushort iaxis, uint count, double* pTime, double* pPos, double* pPercent);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_pvts_table_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_pvts_table_unit(ushort CardNo, ushort iaxis, uint count, double* pTime, double* pPos, double velBegin, double velEnd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_ptt_table_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_ptt_table_unit(ushort CardNo, ushort iaxis, uint count, double* pTime, double* pPos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_pvt_move", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_pvt_move(ushort CardNo, ushort AxisNum, ushort* AxisList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_SetGearProfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_SetGearProfile(ushort CardNo, ushort axis, ushort MasterType, ushort MasterIndex, int MasterEven, int SlaveEven, uint MasterSlope);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_GetGearProfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_GetGearProfile(ushort CardNo, ushort axis, ushort* MasterType, ushort* MasterIndex, int* MasterEven, int* SlaveEven, uint* MasterSlope);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_GearMove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_GearMove(ushort CardNo, ushort AxisNum, ushort* AxisList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_home_pin_logic", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_home_pin_logic(ushort CardNo, ushort axis, ushort org_logic, double filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_home_pin_logic", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_home_pin_logic(ushort CardNo, ushort axis, ushort* org_logic, double* filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_homemode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_homemode(ushort CardNo, ushort axis, ushort home_dir, double vel, ushort mode, ushort EZ_count);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_homemode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_homemode(ushort CardNo, ushort axis, ushort* home_dir, double* vel_mode, ushort* home_mode, ushort* EZ_count);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_home_move", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_home_move(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_home_profile_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_home_profile_unit(ushort CardNo, ushort axis, double Low_Vel, double High_Vel, double Tacc, double Tdec);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_home_profile_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_home_profile_unit(ushort CardNo, ushort axis, double* Low_Vel, double* High_Vel, double* Tacc, double* Tdec);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_home_result", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_home_result(ushort CardNo, ushort axis, ushort* state);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_home_position_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_home_position_unit(ushort CardNo, ushort axis, ushort enable, double position);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_home_position_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_home_position_unit(ushort CardNo, ushort axis, ushort* enable, double* position);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_el_home", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_el_home(ushort CardNo, ushort axis, ushort mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_homelatch_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_homelatch_mode(ushort CardNo, ushort axis, ushort enable, ushort logic, ushort source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_homelatch_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_homelatch_mode(ushort CardNo, ushort axis, ushort* enable, ushort* logic, ushort* source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_homelatch_flag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_homelatch_flag(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_reset_homelatch_flag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_reset_homelatch_flag(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_homelatch_value", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_homelatch_value(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_ezlatch_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_ezlatch_mode(ushort CardNo, ushort axis, ushort enable, ushort logic, ushort source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_ezlatch_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_ezlatch_mode(ushort CardNo, ushort axis, ushort* enable, ushort* logic, ushort* source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_ezlatch_flag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_ezlatch_flag(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_reset_ezlatch_flag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_reset_ezlatch_flag(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_ezlatch_value", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_ezlatch_value(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_handwheel_inmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_handwheel_inmode(ushort CardNo, ushort axis, ushort inmode, int multi, double vh);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_handwheel_inmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_handwheel_inmode(ushort CardNo, ushort axis, ushort* inmode, int* multi, double* vh);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_handwheel_inmode_decimals", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_handwheel_inmode_decimals(ushort CardNo, ushort axis, ushort inmode, double multi, double vh);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_handwheel_inmode_decimals", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_handwheel_inmode_decimals(ushort CardNo, ushort axis, ushort* inmode, double* multi, double* vh);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_move", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_move(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_handwheel_channel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_handwheel_channel(ushort CardNo, ushort index);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_handwheel_channel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_handwheel_channel(ushort CardNo, ushort* index);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_handwheel_inmode_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_handwheel_inmode_extern(ushort CardNo, ushort inmode, ushort AxisNum, ushort* AxisList, int* multi);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_handwheel_inmode_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_handwheel_inmode_extern(ushort CardNo, ushort* inmode, ushort* AxisNum, ushort* AxisList, int* multi);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_handwheel_inmode_extern_decimals", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_handwheel_inmode_extern_decimals(ushort CardNo, ushort inmode, ushort AxisNum, ushort* AxisList, double* multi);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_handwheel_inmode_extern_decimals", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_handwheel_inmode_extern_decimals(ushort CardNo, ushort* inmode, ushort* AxisNum, ushort* AxisList, double* multi);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_set_axislist", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_set_axislist(ushort CardNo, ushort AxisSelIndex, ushort AxisNum, ushort* AxisList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_get_axislist", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_get_axislist(ushort CardNo, ushort AxisSelIndex, ushort* AxisNum, ushort* AxisList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_set_ratiolist", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_set_ratiolist(ushort CardNo, ushort AxisSelIndex, ushort StartRatioIndex, ushort RatioSelNum, double* RatioList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_get_ratiolist", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_get_ratiolist(ushort CardNo, ushort AxisSelIndex, ushort StartRatioIndex, ushort RatioSelNum, double* RatioList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_set_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_set_mode(ushort CardNo, ushort InMode, ushort IfHardEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_get_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_get_mode(ushort CardNo, ushort* InMode, ushort* IfHardEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_set_index", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_set_index(ushort CardNo, ushort AxisSelIndex, ushort RatioSelIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_get_index", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_get_index(ushort CardNo, ushort* AxisSelIndex, ushort* RatioSelIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_handwheel_stop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_handwheel_stop(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_ltc_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_ltc_mode(ushort CardNo, ushort axis, ushort ltc_logic, ushort ltc_mode, double filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_ltc_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_ltc_mode(ushort CardNo, ushort axis, ushort* ltc_logic, ushort* ltc_mode, double* filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_latch_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_latch_mode(ushort CardNo, ushort axis, ushort all_enable, ushort latch_source, ushort triger_chunnel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_latch_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_latch_mode(ushort CardNo, ushort axis, ushort* all_enable, ushort* latch_source, ushort* triger_chunnel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_SetLtcOutMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_SetLtcOutMode(ushort CardNo, ushort axis, ushort enable, ushort bitno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_GetLtcOutMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_GetLtcOutMode(ushort CardNo, ushort axis, ushort* enable, ushort* bitno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_latch_flag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_latch_flag(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_reset_latch_flag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_reset_latch_flag(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_latch_value", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_latch_value(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_latch_value_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_latch_value_unit(ushort CardNo, ushort axis, double* pos_by_mm);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_latch_flag_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_latch_flag_extern(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_latch_value_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_latch_value_extern(ushort CardNo, ushort axis, ushort index);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_latch_stop_time", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_latch_stop_time(ushort CardNo, ushort axis, int time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_latch_stop_time", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_latch_stop_time(ushort CardNo, ushort axis, int* time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_ltc_set_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_ltc_set_mode(ushort CardNo, ushort latch, ushort ltc_mode, ushort ltc_logic, double filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_ltc_get_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_ltc_get_mode(ushort CardNo, ushort latch, ushort* ltc_mode, ushort* ltc_logic, double* filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_ltc_set_source", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_ltc_set_source(ushort CardNo, ushort latch, ushort axis, ushort ltc_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_ltc_get_source", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_ltc_get_source(ushort CardNo, ushort latch, ushort axis, ushort* ltc_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_ltc_reset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_ltc_reset(ushort CardNo, ushort latch);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_ltc_get_number", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_ltc_get_number(ushort CardNo, ushort latch, ushort axis, int* number);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_ltc_get_value_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_ltc_get_value_unit(ushort CardNo, ushort latch, ushort axis, double* value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_set_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_set_config(ushort CardNo, ushort axis, ushort enable, ushort cmp_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_config(ushort CardNo, ushort axis, ushort* enable, ushort* cmp_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_clear_points", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_clear_points(ushort CardNo, ushort cmp);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_add_point", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_add_point(ushort CardNo, ushort cmp, int pos, ushort dir, ushort action, uint actpara);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_current_point", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_current_point(ushort CardNo, ushort cmp, int* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_points_runned", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_points_runned(ushort CardNo, ushort cmp, int* pointNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_points_remained", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_points_remained(ushort CardNo, ushort cmp, int* pointNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_set_config_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_set_config_extern(ushort CardNo, ushort enable, ushort cmp_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_config_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_config_extern(ushort CardNo, ushort* enable, ushort* cmp_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_clear_points_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_clear_points_extern(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_add_point_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_add_point_extern(ushort CardNo, ushort* axis, int* pos, ushort* dir, ushort action, uint actpara);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_current_point_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_current_point_extern(ushort CardNo, int* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_add_point_extern_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_add_point_extern_unit(ushort CardNo, ushort* axis, double* pos, ushort* dir, ushort action, uint actpara);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_current_point_extern_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_current_point_extern_unit(ushort CardNo, double* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_points_runned_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_points_runned_extern(ushort CardNo, int* pointNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_points_remained_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_points_remained_extern(ushort CardNo, int* pointNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_set_config_multi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_set_config_multi(ushort CardNo, ushort queue, ushort enable, ushort axis, ushort cmp_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_get_config_multi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_get_config_multi(ushort CardNo, ushort queue, ushort* enable, ushort* axis, ushort* cmp_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_add_point_multi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_add_point_multi(ushort CardNo, ushort cmp, int pos, ushort dir, ushort action, uint actpara, double times);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_set_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_set_mode(ushort CardNo, ushort hcmp, ushort cmp_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_get_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_get_mode(ushort CardNo, ushort hcmp, ushort* cmp_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_set_config_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_set_config_extern(ushort CardNo, ushort hcmp, ushort axis, ushort cmp_source, ushort cmp_logic, ushort cmp_mode, int dist, int time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_get_config_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_get_config_extern(ushort CardNo, ushort hcmp, ushort* axis, ushort* cmp_source, ushort* cmp_logic, ushort* cmp_mode, int* dist, int* time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_set_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_set_config(ushort CardNo, ushort hcmp, ushort axis, ushort cmp_source, ushort cmp_logic, int time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_get_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_get_config(ushort CardNo, ushort hcmp, ushort* axis, ushort* cmp_source, ushort* cmp_logic, int* time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_add_point", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_add_point(ushort CardNo, ushort hcmp, int cmp_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_set_liner", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_set_liner(ushort CardNo, ushort hcmp, int Increment, int Count);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_get_liner", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_get_liner(ushort CardNo, ushort hcmp, int* Increment, int* Count);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_get_current_state", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_get_current_state(ushort CardNo, ushort hcmp, int* remained_points, int* current_point, int* runned_points);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_clear_points", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_clear_points(ushort CardNo, ushort hcmp);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_cmp_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_cmp_pin(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_cmp_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_cmp_pin(ushort CardNo, ushort axis, ushort on_off);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_set_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_set_enable(ushort CardNo, ushort hcmp, ushort cmp_enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_get_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_get_enable(ushort CardNo, ushort hcmp, ushort* cmp_enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_set_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_set_config(ushort CardNo, ushort hcmp, ushort cmp_mode, ushort x_axis, ushort x_cmp_source, ushort y_axis, ushort y_cmp_source, int error, ushort cmp_logic, int time, ushort pwm_enable, double duty, int freq, ushort port_sel, ushort pwm_number);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_get_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_get_config(ushort CardNo, ushort hcmp, ushort* cmp_mode, ushort* x_axis, ushort* x_cmp_source, ushort* y_axis, ushort* y_cmp_source, int* error, ushort* cmp_logic, int* time, ushort* pwm_enable, double* duty, int* freq, ushort* port_sel, ushort* pwm_number);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_add_point", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_add_point(ushort CardNo, ushort hcmp, int x_cmp_pos, int y_cmp_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_get_current_state", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_get_current_state(ushort CardNo, ushort hcmp, int* remained_points, int* x_current_point, int* y_current_point, int* runned_points, ushort* current_state);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_clear_points", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_clear_points(ushort CardNo, ushort hcmp);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_force_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_force_output(ushort CardNo, ushort hcmp, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_inbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_inbit(ushort CardNo, ushort bitno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_outbit(ushort CardNo, ushort bitno, ushort on_off);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_outbit(ushort CardNo, ushort bitno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_inport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint dmc_read_inport(ushort CardNo, ushort portno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_outport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint dmc_read_outport(ushort CardNo, ushort portno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_outport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_outport(ushort CardNo, ushort portno, uint outport_val);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_outport_16X", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_outport_16X(ushort CardNo, ushort portno, uint outport_val);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_map_virtual", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_map_virtual(ushort CardNo, ushort bitno, ushort MapIoType, ushort MapIoIndex, double Filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_io_map_virtual", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_io_map_virtual(ushort CardNo, ushort bitno, ushort* MapIoType, ushort* MapIoIndex, double* Filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_inbit_virtual", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_inbit_virtual(ushort CardNo, ushort bitno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_reverse_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_reverse_outbit(ushort CardNo, ushort bitno, double reverse_time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_count_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_count_mode(ushort CardNo, ushort bitno, ushort mode, double filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_io_count_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_io_count_mode(ushort CardNo, ushort bitno, ushort* mode, double* filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_count_value", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_count_value(ushort CardNo, ushort bitno, uint CountValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_io_count_value", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_io_count_value(ushort CardNo, ushort bitno, uint* CountValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_axis_io_map", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_axis_io_map(ushort CardNo, ushort Axis, ushort IoType, ushort MapIoType, ushort MapIoIndex, double Filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_axis_io_map", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_axis_io_map(ushort CardNo, ushort Axis, ushort IoType, ushort* MapIoType, ushort* MapIoIndex, double* Filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_special_input_filter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_special_input_filter(ushort CardNo, double Filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_sd_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_sd_mode(ushort CardNo, ushort axis, ushort enable, ushort sd_logic, ushort sd_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_sd_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_sd_mode(ushort CardNo, ushort axis, ushort* enable, ushort* sd_logic, ushort* sd_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_inp_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_inp_mode(ushort CardNo, ushort axis, ushort enable, ushort inp_logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_inp_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_inp_mode(ushort CardNo, ushort axis, ushort* enable, ushort* inp_logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_rdy_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_rdy_mode(ushort CardNo, ushort axis, ushort enable, ushort rdy_logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_rdy_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_rdy_mode(ushort CardNo, ushort axis, ushort* enable, ushort* rdy_logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_erc_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_erc_mode(ushort CardNo, ushort axis, ushort enable, ushort erc_logic, ushort erc_width, ushort erc_off_time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_erc_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_erc_mode(ushort CardNo, ushort axis, ushort* enable, ushort* erc_logic, ushort* erc_width, ushort* erc_off_time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_alm_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_alm_mode(ushort CardNo, ushort axis, ushort enable, ushort alm_logic, ushort alm_action);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_alm_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_alm_mode(ushort CardNo, ushort axis, ushort* enable, ushort* alm_logic, ushort* alm_action);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_ez_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_ez_mode(ushort CardNo, ushort axis, ushort ez_logic, ushort ez_mode, double filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_ez_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_ez_mode(ushort CardNo, ushort axis, ushort* ez_logic, ushort* ez_mode, double* filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_sevon_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_sevon_pin(ushort CardNo, ushort axis, ushort on_off);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_sevon_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_sevon_pin(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_rdy_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_rdy_pin(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_erc_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_erc_pin(ushort CardNo, ushort axis, ushort on_off);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_erc_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_erc_pin(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_sevrst_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_sevrst_pin(ushort CardNo, ushort axis, ushort on_off);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_sevrst_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_sevrst_pin(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_dstp_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_dstp_mode(ushort CardNo, ushort axis, ushort enable, ushort logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_io_dstp_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_io_dstp_mode(ushort CardNo, ushort axis, ushort* enable, ushort* logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_dec_stop_time", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_dec_stop_time(ushort CardNo, ushort axis, double time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_dec_stop_time", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_dec_stop_time(ushort CardNo, ushort axis, double* time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_vector_dec_stop_time", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_vector_dec_stop_time(ushort CardNo, ushort Crd, double time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_vector_dec_stop_time", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_vector_dec_stop_time(ushort CardNo, ushort Crd, double* time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_dec_stop_dist", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_dec_stop_dist(ushort CardNo, ushort axis, int dist);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_dec_stop_dist", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_dec_stop_dist(ushort CardNo, ushort axis, int* dist);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_dstp_bitno", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_dstp_bitno(ushort CardNo, ushort axis, ushort bitno, double filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_io_dstp_bitno", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_io_dstp_bitno(ushort CardNo, ushort axis, ushort* bitno, double* filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_counter_inmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_counter_inmode(ushort CardNo, ushort axis, ushort mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_counter_inmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_counter_inmode(ushort CardNo, ushort axis, ushort* mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_encoder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_encoder(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_encoder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_encoder(ushort CardNo, ushort axis, int encoder_value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_encoder_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_encoder_unit(ushort CardNo, ushort axis, double pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_encoder_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_encoder_unit(ushort CardNo, ushort axis, double* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_handwheel_encoder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_handwheel_encoder(ushort CardNo, ushort channel, int pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_handwheel_encoder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_handwheel_encoder(ushort CardNo, ushort channel, int* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_extra_encoder_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_extra_encoder_mode(ushort CardNo, ushort channel, ushort inmode, ushort multi);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_extra_encoder_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_extra_encoder_mode(ushort CardNo, ushort channel, ushort* inmode, ushort* multi);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_extra_encoder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_extra_encoder(ushort CardNo, ushort channel, int pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_extra_encoder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_extra_encoder(ushort CardNo, ushort channel, int* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_position", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_position(ushort CardNo, ushort axis, int current_position);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_position", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_position(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_position_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_position_unit(ushort CardNo, ushort axis, double pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_position_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_position_unit(ushort CardNo, ushort axis, double* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_current_speed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double dmc_read_current_speed(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_current_speed_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_current_speed_unit(ushort CardNo, ushort axis, double* current_speed);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_vector_speed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double dmc_read_vector_speed(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_target_position", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_target_position(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_target_position_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_target_position_unit(ushort CardNo, ushort axis, double* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_check_done", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_check_done(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_axis_io_status", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint dmc_axis_io_status(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_stop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_stop(ushort CardNo, ushort axis, ushort stop_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_check_done_multicoor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_check_done_multicoor(ushort CardNo, ushort Crd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_stop_multicoor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_stop_multicoor(ushort CardNo, ushort Crd, ushort stop_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_emg_stop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_emg_stop(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_LinkState", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_LinkState(ushort CardNo, ushort* State);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_axis_run_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_axis_run_mode(ushort CardNo, ushort axis, ushort* run_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_stop_reason", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_stop_reason(ushort CardNo, ushort axis, int* StopReason);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_clear_stop_reason", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_clear_stop_reason(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_trace", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_trace(ushort CardNo, ushort axis, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_trace", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_trace(ushort CardNo, ushort axis, ushort* enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_trace_data", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_trace_data(ushort CardNo, ushort axis, ushort data_option, int* ReceiveSize, double* time, double* data, int* remain_num);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_trace_start", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_trace_start(ushort CardNo, ushort AxisNum, ushort* AxisList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_trace_stop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_trace_stop(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_calculate_arclength_center", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_calculate_arclength_center(double* start_pos, double* target_pos, double* cen_pos, ushort arc_dir, double circle, double* ArcLength);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_open_list", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_open_list(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_close_list", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_close_list(ushort CardNo, ushort Crd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_reset_list", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_reset_list(ushort CardNo, ushort Crd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_stop_list", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_stop_list(ushort CardNo, ushort Crd, ushort stop_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_pause_list", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_pause_list(ushort CardNo, ushort Crd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_start_list", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_start_list(ushort CardNo, ushort Crd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_run_state", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_run_state(ushort CardNo, ushort Crd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_remain_space", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_conti_remain_space(ushort CardNo, ushort Crd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_read_current_mark", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_conti_read_current_mark(ushort CardNo, ushort Crd);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_blend", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_blend(ushort CardNo, ushort Crd, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_blend", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_blend(ushort CardNo, ushort Crd, ushort* enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_override", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_override(ushort CardNo, ushort Crd, double Percent);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_change_speed_ratio", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_change_speed_ratio(ushort CardNo, ushort Crd, double percent);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_lookahead_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_lookahead_mode(ushort CardNo, ushort Crd, ushort enable, int LookaheadSegments, double PathError, double LookaheadAcc);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_lookahead_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_lookahead_mode(ushort CardNo, ushort Crd, ushort* enable, int* LookaheadSegments, double* PathError, double* LookaheadAcc);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_wait_input", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_wait_input(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double TimeOut, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_delay_outbit_to_start", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_delay_outbit_to_start(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double delay_value, ushort delay_mode, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_delay_outbit_to_stop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_delay_outbit_to_stop(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double delay_time, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_ahead_outbit_to_stop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_ahead_outbit_to_stop(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double ahead_value, ushort ahead_mode, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_accurate_outbit_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_accurate_outbit_unit(ushort CardNo, ushort Crd, ushort cmp_no, ushort on_off, ushort axis, double abs_pos, ushort pos_source, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_write_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_write_outbit(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_clear_io_action", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_clear_io_action(ushort CardNo, ushort Crd, uint Io_Mask);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_pause_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_pause_output(ushort CardNo, ushort Crd, ushort action, int mask, int state);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_pause_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_pause_output(ushort CardNo, ushort Crd, ushort* action, int* mask, int* state);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_delay", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_delay(ushort CardNo, ushort Crd, double delay_time, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_reverse_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_reverse_outbit(ushort CardNo, ushort Crd, ushort bitno, double reverse_time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_delay_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_delay_outbit(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double delay_time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_line_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_line_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* pPosList, ushort posi_mode, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_arc_move_center_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_arc_move_center_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double* Cen_Pos, ushort Arc_Dir, int Circle, ushort posi_mode, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_arc_move_radius_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_arc_move_radius_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double Arc_Radius, ushort Arc_Dir, int Circle, ushort posi_mode, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_arc_move_3points_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_arc_move_3points_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double* Mid_Pos, int Circle, ushort posi_mode, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_rectangle_move_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_rectangle_move_unit(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double* Mark_Pos, int num, ushort rect_mode, ushort posi_mode, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_pmove_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_pmove_unit(ushort CardNo, ushort Crd, ushort axis, double dist, ushort posi_mode, ushort mode, int imark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_involute_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_involute_mode(ushort CardNo, ushort Crd, ushort mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_involute_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_involute_mode(ushort CardNo, ushort Crd, ushort* mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_gear_follow_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_gear_follow_profile(ushort CardNo, ushort axis, ushort enable, ushort master_axis, double ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_gear_follow_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_gear_follow_profile(ushort CardNo, ushort axis, ushort* enable, ushort* master_axis, double* ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_line_unit_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_line_unit_extern(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double* Cen_Pos, ushort posi_mode, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_arc_move_center_unit_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_arc_move_center_unit_extern(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Target_Pos, double* Cen_Pos, double Arc_Radius, ushort posi_mode, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_pwm_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_pwm_pin(ushort CardNo, ushort portno, ushort ON_OFF, double dfreqency, double dduty);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_pwm_pin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_pwm_pin(ushort CardNo, ushort portno, ushort* ON_OFF, double* dfreqency, double* dduty);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_pwm_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_pwm_enable(ushort CardNo, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_pwm_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_pwm_enable(ushort CardNo, ushort* enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_pwm_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_pwm_output(ushort CardNo, ushort PwmNo, double fDuty, double fFre);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_pwm_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_pwm_output(ushort CardNo, ushort PwmNo, double* fDuty, double* fFre);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_pwm_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_pwm_output(ushort CardNo, ushort Crd, ushort PwmNo, double fDuty, double fFre);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_pwm_enable_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_pwm_enable_extern(ushort CardNo, ushort channel, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_pwm_enable_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_pwm_enable_extern(ushort CardNo, ushort channel, ushort* enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_pwm_follow_speed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_pwm_follow_speed(ushort CardNo, ushort Crd, ushort pwm_no, ushort mode, double MaxVel, double MaxValue, double OutValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_pwm_follow_speed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_pwm_follow_speed(ushort CardNo, ushort Crd, ushort pwm_no, ushort* mode, double* MaxVel, double* MaxValue, double* OutValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_pwm_onoff_duty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_pwm_onoff_duty(ushort CardNo, ushort PwmNo, double fOnDuty, double fOffDuty);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_pwm_onoff_duty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_pwm_onoff_duty(ushort CardNo, ushort PwmNo, double* fOnDuty, double* fOffDuty);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_delay_pwm_to_start", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_delay_pwm_to_start(ushort CardNo, ushort Crd, ushort pwmno, ushort on_off, double delay_value, ushort delay_mode, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_delay_pwm_to_stop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_delay_pwm_to_stop(ushort CardNo, ushort Crd, ushort pwmno, ushort on_off, double delay_time, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_ahead_pwm_to_stop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_ahead_pwm_to_stop(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double ahead_value, ushort ahead_mode, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_write_pwm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_write_pwm(ushort CardNo, ushort Crd, ushort pwmno, ushort on_off, double ReverseTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_da_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_da_enable(ushort CardNo, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_da_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_da_enable(ushort CardNo, ushort* enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_da_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_da_output(ushort CardNo, ushort channel, double Vout);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_da_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_da_output(ushort CardNo, ushort channel, double* Vout);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_ad_input", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_ad_input(ushort CardNo, ushort channel, double* Vout);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_da_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_da_output(ushort CardNo, ushort Crd, ushort channel, double Vout);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_da_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_da_enable(ushort CardNo, ushort Crd, ushort enable, ushort channel, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_da_follow_speed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_da_follow_speed(ushort CardNo, ushort Crd, ushort da_no, double MaxVel, double MaxValue, double acc_offset, double dec_offset, double acc_dist, double dec_dist);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_da_follow_speed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_da_follow_speed(ushort CardNo, ushort Crd, ushort da_no, double* MaxVel, double* MaxValue, double* acc_offset, double* dec_offset, double* acc_dist, double* dec_dist);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_can_state", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_can_state(ushort CardNo, ushort NodeNum, ushort state, ushort baud);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_can_state", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_can_state(ushort CardNo, ushort* NodeNum, ushort* state);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_can_errcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_can_errcode(ushort CardNo, ushort* Errcode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_can_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_can_outbit(ushort CardNo, ushort Node, ushort bitno, ushort on_off);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_can_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_can_outbit(ushort CardNo, ushort Node, ushort bitno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_can_inbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_can_inbit(ushort CardNo, ushort Node, ushort bitno);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_write_can_outport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_write_can_outport(ushort CardNo, ushort Node, ushort PortNo, uint outport_val);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_can_outport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint dmc_read_can_outport(ushort CardNo, ushort Node, ushort PortNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_can_inport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint dmc_read_can_inport(ushort CardNo, ushort Node, ushort PortNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_can_errcode_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_can_errcode_extern(ushort CardNo, ushort* Errcode, ushort* msg_losed, ushort* emg_msg_num, ushort* lostHeartB, ushort* EmgMsg);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_profile_limit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_set_profile_limit(ushort CardNo, ushort axis, double Max_Vel, double Max_Acc, double EvenTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_profile_limit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_profile_limit(ushort CardNo, ushort axis, double* Max_Vel, double* Max_Acc, double* EvenTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_vector_profile_limit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_set_vector_profile_limit(ushort CardNo, ushort Crd, double Max_Vel, double Max_Acc, double EvenTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_vector_profile_limit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int dmc_get_vector_profile_limit(ushort CardNo, ushort Crd, double* Max_Vel, double* Max_Acc, double* EvenTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_arc_limit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_arc_limit(ushort CardNo, ushort Crd, ushort Enable, double MaxCenAcc, double MaxArcError);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_arc_limit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_arc_limit(ushort CardNo, ushort Crd, ushort* Enable, double* MaxCenAcc, double* MaxArcError);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_softltc_set_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_softltc_set_mode(ushort CardNo, ushort latch, ushort ltc_enable, ushort ltc_mode, ushort ltc_inbit, ushort ltc_logic, double filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_softltc_get_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_softltc_get_mode(ushort CardNo, ushort latch, ushort* ltc_enable, ushort* ltc_mode, ushort* ltc_inbit, ushort* ltc_logic, double* filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_softltc_set_source", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_softltc_set_source(ushort CardNo, ushort latch, ushort axis, ushort ltc_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_softltc_get_source", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_softltc_get_source(ushort CardNo, ushort latch, ushort axis, ushort* ltc_source);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_softltc_reset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_softltc_reset(ushort CardNo, ushort latch);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_softltc_get_number", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_softltc_get_number(ushort CardNo, ushort latch, ushort axis, int* number);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_softltc_get_value_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_softltc_get_value_unit(ushort CardNo, ushort latch, ushort axis, double* value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_IoFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_IoFilter(ushort CardNo, ushort bitno, double filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_IoFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_IoFilter(ushort CardNo, ushort bitno, double* filter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_lsc_index_value", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_lsc_index_value(ushort CardNo, ushort axis, ushort IndexID, int IndexValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_lsc_index_value", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_lsc_index_value(ushort CardNo, ushort axis, ushort IndexID, int* IndexValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_lsc_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_lsc_config(ushort CardNo, ushort axis, ushort Origin, uint Interal, uint NegIndex, uint PosIndex, double Ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_lsc_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_lsc_config(ushort CardNo, ushort axis, ushort* Origin, uint* Interal, uint* NegIndex, uint* PosIndex, double* Ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_watchdog", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_watchdog(ushort CardNo, ushort enable, uint time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_call_watchdog", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_call_watchdog(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_diagnoseData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_diagnoseData(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_cmd_end", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_cmd_end(ushort CardNo, ushort Crd, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_zone_limit_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_zone_limit_config(ushort CardNo, ushort* axis, ushort* Source, int x_pos_p, int x_pos_n, int y_pos_p, int y_pos_n, ushort action_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_zone_limit_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_zone_limit_config(ushort CardNo, ushort* axis, ushort* Source, int* x_pos_p, int* x_pos_n, int* y_pos_p, int* y_pos_n, ushort* action_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_zone_limit_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_zone_limit_enable(ushort CardNo, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_interlock_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_interlock_config(ushort CardNo, ushort* axis, ushort* Source, int delta_pos, ushort action_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_interlock_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_interlock_config(ushort CardNo, ushort* axis, ushort* Source, int* delta_pos, ushort* action_para);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_interlock_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_interlock_enable(ushort CardNo, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_grant_error_protect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_grant_error_protect(ushort CardNo, ushort axis, ushort enable, uint dstp_error, uint emg_error);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_grant_error_protect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_grant_error_protect(ushort CardNo, ushort axis, ushort* enable, uint* dstp_error, uint* emg_error);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_safety_param", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_safety_param(ushort CardNo, ushort axis, ushort enable, int safety_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_safety_param", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_safety_param(ushort CardNo, ushort axis, ushort* enable, int* safety_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_diagnose_param", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_diagnose_param(ushort CardNo, ushort axis, int* tartet_pos, int* mode, int* pulse_pos, int* endcoder_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_camerablow_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_camerablow_config(ushort CardNo, ushort camerablow_en, int cameraPos, ushort piece_num, int piece_distance, ushort axis_sel, int latch_distance_min);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_camerablow_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_camerablow_config(ushort CardNo, ushort* camerablow_en, int* cameraPos, ushort* piece_num, int* piece_distance, ushort* axis_sel, int* latch_distance_min);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_clear_camerablow_errorcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_clear_camerablow_errorcode(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_camerablow_errorcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_camerablow_errorcode(ushort CardNo, ushort* errorcode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_limit_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_limit_config(ushort CardNo, ushort portno, ushort enable, ushort axis_sel, ushort el_mode, ushort el_logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_io_limit_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_io_limit_config(ushort CardNo, ushort portno, ushort* enable, ushort* axis_sel, ushort* el_mode, ushort* el_logic);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_handwheel_filter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_handwheel_filter(ushort CardNo, ushort axis, double filter_factor);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_handwheel_filter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_handwheel_filter(ushort CardNo, ushort axis, double* filter_factor);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_interp_map", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_interp_map(ushort CardNo, ushort Crd, ushort* AxisNum, ushort* AxisList, double* pPosList);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_crd_errcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_crd_errcode(ushort CardNo, ushort Crd, ushort* errcode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_line_unit_follow", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_line_unit_follow(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* Dist, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_line_unit_follow", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_line_unit_follow(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* pPosList, ushort posi_mode, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_da_action", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_da_action(ushort CardNo, ushort Crd, ushort mode, ushort portno, double dvalue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_read_encoder_speed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_read_encoder_speed(ushort CardNo, ushort Axis, double* current_speed);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_axis_follow_line_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_axis_follow_line_enable(ushort CardNo, ushort Crd, ushort enable_flag);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_interp_compensation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_interp_compensation(ushort CardNo, ushort axis, double dvalue, double time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_interp_compensation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_interp_compensation(ushort CardNo, ushort axis, double* dvalue, double* time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_exactstop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_exactstop(ushort CardNo, ushort axis, ushort ioNum, ushort* ioList, ushort enable, ushort valid_logic, ushort action, ushort move_dir);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_distance_to_start", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_distance_to_start(ushort CardNo, ushort Crd, double* distance_x, double* distance_y, int imark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_start_distance_flag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_start_distance_flag(ushort CardNo, ushort Crd, ushort flag);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_home_soft_limit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_home_soft_limit(ushort CardNo, ushort Axis, int N_limit, int P_limit);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_home_soft_limit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_home_soft_limit(ushort CardNo, ushort Axis, int* N_limit, int* P_limit);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_gear_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_gear_unit(ushort CardNo, ushort Crd, ushort axis, double dist, ushort follow_mode, int imark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_path_fitting_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_path_fitting_enable(ushort CardNo, ushort Crd, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_enable_leadscrew_comp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_enable_leadscrew_comp(ushort CardNo, ushort axis, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_leadscrew_comp_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_leadscrew_comp_config(ushort CardNo, ushort axis, ushort n, int startpos, int lenpos, int* pCompPos, int* pCompNeg);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_t_pmove_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_t_pmove_extern(ushort CardNo, ushort axis, double MidPos, double TargetPos, double Min_Vel, double Max_Vel, double stop_Vel, double acc, double dec, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_pulse_encoder_count_error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_pulse_encoder_count_error(ushort CardNo, ushort axis, ushort error);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_pulse_encoder_count_error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_pulse_encoder_count_error(ushort CardNo, ushort axis, ushort* error);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_check_pulse_encoder_count_error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_check_pulse_encoder_count_error(ushort CardNo, ushort axis, int* pulse_position, int* enc_position);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_update_target_position_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_update_target_position_extern(ushort CardNo, ushort axis, double mid_pos, double aim_pos, double vel, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_close(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_start", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_start(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_set_init_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_set_init_config(ushort CardNo, ushort cameraCount, int* pCameraPos, ushort* pCamIONo, uint cameraTime, ushort cameraTrigLevel, ushort blowCount, int* pBlowPos, ushort* pBlowIONo, uint blowTime, ushort blowTrigLevel, ushort axis, ushort dir, ushort checkMode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_set_camera_trig_count", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_set_camera_trig_count(ushort CardNo, ushort cameraNum, uint cameraTrigCnt);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_get_camera_trig_count", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_get_camera_trig_count(ushort CardNo, ushort cameraNum, uint* pCameraTrigCnt, ushort count);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_set_blow_trig_count", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_set_blow_trig_count(ushort CardNo, ushort blowNum, uint blowTrigCnt);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_get_blow_trig_count", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_get_blow_trig_count(ushort CardNo, ushort blowNum, uint* pBlowTrigCnt, ushort count);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_get_camera_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_get_camera_config(ushort CardNo, ushort index, int* pos, uint* trigTime, ushort* ioNo, ushort* trigLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_get_blow_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_get_blow_config(ushort CardNo, ushort index, int* pos, uint* trigTime, ushort* ioNo, ushort* trigLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_get_blow_status", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_get_blow_status(ushort CardNo, uint* trigCntAll, ushort* trigMore, ushort* trigLess);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_trig_blow", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_trig_blow(ushort CardNo, ushort blowNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_set_blow_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_set_blow_enable(ushort CardNo, ushort blowNum, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_set_piece_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_set_piece_config(ushort CardNo, uint maxWidth, uint minWidth, uint minDistance, uint minTimeIntervel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_get_piece_status", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_get_piece_status(ushort CardNo, uint* pieceFind, uint* piecePassCam, uint* dist2next, uint* pieceWidth);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_set_cam_trig_phase", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_set_cam_trig_phase(ushort CardNo, ushort blowNo, double coef);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_sorting_set_blow_trig_phase", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_sorting_set_blow_trig_phase(ushort CardNo, ushort blowNo, double coef);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_sevon_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_sevon_enable(ushort CardNo, ushort axis, ushort on_off);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_sevon_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_sevon_enable(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_compare_add_point_cycle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_compare_add_point_cycle(ushort CardNo, ushort cmp, int pos, ushort dir, uint bitno, uint cycle, ushort level);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_encoder_count_error_action_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_encoder_count_error_action_config(ushort CardNo, ushort enable, ushort stopmode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_encoder_count_error_action_config", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_encoder_count_error_action_config(ushort CardNo, ushort* enable, ushort* stopmode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_home_el_return", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_home_el_return(ushort CardNo, ushort axis, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_set_encoder_da_follow_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_set_encoder_da_follow_enable(ushort CardNo, ushort Crd, ushort axis, ushort enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_get_encoder_da_follow_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_get_encoder_da_follow_enable(ushort CardNo, ushort Crd, ushort* axis, ushort* enable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_check_done_pos", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_check_done_pos(ushort CardNo, ushort axis, ushort posi_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_factor_error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_factor_error(ushort CardNo, ushort axis, double factor, int error);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_factor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_factor(ushort CardNo, ushort axis, double factor);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_error(ushort CardNo, ushort axis, int error);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_factor_error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_factor_error(ushort CardNo, ushort axis, double* factor, int* error);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_check_success_pulse", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_check_success_pulse(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_check_success_encoder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_check_success_encoder(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_count_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_count_profile(ushort CardNo, ushort chan, ushort bitno, ushort mode, double filter, double count_value, ushort* axis_list, ushort axis_num, ushort stop_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_io_count_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_io_count_profile(ushort CardNo, ushort chan, ushort* bitno, ushort* mode, double* filter, double* count_value, ushort* axis_list, ushort* axis_num, ushort* stop_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_io_count_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_io_count_enable(ushort CardNo, ushort chan, ushort ifenable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_clear_io_count", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_clear_io_count(ushort CardNo, ushort chan);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_io_count_value_extern", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_io_count_value_extern(ushort CardNo, ushort chan, int* current_value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_position_ex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_position_ex(ushort CardNo, ushort axis, double* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_encoder_ex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_encoder_ex(ushort CardNo, ushort axis, double* pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_set_home_shift_param", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_set_home_shift_param(ushort CardNo, ushort axis, ushort pos_clear_mode, double ShiftValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_home_shift_param", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_home_shift_param(ushort CardNo, ushort axis, ushort* pos_clear_mode, double* ShiftValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_change_speed_extend", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_change_speed_extend(ushort CardNo, ushort axis, double Curr_Vel, double Taccdec, ushort pin_num, ushort trig_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_follow_vector_speed_move", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_follow_vector_speed_move(ushort CardNo, ushort axis, ushort Follow_AxisNum, ushort* Follow_AxisList, double ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_conti_line_unit_extend", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_conti_line_unit_extend(ushort CardNo, ushort Crd, ushort AxisNum, ushort* AxisList, double* pPosList, ushort posi_mode, double Extend_Len, ushort enable, int mark);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_set_config_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_set_config_unit(ushort CardNo, ushort hcmp, ushort cmp_mode, ushort x_axis, ushort x_cmp_source, double x_cmp_error, ushort y_axis, ushort y_cmp_source, double y_cmp_error, ushort cmp_logic, int time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_get_config_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_get_config_unit(ushort CardNo, ushort hcmp, ushort* cmp_mode, ushort* x_axis, ushort* x_cmp_source, double* x_cmp_error, ushort* y_axis, ushort* y_cmp_source, double* y_cmp_error, ushort* cmp_logic, int* time);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_set_pwmoutput", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_set_pwmoutput(ushort CardNo, ushort hcmp, ushort pwm_enable, double duty, double freq, ushort pwm_number);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_get_pwmoutput", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_get_pwmoutput(ushort CardNo, ushort hcmp, ushort* pwm_enable, double* duty, double* freq, ushort* pwm_number);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_add_point_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_add_point_unit(ushort ConnectNo, ushort hcmp, double x_cmp_pos, double y_cmp_pos, ushort cmp_outbit);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_hcmp_2d_get_current_state_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_hcmp_2d_get_current_state_unit(ushort CardNo, ushort hcmp, int* remained_points, double* x_current_point, double* y_current_point, int* runned_points, ushort* current_state, ushort* current_outbit);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_home_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_home_profile(ushort CardNo, ushort axis, ushort home_mode, double Low_Vel, double High_Vel, double Tacc, double Tdec, double offsetpos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_home_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_home_profile(ushort CardNo, ushort axis, ushort* home_mode, double* Low_Vel, double* High_Vel, double* Tacc, double* Tdec, double* offsetpos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_home_move", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_home_move(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_manager_para", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_manager_para(ushort CardNo, ushort PortNum, uint Baudrate, ushort ManagerID);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_manager_para", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_manager_para(ushort CardNo, ushort PortNum, uint* Baudrate, ushort* ManagerID);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_manager_od", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_manager_od(ushort CardNo, ushort PortNum, ushort Index, ushort SubIndex, ushort ValLength, uint Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_manager_od", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_manager_od(ushort CardNo, ushort PortNum, ushort Index, ushort SubIndex, ushort ValLength, uint* Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_node_od", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_node_od(ushort CardNo, ushort PortNum, ushort NodeNum, ushort Index, ushort SubIndex, ushort ValLength, int Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_node_od", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_node_od(ushort CardNo, ushort PortNum, ushort NodeNum, ushort Index, ushort SubIndex, ushort ValLength, int* Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_upload_configfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_upload_configfile(ushort CardNo, ushort PortNum, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_reset_to_factory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_reset_to_factory(ushort CardNo, ushort PortNum, ushort NodeNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_write_to_pci", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_write_to_pci(ushort CardNo, ushort PortNum, ushort NodeNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_download_configfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_download_configfile(ushort CardNo, ushort PortNum, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_download_mapfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_download_mapfile(ushort CardNo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_axis_enable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_axis_enable(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_axis_disable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_axis_disable(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_alarm_clear", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_alarm_clear(ushort CardNo, ushort PortNum, ushort NodeNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_slave_nodes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_slave_nodes(ushort CardNo, ushort PortNum, ushort BaudRate, ushort* NodeId, ushort* NodeNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_total_axes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_total_axes(ushort CardNo, uint* TotalAxis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_total_adcnum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_total_adcnum(ushort CardNo, ushort* TotalIn, ushort* TotalOut);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_total_ionum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_total_ionum(ushort CardNo, ushort* TotalIn, ushort* TotalOut);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_clear_alarm_fieldbus", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_clear_alarm_fieldbus(ushort CardNo, ushort PortNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_controller_workmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_controller_workmode(ushort CardNo, ushort* controller_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_controller_workmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_controller_workmode(ushort CardNo, ushort controller_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_cycletime", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_cycletime(ushort CardNo, ushort PortNum, uint CycleTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_cycletime", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_cycletime(ushort CardNo, ushort PortNum, uint* CycleTime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "dmc_get_perline_time", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short dmc_get_perline_time(ushort CardNo, ushort TypeIndex, uint* Averagetime, uint* Maxtime, ulong* Cycles);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_axis_run_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_axis_run_mode(ushort CardNo, ushort axis, ushort run_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_type", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_axis_type(ushort CardNo, ushort axis, ushort* Axis_Type);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_consume_time_fieldbus", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_consume_time_fieldbus(ushort CardNo, ushort PortNum, uint* Average_time, uint* Max_time, ulong* Cycles);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_clear_consume_time_fieldbus", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_clear_consume_time_fieldbus(ushort CardNo, ushort PortNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_stop_etc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_stop_etc(ushort CardNo, ushort* ETCState);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_statusword", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_axis_statusword(ushort CardNo, ushort axis, int* statusword);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_axis_contrlword", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_axis_contrlword(ushort CardNo, ushort Axis, int Contrlword);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_contrlword", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_axis_contrlword(ushort CardNo, ushort Axis, int* Contrlword);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_axis_contrlmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_axis_contrlmode(ushort CardNo, ushort Axis, int Contrlmode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_contrlmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_axis_contrlmode(ushort CardNo, ushort Axis, int* Contrlmode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_errcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_errcode(ushort CardNo, ushort channel, ushort* Errcode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_card_errcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_card_errcode(ushort CardNo, ushort* Errcode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_errcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_axis_errcode(ushort CardNo, ushort axis, ushort* Errcode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_clear_errcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_clear_errcode(ushort CardNo, ushort channel);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_clear_card_errcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_clear_card_errcode(ushort CardNo);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_clear_axis_errcode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_clear_axis_errcode(ushort CardNo, ushort iaxis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_LostHeartbeat_Nodes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_LostHeartbeat_Nodes(ushort CardNo, ushort PortNum, ushort* NodeID, ushort* NodeNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_EmergeneyMessege_Nodes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_EmergeneyMessege_Nodes(ushort CardNo, ushort PortNum, uint* NodeMsg, ushort* MsgNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_SendNmtCommand", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_SendNmtCommand(ushort CardNo, ushort PortNum, ushort NodeID, ushort NmtCommand);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_syn_move", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_syn_move(ushort CardNo, ushort AxisNum, ushort* AxisList, int* Position, ushort* PosiMode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_syn_move_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_syn_move_unit(ushort CardNo, ushort AxisNum, ushort* AxisList, double* Position, ushort* PosiMode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_sync_pmove_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_sync_pmove_unit(ushort CardNo, ushort AxisNum, ushort* AxisList, double* Dist, ushort* PosiMode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_sync_vmove_unit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_sync_vmove_unit(ushort CardNo, ushort AxisNum, ushort* AxisList, ushort* Dir);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_master_para", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_master_para(ushort CardNo, ushort PortNum, ushort Baudrate, uint NodeCnt, ushort MasterId);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_master_para", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_master_para(ushort CardNo, ushort PortNum, ushort* Baudrate, uint* NodeCnt, ushort* MasterId);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_write_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_write_outbit(ushort CardNo, ushort NoteID, ushort IoBit, ushort IoValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_outbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_outbit(ushort CardNo, ushort NoteID, ushort IoBit, ushort* IoValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_inbit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_inbit(ushort CardNo, ushort NoteID, ushort IoBit, ushort* IoValue);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_da_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_da_output(ushort CardNo, ushort NoteID, ushort channel, double Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_da_output", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_da_output(ushort CardNo, ushort NoteID, ushort channel, double* Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_ad_input", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_ad_input(ushort CardNo, ushort NoteID, ushort channel, double* Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_ad_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_ad_mode(ushort CardNo, ushort NoteID, ushort channel, ushort mode, uint buffer_nums);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_ad_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_ad_mode(ushort CardNo, ushort NoteID, ushort channel, ushort* mode, uint buffer_nums);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_da_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_da_mode(ushort CardNo, ushort NoteID, ushort channel, ushort mode, uint buffer_nums);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_da_mode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_da_mode(ushort CardNo, ushort NoteID, ushort channel, ushort* mode, uint buffer_nums);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_write_to_flash", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_write_to_flash(ushort CardNo, ushort PortNum, ushort NodeNum);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_connect_state", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_connect_state(ushort CardNo, ushort NodeNum, ushort state, ushort baud);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_connect_state", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_connect_state(ushort CardNo, ushort* NodeNum, ushort* state);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_write_outport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_write_outport(ushort CardNo, ushort NoteID, ushort portno, uint outport_val);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_outport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_outport(ushort CardNo, ushort NoteID, ushort portno, uint* outport_val);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_inport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_inport(ushort CardNo, ushort NoteID, ushort portno, uint* inport_val);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_state_machine", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_axis_state_machine(ushort CardNo, ushort axis, ushort* Axis_StateMachine);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_setting_contrlmode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_axis_setting_contrlmode(ushort CardNo, ushort axis, int* contrlmode);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_total_slaves", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_total_slaves(ushort CardNo, ushort PortNum, ushort* TotalSlaves);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_node_address", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_axis_node_address(ushort CardNo, ushort axis, ushort* SlaveAddr, ushort* Sub_SlaveAddr);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_axis_io_out", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_axis_io_out(ushort CardNo, ushort axis, uint iostate);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_io_out", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint nmc_get_axis_io_out(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_axis_io_in", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint nmc_get_axis_io_in(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_start_connect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_start_connect(ushort CardNo, ushort chan, ushort* info, ushort* len);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_vendor_info", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_vendor_info(ushort CardNo, ushort axis, sbyte* info, ushort* len);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_slave_type_info", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_slave_type_info(ushort CardNo, ushort axis, sbyte* info, ushort* len);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_slave_name_info", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_slave_name_info(ushort CardNo, ushort axis, sbyte* info, ushort* len);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_slave_version_info", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_slave_version_info(ushort CardNo, ushort axis, sbyte* info, ushort* len);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_write_parameter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_write_parameter(ushort CardNo, ushort axis, ushort index, ushort subindex, uint para_data);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_write_slave_eeprom", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_write_slave_eeprom(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_parameter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_parameter(ushort CardNo, ushort axis, ushort index, ushort subindex, uint* para_data);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_parameter_attributes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_parameter_attributes(ushort CardNo, ushort axis, ushort index, ushort subindex, uint* para_data);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_cmdcycletime", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_cmdcycletime(ushort CardNo, ushort PortNum, uint cmdtime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_cmdcycletime", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_cmdcycletime(ushort CardNo, ushort PortNum, uint* cmdtime);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_start_log", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_start_log(ushort CardNo, ushort chan, ushort node, ushort Ifenable);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_log", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_log(ushort CardNo, ushort chan, ushort node, uint* data);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_config_atuo_log", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_config_atuo_log(ushort CardNo, ushort ifenable, ushort dir, ushort byte_index, ushort mask, ushort condition, uint counter);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_write_rxpdo_extra", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_write_rxpdo_extra(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, int Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_rxpdo_extra", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_rxpdo_extra(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, int* Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_txpdo_extra", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_txpdo_extra(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, int* Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_write_rxpdo_extra_uint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_write_rxpdo_extra_uint(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, uint Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_rxpdo_extra_uint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_rxpdo_extra_uint(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, uint* Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_read_txpdo_extra_uint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_read_txpdo_extra_uint(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, uint* Value);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_log_state", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_log_state(ushort CardNo, ushort chan, uint* state);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_driver_reset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_driver_reset(ushort CardNo, ushort axis);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_set_offset_pos", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_set_offset_pos(ushort CardNo, ushort axis, double offset_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("LTDMC", EntryPoint = "nmc_get_offset_pos", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short nmc_get_offset_pos(ushort CardNo, ushort axis, double* offset_pos);
        }

        public static short dmc_set_debug_mode(ushort mode, string pFileName)
        {
            var __ret = __Internal.dmc_set_debug_mode(mode, pFileName);
            return __ret;
        }

        public static short dmc_get_debug_mode(ref ushort mode, sbyte* pFileName)
        {
            fixed (ushort* __mode0 = &mode)
            {
                var __arg0 = __mode0;
                var __ret = __Internal.dmc_get_debug_mode(__arg0, pFileName);
                return __ret;
            }
        }

        public static short dmc_board_init()
        {
            var __ret = __Internal.dmc_board_init();
            return __ret;
        }

        public static short dmc_board_init_onecard(ushort CardNo)
        {
            var __ret = __Internal.dmc_board_init_onecard(CardNo);
            return __ret;
        }

        /// <summary>/�ͻ����ƶ������� ��ʼ��һ�ſ��ƿ�</summary>
        public static short dmc_board_close_onecard(ushort CardNo)
        {
            var __ret = __Internal.dmc_board_close_onecard(CardNo);
            return __ret;
        }

        /// <summary>/�ͻ����ƶ����ؿ� �ر�һ�����ƿ�</summary>
        public static short dmc_get_CardInfList(ref ushort CardNum, ref uint CardTypeList, ref ushort CardIdList)
        {
            fixed (ushort* __CardNum0 = &CardNum)
            {
                var __arg0 = __CardNum0;
                fixed (uint* __CardTypeList1 = &CardTypeList)
                {
                    var __arg1 = __CardTypeList1;
                    fixed (ushort* __CardIdList2 = &CardIdList)
                    {
                        var __arg2 = __CardIdList2;
                        var __ret = __Internal.dmc_get_CardInfList(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_board_close()
        {
            var __ret = __Internal.dmc_board_close();
            return __ret;
        }

        public static short dmc_board_reset()
        {
            var __ret = __Internal.dmc_board_reset();
            return __ret;
        }

        public static short dmc_board_reset_onecard(ushort CardNo)
        {
            var __ret = __Internal.dmc_board_reset_onecard(CardNo);
            return __ret;
        }

        public static short dmc_soft_reset(ushort CardNo)
        {
            var __ret = __Internal.dmc_soft_reset(CardNo);
            return __ret;
        }

        public static short dmc_cool_reset(ushort CardNo)
        {
            var __ret = __Internal.dmc_cool_reset(CardNo);
            return __ret;
        }

        public static short dmc_original_reset(ushort CardNo)
        {
            var __ret = __Internal.dmc_original_reset(CardNo);
            return __ret;
        }

        public static short dmc_get_card_ID(ushort CardNo, ref uint CardID)
        {
            fixed (uint* __CardID1 = &CardID)
            {
                var __arg1 = __CardID1;
                var __ret = __Internal.dmc_get_card_ID(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_get_release_version(ushort CardNo, sbyte* ReleaseVersion)
        {
            var __ret = __Internal.dmc_get_release_version(CardNo, ReleaseVersion);
            return __ret;
        }

        public static short dmc_get_card_version(ushort CardNo, ref uint CardVersion)
        {
            fixed (uint* __CardVersion1 = &CardVersion)
            {
                var __arg1 = __CardVersion1;
                var __ret = __Internal.dmc_get_card_version(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_get_card_soft_version(ushort CardNo, ref uint FirmID, ref uint SubFirmID)
        {
            fixed (uint* __FirmID1 = &FirmID)
            {
                var __arg1 = __FirmID1;
                fixed (uint* __SubFirmID2 = &SubFirmID)
                {
                    var __arg2 = __SubFirmID2;
                    var __ret = __Internal.dmc_get_card_soft_version(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short dmc_get_card_lib_version(ref uint LibVer)
        {
            fixed (uint* __LibVer0 = &LibVer)
            {
                var __arg0 = __LibVer0;
                var __ret = __Internal.dmc_get_card_lib_version(__arg0);
                return __ret;
            }
        }

        public static short dmc_get_total_axes(ushort CardNo, ref uint TotalAxis)
        {
            fixed (uint* __TotalAxis1 = &TotalAxis)
            {
                var __arg1 = __TotalAxis1;
                var __ret = __Internal.dmc_get_total_axes(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_get_total_liners(ushort CardNo, ref uint TotalLiner)
        {
            fixed (uint* __TotalLiner1 = &TotalLiner)
            {
                var __arg1 = __TotalLiner1;
                var __ret = __Internal.dmc_get_total_liners(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_get_total_ionum(ushort CardNo, ref ushort TotalIn, ref ushort TotalOut)
        {
            fixed (ushort* __TotalIn1 = &TotalIn)
            {
                var __arg1 = __TotalIn1;
                fixed (ushort* __TotalOut2 = &TotalOut)
                {
                    var __arg2 = __TotalOut2;
                    var __ret = __Internal.dmc_get_total_ionum(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short dmc_get_total_adcnum(ushort CardNo, ref ushort TotalIn, ref ushort TotalOut)
        {
            fixed (ushort* __TotalIn1 = &TotalIn)
            {
                var __arg1 = __TotalIn1;
                fixed (ushort* __TotalOut2 = &TotalOut)
                {
                    var __arg2 = __TotalOut2;
                    var __ret = __Internal.dmc_get_total_adcnum(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short dmc_check_sn(ushort CardNo, string str_sn)
        {
            var __ret = __Internal.dmc_check_sn(CardNo, str_sn);
            return __ret;
        }

        public static short dmc_write_sn(ushort CardNo, string str_sn)
        {
            var __ret = __Internal.dmc_write_sn(CardNo, str_sn);
            return __ret;
        }

        /// <summary>*********�����************</summary>
        public static short dmc_set_pulse_outmode(ushort CardNo, ushort axis, ushort outmode)
        {
            var __ret = __Internal.dmc_set_pulse_outmode(CardNo, axis, outmode);
            return __ret;
        }

        public static short dmc_get_pulse_outmode(ushort CardNo, ushort axis, ref ushort outmode)
        {
            fixed (ushort* __outmode2 = &outmode)
            {
                var __arg2 = __outmode2;
                var __ret = __Internal.dmc_get_pulse_outmode(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_equiv(ushort CardNo, ushort axis, double equiv)
        {
            var __ret = __Internal.dmc_set_equiv(CardNo, axis, equiv);
            return __ret;
        }

        public static short dmc_get_equiv(ushort CardNo, ushort axis, ref double equiv)
        {
            fixed (double* __equiv2 = &equiv)
            {
                var __arg2 = __equiv2;
                var __ret = __Internal.dmc_get_equiv(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_backlash_unit(ushort CardNo, ushort axis, double backlash)
        {
            var __ret = __Internal.dmc_set_backlash_unit(CardNo, axis, backlash);
            return __ret;
        }

        public static short dmc_get_backlash_unit(ushort CardNo, ushort axis, ref double backlash)
        {
            fixed (double* __backlash2 = &backlash)
            {
                var __arg2 = __backlash2;
                var __ret = __Internal.dmc_get_backlash_unit(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_backlash(ushort CardNo, ushort axis, int backlash)
        {
            var __ret = __Internal.dmc_set_backlash(CardNo, axis, backlash);
            return __ret;
        }

        public static short dmc_get_backlash(ushort CardNo, ushort axis, ref int backlash)
        {
            fixed (int* __backlash2 = &backlash)
            {
                var __arg2 = __backlash2;
                var __ret = __Internal.dmc_get_backlash(CardNo, axis, __arg2);
                return __ret;
            }
        }

        /// <summary>*********************************�ļ�����*************************************</summary>
        /// <remarks>
        /// <para>*******************************************************************************************************</para>
        /// <para>�ļ��������� ���߿�</para>
        /// <para>filetype</para>
        /// <para>0-basic</para>
        /// <para>1-gcode</para>
        /// <para>2-setting</para>
        /// <para>3-firewave</para>
        /// <para>4-CAN configfile</para>
        /// <para>100-trace data</para>
        /// <para>*******************************************************************************************************</para>
        /// </remarks>
        public static short dmc_download_file(ushort CardNo, string pfilename, string pfilenameinControl, ushort filetype)
        {
            var __ret = __Internal.dmc_download_file(CardNo, pfilename, pfilenameinControl, filetype);
            return __ret;
        }

        public static short dmc_download_memfile(ushort CardNo, string pbuffer, uint buffsize, string pfilenameinControl, ushort filetype)
        {
            var __ret = __Internal.dmc_download_memfile(CardNo, pbuffer, buffsize, pfilenameinControl, filetype);
            return __ret;
        }

        public static short dmc_upload_file(ushort CardNo, string pfilename, string pfilenameinControl, ushort filetype)
        {
            var __ret = __Internal.dmc_upload_file(CardNo, pfilename, pfilenameinControl, filetype);
            return __ret;
        }

        public static short dmc_upload_memfile(ushort CardNo, sbyte* pbuffer, uint buffsize, string pfilenameinControl, ref uint puifilesize, ushort filetype)
        {
            fixed (uint* __puifilesize4 = &puifilesize)
            {
                var __arg4 = __puifilesize4;
                var __ret = __Internal.dmc_upload_memfile(CardNo, pbuffer, buffsize, pfilenameinControl, __arg4, filetype);
                return __ret;
            }
        }

        public static short dmc_download_configfile(ushort CardNo, string FileName)
        {
            var __ret = __Internal.dmc_download_configfile(CardNo, FileName);
            return __ret;
        }

        public static short dmc_download_firmware(ushort CardNo, string FileName)
        {
            var __ret = __Internal.dmc_download_firmware(CardNo, FileName);
            return __ret;
        }

        public static short dmc_get_progress(ushort CardNo, ref float process)
        {
            fixed (float* __process1 = &process)
            {
                var __arg1 = __process1;
                var __ret = __Internal.dmc_get_progress(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_set_softlimit(ushort CardNo, ushort axis, ushort enable, ushort source_sel, ushort SL_action, int N_limit, int P_limit)
        {
            var __ret = __Internal.dmc_set_softlimit(CardNo, axis, enable, source_sel, SL_action, N_limit, P_limit);
            return __ret;
        }

        public static short dmc_get_softlimit(ushort CardNo, ushort axis, ref ushort enable, ref ushort source_sel, ref ushort SL_action, ref int N_limit, ref int P_limit)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __source_sel3 = &source_sel)
                {
                    var __arg3 = __source_sel3;
                    fixed (ushort* __SL_action4 = &SL_action)
                    {
                        var __arg4 = __SL_action4;
                        fixed (int* __N_limit5 = &N_limit)
                        {
                            var __arg5 = __N_limit5;
                            fixed (int* __P_limit6 = &P_limit)
                            {
                                var __arg6 = __P_limit6;
                                var __ret = __Internal.dmc_get_softlimit(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_el_mode(ushort CardNo, ushort axis, ushort enable, ushort el_logic, ushort el_mode)
        {
            var __ret = __Internal.dmc_set_el_mode(CardNo, axis, enable, el_logic, el_mode);
            return __ret;
        }

        public static short dmc_get_el_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort el_logic, ref ushort el_mode)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __el_logic3 = &el_logic)
                {
                    var __arg3 = __el_logic3;
                    fixed (ushort* __el_mode4 = &el_mode)
                    {
                        var __arg4 = __el_mode4;
                        var __ret = __Internal.dmc_get_el_mode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_emg_mode(ushort CardNo, ushort axis, ushort enable, ushort emg_logic)
        {
            var __ret = __Internal.dmc_set_emg_mode(CardNo, axis, enable, emg_logic);
            return __ret;
        }

        public static short dmc_get_emg_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort emg_logic)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __emg_logic3 = &emg_logic)
                {
                    var __arg3 = __emg_logic3;
                    var __ret = __Internal.dmc_get_emg_mode(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        /// <summary>***********************************�����˶�****************************************</summary>
        public static short dmc_set_profile(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double stop_vel)
        {
            var __ret = __Internal.dmc_set_profile(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec, stop_vel);
            return __ret;
        }

        public static short dmc_get_profile(ushort CardNo, ushort axis, ref double Min_Vel, ref double Max_Vel, ref double Tacc, ref double Tdec, ref double stop_vel)
        {
            fixed (double* __Min_Vel2 = &Min_Vel)
            {
                var __arg2 = __Min_Vel2;
                fixed (double* __Max_Vel3 = &Max_Vel)
                {
                    var __arg3 = __Max_Vel3;
                    fixed (double* __Tacc4 = &Tacc)
                    {
                        var __arg4 = __Tacc4;
                        fixed (double* __Tdec5 = &Tdec)
                        {
                            var __arg5 = __Tdec5;
                            fixed (double* __stop_vel6 = &stop_vel)
                            {
                                var __arg6 = __stop_vel6;
                                var __ret = __Internal.dmc_get_profile(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_profile_unit(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Stop_Vel)
        {
            var __ret = __Internal.dmc_set_profile_unit(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec, Stop_Vel);
            return __ret;
        }

        public static short dmc_get_profile_unit(ushort CardNo, ushort axis, ref double Min_Vel, ref double Max_Vel, ref double Tacc, ref double Tdec, ref double Stop_Vel)
        {
            fixed (double* __Min_Vel2 = &Min_Vel)
            {
                var __arg2 = __Min_Vel2;
                fixed (double* __Max_Vel3 = &Max_Vel)
                {
                    var __arg3 = __Max_Vel3;
                    fixed (double* __Tacc4 = &Tacc)
                    {
                        var __arg4 = __Tacc4;
                        fixed (double* __Tdec5 = &Tdec)
                        {
                            var __arg5 = __Tdec5;
                            fixed (double* __Stop_Vel6 = &Stop_Vel)
                            {
                                var __arg6 = __Stop_Vel6;
                                var __ret = __Internal.dmc_get_profile_unit(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_profile_extern(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Ajerk, double Djerk, double stop_vel)
        {
            var __ret = __Internal.dmc_set_profile_extern(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec, Ajerk, Djerk, stop_vel);
            return __ret;
        }

        public static short dmc_get_profile_extern(ushort CardNo, ushort axis, ref double Min_Vel, ref double Max_Vel, ref double Tacc, ref double Tdec, ref double Ajerk, ref double Djerk, ref double stop_vel)
        {
            fixed (double* __Min_Vel2 = &Min_Vel)
            {
                var __arg2 = __Min_Vel2;
                fixed (double* __Max_Vel3 = &Max_Vel)
                {
                    var __arg3 = __Max_Vel3;
                    fixed (double* __Tacc4 = &Tacc)
                    {
                        var __arg4 = __Tacc4;
                        fixed (double* __Tdec5 = &Tdec)
                        {
                            var __arg5 = __Tdec5;
                            fixed (double* __Ajerk6 = &Ajerk)
                            {
                                var __arg6 = __Ajerk6;
                                fixed (double* __Djerk7 = &Djerk)
                                {
                                    var __arg7 = __Djerk7;
                                    fixed (double* __stop_vel8 = &stop_vel)
                                    {
                                        var __arg8 = __stop_vel8;
                                        var __ret = __Internal.dmc_get_profile_extern(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                        return __ret;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_acc_profile(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Acc, double Dec, double stop_vel)
        {
            var __ret = __Internal.dmc_set_acc_profile(CardNo, axis, Min_Vel, Max_Vel, Acc, Dec, stop_vel);
            return __ret;
        }

        public static short dmc_get_acc_profile(ushort CardNo, ushort axis, ref double Min_Vel, ref double Max_Vel, ref double Acc, ref double Dec, ref double stop_vel)
        {
            fixed (double* __Min_Vel2 = &Min_Vel)
            {
                var __arg2 = __Min_Vel2;
                fixed (double* __Max_Vel3 = &Max_Vel)
                {
                    var __arg3 = __Max_Vel3;
                    fixed (double* __Acc4 = &Acc)
                    {
                        var __arg4 = __Acc4;
                        fixed (double* __Dec5 = &Dec)
                        {
                            var __arg5 = __Dec5;
                            fixed (double* __stop_vel6 = &stop_vel)
                            {
                                var __arg6 = __stop_vel6;
                                var __ret = __Internal.dmc_get_acc_profile(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_profile_unit_acc(ushort CardNo, ushort axis, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Stop_Vel)
        {
            var __ret = __Internal.dmc_set_profile_unit_acc(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec, Stop_Vel);
            return __ret;
        }

        public static short dmc_get_profile_unit_acc(ushort CardNo, ushort axis, ref double Min_Vel, ref double Max_Vel, ref double Tacc, ref double Tdec, ref double Stop_Vel)
        {
            fixed (double* __Min_Vel2 = &Min_Vel)
            {
                var __arg2 = __Min_Vel2;
                fixed (double* __Max_Vel3 = &Max_Vel)
                {
                    var __arg3 = __Max_Vel3;
                    fixed (double* __Tacc4 = &Tacc)
                    {
                        var __arg4 = __Tacc4;
                        fixed (double* __Tdec5 = &Tdec)
                        {
                            var __arg5 = __Tdec5;
                            fixed (double* __Stop_Vel6 = &Stop_Vel)
                            {
                                var __arg6 = __Stop_Vel6;
                                var __ret = __Internal.dmc_get_profile_unit_acc(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_s_profile(ushort CardNo, ushort axis, ushort s_mode, double s_para)
        {
            var __ret = __Internal.dmc_set_s_profile(CardNo, axis, s_mode, s_para);
            return __ret;
        }

        public static short dmc_get_s_profile(ushort CardNo, ushort axis, ushort s_mode, ref double s_para)
        {
            fixed (double* __s_para3 = &s_para)
            {
                var __arg3 = __s_para3;
                var __ret = __Internal.dmc_get_s_profile(CardNo, axis, s_mode, __arg3);
                return __ret;
            }
        }

        public static short dmc_pmove(ushort CardNo, ushort axis, int dist, ushort posi_mode)
        {
            var __ret = __Internal.dmc_pmove(CardNo, axis, dist, posi_mode);
            return __ret;
        }

        public static short dmc_pmove_unit(ushort CardNo, ushort axis, double Dist, ushort posi_mode)
        {
            var __ret = __Internal.dmc_pmove_unit(CardNo, axis, Dist, posi_mode);
            return __ret;
        }

        public static short dmc_vmove(ushort CardNo, ushort axis, ushort dir)
        {
            var __ret = __Internal.dmc_vmove(CardNo, axis, dir);
            return __ret;
        }

        public static short dmc_pmove_extern(ushort CardNo, ushort axis, double dist, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double stop_Vel, double s_para, ushort posi_mode)
        {
            var __ret = __Internal.dmc_pmove_extern(CardNo, axis, dist, Min_Vel, Max_Vel, Tacc, Tdec, stop_Vel, s_para, posi_mode);
            return __ret;
        }

        public static short dmc_reset_target_position(ushort CardNo, ushort axis, int dist, ushort posi_mode)
        {
            var __ret = __Internal.dmc_reset_target_position(CardNo, axis, dist, posi_mode);
            return __ret;
        }

        public static short dmc_change_speed(ushort CardNo, ushort axis, double Curr_Vel, double Taccdec)
        {
            var __ret = __Internal.dmc_change_speed(CardNo, axis, Curr_Vel, Taccdec);
            return __ret;
        }

        public static short dmc_update_target_position(ushort CardNo, ushort axis, int dist, ushort posi_mode)
        {
            var __ret = __Internal.dmc_update_target_position(CardNo, axis, dist, posi_mode);
            return __ret;
        }

        public static short dmc_reset_target_position_unit(ushort CardNo, ushort axis, double New_Pos)
        {
            var __ret = __Internal.dmc_reset_target_position_unit(CardNo, axis, New_Pos);
            return __ret;
        }

        public static short dmc_change_speed_unit(ushort CardNo, ushort axis, double New_Vel, double Taccdec)
        {
            var __ret = __Internal.dmc_change_speed_unit(CardNo, axis, New_Vel, Taccdec);
            return __ret;
        }

        public static short dmc_update_target_position_unit(ushort CardNo, ushort axis, double New_Pos)
        {
            var __ret = __Internal.dmc_update_target_position_unit(CardNo, axis, New_Pos);
            return __ret;
        }

        /// <summary>****************************�岹�˶�*********************************</summary>
        public static short dmc_set_vector_profile_multicoor(ushort CardNo, ushort Crd, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Stop_Vel)
        {
            var __ret = __Internal.dmc_set_vector_profile_multicoor(CardNo, Crd, Min_Vel, Max_Vel, Tacc, Tdec, Stop_Vel);
            return __ret;
        }

        public static short dmc_get_vector_profile_multicoor(ushort CardNo, ushort Crd, ref double Min_Vel, ref double Max_Vel, ref double Tacc, ref double Tdec, ref double Stop_Vel)
        {
            fixed (double* __Min_Vel2 = &Min_Vel)
            {
                var __arg2 = __Min_Vel2;
                fixed (double* __Max_Vel3 = &Max_Vel)
                {
                    var __arg3 = __Max_Vel3;
                    fixed (double* __Tacc4 = &Tacc)
                    {
                        var __arg4 = __Tacc4;
                        fixed (double* __Tdec5 = &Tdec)
                        {
                            var __arg5 = __Tdec5;
                            fixed (double* __Stop_Vel6 = &Stop_Vel)
                            {
                                var __arg6 = __Stop_Vel6;
                                var __ret = __Internal.dmc_get_vector_profile_multicoor(CardNo, Crd, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_vector_s_profile_multicoor(ushort CardNo, ushort Crd, ushort s_mode, double s_para)
        {
            var __ret = __Internal.dmc_set_vector_s_profile_multicoor(CardNo, Crd, s_mode, s_para);
            return __ret;
        }

        public static short dmc_get_vector_s_profile_multicoor(ushort CardNo, ushort Crd, ushort s_mode, ref double s_para)
        {
            fixed (double* __s_para3 = &s_para)
            {
                var __arg3 = __s_para3;
                var __ret = __Internal.dmc_get_vector_s_profile_multicoor(CardNo, Crd, s_mode, __arg3);
                return __ret;
            }
        }

        public static short dmc_set_vector_profile_unit(ushort CardNo, ushort Crd, double Min_Vel, double Max_Vel, double Tacc, double Tdec, double Stop_Vel)
        {
            var __ret = __Internal.dmc_set_vector_profile_unit(CardNo, Crd, Min_Vel, Max_Vel, Tacc, Tdec, Stop_Vel);
            return __ret;
        }

        public static short dmc_get_vector_profile_unit(ushort CardNo, ushort Crd, ref double Min_Vel, ref double Max_Vel, ref double Tacc, ref double Tdec, ref double Stop_Vel)
        {
            fixed (double* __Min_Vel2 = &Min_Vel)
            {
                var __arg2 = __Min_Vel2;
                fixed (double* __Max_Vel3 = &Max_Vel)
                {
                    var __arg3 = __Max_Vel3;
                    fixed (double* __Tacc4 = &Tacc)
                    {
                        var __arg4 = __Tacc4;
                        fixed (double* __Tdec5 = &Tdec)
                        {
                            var __arg5 = __Tdec5;
                            fixed (double* __Stop_Vel6 = &Stop_Vel)
                            {
                                var __arg6 = __Stop_Vel6;
                                var __ret = __Internal.dmc_get_vector_profile_unit(CardNo, Crd, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_vector_s_profile(ushort CardNo, ushort Crd, ushort s_mode, double s_para)
        {
            var __ret = __Internal.dmc_set_vector_s_profile(CardNo, Crd, s_mode, s_para);
            return __ret;
        }

        public static short dmc_get_vector_s_profile(ushort CardNo, ushort Crd, ushort s_mode, ref double s_para)
        {
            fixed (double* __s_para3 = &s_para)
            {
                var __arg3 = __s_para3;
                var __ret = __Internal.dmc_get_vector_s_profile(CardNo, Crd, s_mode, __arg3);
                return __ret;
            }
        }

        public static short dmc_line_multicoor(ushort CardNo, ushort Crd, ushort axisNum, ref ushort axisList, ref int DistList, ushort posi_mode)
        {
            fixed (ushort* __axisList3 = &axisList)
            {
                var __arg3 = __axisList3;
                fixed (int* __DistList4 = &DistList)
                {
                    var __arg4 = __DistList4;
                    var __ret = __Internal.dmc_line_multicoor(CardNo, Crd, axisNum, __arg3, __arg4, posi_mode);
                    return __ret;
                }
            }
        }

        public static short dmc_arc_move_multicoor(ushort CardNo, ushort Crd, ref ushort AxisList, ref int Target_Pos, ref int Cen_Pos, ushort Arc_Dir, ushort posi_mode)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                fixed (int* __Target_Pos3 = &Target_Pos)
                {
                    var __arg3 = __Target_Pos3;
                    fixed (int* __Cen_Pos4 = &Cen_Pos)
                    {
                        var __arg4 = __Cen_Pos4;
                        var __ret = __Internal.dmc_arc_move_multicoor(CardNo, Crd, __arg2, __arg3, __arg4, Arc_Dir, posi_mode);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_line_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Dist, ushort posi_mode)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Dist4 = &Dist)
                {
                    var __arg4 = __Dist4;
                    var __ret = __Internal.dmc_line_unit(CardNo, Crd, AxisNum, __arg3, __arg4, posi_mode);
                    return __ret;
                }
            }
        }

        public static short dmc_arc_move_center_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, ref double Cen_Pos, ushort Arc_Dir, int Circle, ushort posi_mode)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    fixed (double* __Cen_Pos5 = &Cen_Pos)
                    {
                        var __arg5 = __Cen_Pos5;
                        var __ret = __Internal.dmc_arc_move_center_unit(CardNo, Crd, AxisNum, __arg3, __arg4, __arg5, Arc_Dir, Circle, posi_mode);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_arc_move_radius_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, double Arc_Radius, ushort Arc_Dir, int Circle, ushort posi_mode)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    var __ret = __Internal.dmc_arc_move_radius_unit(CardNo, Crd, AxisNum, __arg3, __arg4, Arc_Radius, Arc_Dir, Circle, posi_mode);
                    return __ret;
                }
            }
        }

        public static short dmc_arc_move_3points_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, ref double Mid_Pos, int Circle, ushort posi_mode)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    fixed (double* __Mid_Pos5 = &Mid_Pos)
                    {
                        var __arg5 = __Mid_Pos5;
                        var __ret = __Internal.dmc_arc_move_3points_unit(CardNo, Crd, AxisNum, __arg3, __arg4, __arg5, Circle, posi_mode);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_rectangle_move_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, ref double Mark_Pos, int num, ushort rect_mode, ushort posi_mode)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    fixed (double* __Mark_Pos5 = &Mark_Pos)
                    {
                        var __arg5 = __Mark_Pos5;
                        var __ret = __Internal.dmc_rectangle_move_unit(CardNo, Crd, AxisNum, __arg3, __arg4, __arg5, num, rect_mode, posi_mode);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>******************PVT�˶�***************************</summary>
        public static short dmc_PvtTable(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref int pPos, ref double pVel)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (int* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    fixed (double* __pVel5 = &pVel)
                    {
                        var __arg5 = __pVel5;
                        var __ret = __Internal.dmc_PvtTable(CardNo, iaxis, count, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_PtsTable(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref int pPos, ref double pPercent)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (int* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    fixed (double* __pPercent5 = &pPercent)
                    {
                        var __arg5 = __pPercent5;
                        var __ret = __Internal.dmc_PtsTable(CardNo, iaxis, count, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_PvtsTable(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref int pPos, double velBegin, double velEnd)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (int* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    var __ret = __Internal.dmc_PvtsTable(CardNo, iaxis, count, __arg3, __arg4, velBegin, velEnd);
                    return __ret;
                }
            }
        }

        public static short dmc_PttTable(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref int pPos)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (int* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    var __ret = __Internal.dmc_PttTable(CardNo, iaxis, count, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static short dmc_PvtMove(ushort CardNo, ushort AxisNum, ref ushort AxisList)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                var __ret = __Internal.dmc_PvtMove(CardNo, AxisNum, __arg2);
                return __ret;
            }
        }

        public static short dmc_PttTable_add(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref int pPos)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (int* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    var __ret = __Internal.dmc_PttTable_add(CardNo, iaxis, count, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static short dmc_PtsTable_add(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref int pPos, ref double pPercent)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (int* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    fixed (double* __pPercent5 = &pPercent)
                    {
                        var __arg5 = __pPercent5;
                        var __ret = __Internal.dmc_PtsTable_add(CardNo, iaxis, count, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_pvt_get_remain_space(ushort CardNo, ushort iaxis)
        {
            var __ret = __Internal.dmc_pvt_get_remain_space(CardNo, iaxis);
            return __ret;
        }

        /// <summary>
        /// <para>***************************************************************************</para>
        /// <para>PVT�˶� ���߿��&#185;滮</para>
        /// <para>****************************************************************************</para>
        /// </summary>
        public static short dmc_pvt_table_unit(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref double pPos, ref double pVel)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (double* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    fixed (double* __pVel5 = &pVel)
                    {
                        var __arg5 = __pVel5;
                        var __ret = __Internal.dmc_pvt_table_unit(CardNo, iaxis, count, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_pts_table_unit(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref double pPos, ref double pPercent)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (double* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    fixed (double* __pPercent5 = &pPercent)
                    {
                        var __arg5 = __pPercent5;
                        var __ret = __Internal.dmc_pts_table_unit(CardNo, iaxis, count, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_pvts_table_unit(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref double pPos, double velBegin, double velEnd)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (double* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    var __ret = __Internal.dmc_pvts_table_unit(CardNo, iaxis, count, __arg3, __arg4, velBegin, velEnd);
                    return __ret;
                }
            }
        }

        public static short dmc_ptt_table_unit(ushort CardNo, ushort iaxis, uint count, ref double pTime, ref double pPos)
        {
            fixed (double* __pTime3 = &pTime)
            {
                var __arg3 = __pTime3;
                fixed (double* __pPos4 = &pPos)
                {
                    var __arg4 = __pPos4;
                    var __ret = __Internal.dmc_ptt_table_unit(CardNo, iaxis, count, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static short dmc_pvt_move(ushort CardNo, ushort AxisNum, ref ushort AxisList)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                var __ret = __Internal.dmc_pvt_move(CardNo, AxisNum, __arg2);
                return __ret;
            }
        }

        public static short dmc_SetGearProfile(ushort CardNo, ushort axis, ushort MasterType, ushort MasterIndex, int MasterEven, int SlaveEven, uint MasterSlope)
        {
            var __ret = __Internal.dmc_SetGearProfile(CardNo, axis, MasterType, MasterIndex, MasterEven, SlaveEven, MasterSlope);
            return __ret;
        }

        public static short dmc_GetGearProfile(ushort CardNo, ushort axis, ref ushort MasterType, ref ushort MasterIndex, ref int MasterEven, ref int SlaveEven, ref uint MasterSlope)
        {
            fixed (ushort* __MasterType2 = &MasterType)
            {
                var __arg2 = __MasterType2;
                fixed (ushort* __MasterIndex3 = &MasterIndex)
                {
                    var __arg3 = __MasterIndex3;
                    fixed (int* __MasterEven4 = &MasterEven)
                    {
                        var __arg4 = __MasterEven4;
                        fixed (int* __SlaveEven5 = &SlaveEven)
                        {
                            var __arg5 = __SlaveEven5;
                            fixed (uint* __MasterSlope6 = &MasterSlope)
                            {
                                var __arg6 = __MasterSlope6;
                                var __ret = __Internal.dmc_GetGearProfile(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_GearMove(ushort CardNo, ushort AxisNum, ref ushort AxisList)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                var __ret = __Internal.dmc_GearMove(CardNo, AxisNum, __arg2);
                return __ret;
            }
        }

        /// <summary>**********************�����˶�************************</summary>
        public static short dmc_set_home_pin_logic(ushort CardNo, ushort axis, ushort org_logic, double filter)
        {
            var __ret = __Internal.dmc_set_home_pin_logic(CardNo, axis, org_logic, filter);
            return __ret;
        }

        public static short dmc_get_home_pin_logic(ushort CardNo, ushort axis, ref ushort org_logic, ref double filter)
        {
            fixed (ushort* __org_logic2 = &org_logic)
            {
                var __arg2 = __org_logic2;
                fixed (double* __filter3 = &filter)
                {
                    var __arg3 = __filter3;
                    var __ret = __Internal.dmc_get_home_pin_logic(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_set_homemode(ushort CardNo, ushort axis, ushort home_dir, double vel, ushort mode, ushort EZ_count)
        {
            var __ret = __Internal.dmc_set_homemode(CardNo, axis, home_dir, vel, mode, EZ_count);
            return __ret;
        }

        public static short dmc_get_homemode(ushort CardNo, ushort axis, ref ushort home_dir, ref double vel_mode, ref ushort home_mode, ref ushort EZ_count)
        {
            fixed (ushort* __home_dir2 = &home_dir)
            {
                var __arg2 = __home_dir2;
                fixed (double* __vel_mode3 = &vel_mode)
                {
                    var __arg3 = __vel_mode3;
                    fixed (ushort* __home_mode4 = &home_mode)
                    {
                        var __arg4 = __home_mode4;
                        fixed (ushort* __EZ_count5 = &EZ_count)
                        {
                            var __arg5 = __EZ_count5;
                            var __ret = __Internal.dmc_get_homemode(CardNo, axis, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_home_move(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_home_move(CardNo, axis);
            return __ret;
        }

        public static short dmc_set_home_profile_unit(ushort CardNo, ushort axis, double Low_Vel, double High_Vel, double Tacc, double Tdec)
        {
            var __ret = __Internal.dmc_set_home_profile_unit(CardNo, axis, Low_Vel, High_Vel, Tacc, Tdec);
            return __ret;
        }

        public static short dmc_get_home_profile_unit(ushort CardNo, ushort axis, ref double Low_Vel, ref double High_Vel, ref double Tacc, ref double Tdec)
        {
            fixed (double* __Low_Vel2 = &Low_Vel)
            {
                var __arg2 = __Low_Vel2;
                fixed (double* __High_Vel3 = &High_Vel)
                {
                    var __arg3 = __High_Vel3;
                    fixed (double* __Tacc4 = &Tacc)
                    {
                        var __arg4 = __Tacc4;
                        fixed (double* __Tdec5 = &Tdec)
                        {
                            var __arg5 = __Tdec5;
                            var __ret = __Internal.dmc_get_home_profile_unit(CardNo, axis, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_get_home_result(ushort CardNo, ushort axis, ref ushort state)
        {
            fixed (ushort* __state2 = &state)
            {
                var __arg2 = __state2;
                var __ret = __Internal.dmc_get_home_result(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_home_position_unit(ushort CardNo, ushort axis, ushort enable, double position)
        {
            var __ret = __Internal.dmc_set_home_position_unit(CardNo, axis, enable, position);
            return __ret;
        }

        public static short dmc_get_home_position_unit(ushort CardNo, ushort axis, ref ushort enable, ref double position)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (double* __position3 = &position)
                {
                    var __arg3 = __position3;
                    var __ret = __Internal.dmc_get_home_position_unit(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_set_el_home(ushort CardNo, ushort axis, ushort mode)
        {
            var __ret = __Internal.dmc_set_el_home(CardNo, axis, mode);
            return __ret;
        }

        /// <summary>*************************ԭ������*****************************</summary>
        public static short dmc_set_homelatch_mode(ushort CardNo, ushort axis, ushort enable, ushort logic, ushort source)
        {
            var __ret = __Internal.dmc_set_homelatch_mode(CardNo, axis, enable, logic, source);
            return __ret;
        }

        public static short dmc_get_homelatch_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort logic, ref ushort source)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __logic3 = &logic)
                {
                    var __arg3 = __logic3;
                    fixed (ushort* __source4 = &source)
                    {
                        var __arg4 = __source4;
                        var __ret = __Internal.dmc_get_homelatch_mode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static int dmc_get_homelatch_flag(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_homelatch_flag(CardNo, axis);
            return __ret;
        }

        public static short dmc_reset_homelatch_flag(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_reset_homelatch_flag(CardNo, axis);
            return __ret;
        }

        public static int dmc_get_homelatch_value(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_homelatch_value(CardNo, axis);
            return __ret;
        }

        /// <summary>***************************EZ����*******************************</summary>
        public static short dmc_set_ezlatch_mode(ushort CardNo, ushort axis, ushort enable, ushort logic, ushort source)
        {
            var __ret = __Internal.dmc_set_ezlatch_mode(CardNo, axis, enable, logic, source);
            return __ret;
        }

        public static short dmc_get_ezlatch_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort logic, ref ushort source)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __logic3 = &logic)
                {
                    var __arg3 = __logic3;
                    fixed (ushort* __source4 = &source)
                    {
                        var __arg4 = __source4;
                        var __ret = __Internal.dmc_get_ezlatch_mode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static int dmc_get_ezlatch_flag(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_ezlatch_flag(CardNo, axis);
            return __ret;
        }

        public static short dmc_reset_ezlatch_flag(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_reset_ezlatch_flag(CardNo, axis);
            return __ret;
        }

        public static int dmc_get_ezlatch_value(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_ezlatch_value(CardNo, axis);
            return __ret;
        }

        /// <summary>**********************�����˶�����********************************</summary>
        public static short dmc_set_handwheel_inmode(ushort CardNo, ushort axis, ushort inmode, int multi, double vh)
        {
            var __ret = __Internal.dmc_set_handwheel_inmode(CardNo, axis, inmode, multi, vh);
            return __ret;
        }

        public static short dmc_get_handwheel_inmode(ushort CardNo, ushort axis, ref ushort inmode, ref int multi, ref double vh)
        {
            fixed (ushort* __inmode2 = &inmode)
            {
                var __arg2 = __inmode2;
                fixed (int* __multi3 = &multi)
                {
                    var __arg3 = __multi3;
                    fixed (double* __vh4 = &vh)
                    {
                        var __arg4 = __vh4;
                        var __ret = __Internal.dmc_get_handwheel_inmode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_handwheel_inmode_decimals(ushort CardNo, ushort axis, ushort inmode, double multi, double vh)
        {
            var __ret = __Internal.dmc_set_handwheel_inmode_decimals(CardNo, axis, inmode, multi, vh);
            return __ret;
        }

        public static short dmc_get_handwheel_inmode_decimals(ushort CardNo, ushort axis, ref ushort inmode, ref double multi, ref double vh)
        {
            fixed (ushort* __inmode2 = &inmode)
            {
                var __arg2 = __inmode2;
                fixed (double* __multi3 = &multi)
                {
                    var __arg3 = __multi3;
                    fixed (double* __vh4 = &vh)
                    {
                        var __arg4 = __vh4;
                        var __ret = __Internal.dmc_get_handwheel_inmode_decimals(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_handwheel_move(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_handwheel_move(CardNo, axis);
            return __ret;
        }

        public static short dmc_set_handwheel_channel(ushort CardNo, ushort index)
        {
            var __ret = __Internal.dmc_set_handwheel_channel(CardNo, index);
            return __ret;
        }

        public static short dmc_get_handwheel_channel(ushort CardNo, ref ushort index)
        {
            fixed (ushort* __index1 = &index)
            {
                var __arg1 = __index1;
                var __ret = __Internal.dmc_get_handwheel_channel(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_set_handwheel_inmode_extern(ushort CardNo, ushort inmode, ushort AxisNum, ref ushort AxisList, ref int multi)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (int* __multi4 = &multi)
                {
                    var __arg4 = __multi4;
                    var __ret = __Internal.dmc_set_handwheel_inmode_extern(CardNo, inmode, AxisNum, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static short dmc_get_handwheel_inmode_extern(ushort CardNo, ref ushort inmode, ref ushort AxisNum, ref ushort AxisList, ref int multi)
        {
            fixed (ushort* __inmode1 = &inmode)
            {
                var __arg1 = __inmode1;
                fixed (ushort* __AxisNum2 = &AxisNum)
                {
                    var __arg2 = __AxisNum2;
                    fixed (ushort* __AxisList3 = &AxisList)
                    {
                        var __arg3 = __AxisList3;
                        fixed (int* __multi4 = &multi)
                        {
                            var __arg4 = __multi4;
                            var __ret = __Internal.dmc_get_handwheel_inmode_extern(CardNo, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_set_handwheel_inmode_extern_decimals(ushort CardNo, ushort inmode, ushort AxisNum, ref ushort AxisList, ref double multi)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __multi4 = &multi)
                {
                    var __arg4 = __multi4;
                    var __ret = __Internal.dmc_set_handwheel_inmode_extern_decimals(CardNo, inmode, AxisNum, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static short dmc_get_handwheel_inmode_extern_decimals(ushort CardNo, ref ushort inmode, ref ushort AxisNum, ref ushort AxisList, ref double multi)
        {
            fixed (ushort* __inmode1 = &inmode)
            {
                var __arg1 = __inmode1;
                fixed (ushort* __AxisNum2 = &AxisNum)
                {
                    var __arg2 = __AxisNum2;
                    fixed (ushort* __AxisList3 = &AxisList)
                    {
                        var __arg3 = __AxisList3;
                        fixed (double* __multi4 = &multi)
                        {
                            var __arg4 = __multi4;
                            var __ret = __Internal.dmc_get_handwheel_inmode_extern_decimals(CardNo, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// <para>*******************************************************************************************************</para>
        /// <para>�����˶� �������ߵ�����ģʽ  ����</para>
        /// <para>*******************************************************************************************************</para>
        /// </summary>
        public static short dmc_handwheel_set_axislist(ushort CardNo, ushort AxisSelIndex, ushort AxisNum, ref ushort AxisList)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                var __ret = __Internal.dmc_handwheel_set_axislist(CardNo, AxisSelIndex, AxisNum, __arg3);
                return __ret;
            }
        }

        public static short dmc_handwheel_get_axislist(ushort CardNo, ushort AxisSelIndex, ref ushort AxisNum, ref ushort AxisList)
        {
            fixed (ushort* __AxisNum2 = &AxisNum)
            {
                var __arg2 = __AxisNum2;
                fixed (ushort* __AxisList3 = &AxisList)
                {
                    var __arg3 = __AxisList3;
                    var __ret = __Internal.dmc_handwheel_get_axislist(CardNo, AxisSelIndex, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_handwheel_set_ratiolist(ushort CardNo, ushort AxisSelIndex, ushort StartRatioIndex, ushort RatioSelNum, ref double RatioList)
        {
            fixed (double* __RatioList4 = &RatioList)
            {
                var __arg4 = __RatioList4;
                var __ret = __Internal.dmc_handwheel_set_ratiolist(CardNo, AxisSelIndex, StartRatioIndex, RatioSelNum, __arg4);
                return __ret;
            }
        }

        public static short dmc_handwheel_get_ratiolist(ushort CardNo, ushort AxisSelIndex, ushort StartRatioIndex, ushort RatioSelNum, ref double RatioList)
        {
            fixed (double* __RatioList4 = &RatioList)
            {
                var __arg4 = __RatioList4;
                var __ret = __Internal.dmc_handwheel_get_ratiolist(CardNo, AxisSelIndex, StartRatioIndex, RatioSelNum, __arg4);
                return __ret;
            }
        }

        public static short dmc_handwheel_set_mode(ushort CardNo, ushort InMode, ushort IfHardEnable)
        {
            var __ret = __Internal.dmc_handwheel_set_mode(CardNo, InMode, IfHardEnable);
            return __ret;
        }

        public static short dmc_handwheel_get_mode(ushort CardNo, ref ushort InMode, ref ushort IfHardEnable)
        {
            fixed (ushort* __InMode1 = &InMode)
            {
                var __arg1 = __InMode1;
                fixed (ushort* __IfHardEnable2 = &IfHardEnable)
                {
                    var __arg2 = __IfHardEnable2;
                    var __ret = __Internal.dmc_handwheel_get_mode(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short dmc_handwheel_set_index(ushort CardNo, ushort AxisSelIndex, ushort RatioSelIndex)
        {
            var __ret = __Internal.dmc_handwheel_set_index(CardNo, AxisSelIndex, RatioSelIndex);
            return __ret;
        }

        public static short dmc_handwheel_get_index(ushort CardNo, ref ushort AxisSelIndex, ref ushort RatioSelIndex)
        {
            fixed (ushort* __AxisSelIndex1 = &AxisSelIndex)
            {
                var __arg1 = __AxisSelIndex1;
                fixed (ushort* __RatioSelIndex2 = &RatioSelIndex)
                {
                    var __arg2 = __RatioSelIndex2;
                    var __ret = __Internal.dmc_handwheel_get_index(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short dmc_handwheel_stop(ushort CardNo)
        {
            var __ret = __Internal.dmc_handwheel_stop(CardNo);
            return __ret;
        }

        /// <summary>************************�������溯��**************************</summary>
        /// <remarks>
        /// <para>***********************************</para>
        /// <para>LTC1	AXIS0	AXIS1	AXIS2	AXIS3</para>
        /// <para>LTC2	AXIS4	AXIS5	AXIS6	AXIS7</para>
        /// <para>*************************************</para>
        /// </remarks>
        public static short dmc_set_ltc_mode(ushort CardNo, ushort axis, ushort ltc_logic, ushort ltc_mode, double filter)
        {
            var __ret = __Internal.dmc_set_ltc_mode(CardNo, axis, ltc_logic, ltc_mode, filter);
            return __ret;
        }

        public static short dmc_get_ltc_mode(ushort CardNo, ushort axis, ref ushort ltc_logic, ref ushort ltc_mode, ref double filter)
        {
            fixed (ushort* __ltc_logic2 = &ltc_logic)
            {
                var __arg2 = __ltc_logic2;
                fixed (ushort* __ltc_mode3 = &ltc_mode)
                {
                    var __arg3 = __ltc_mode3;
                    fixed (double* __filter4 = &filter)
                    {
                        var __arg4 = __filter4;
                        var __ret = __Internal.dmc_get_ltc_mode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_latch_mode(ushort CardNo, ushort axis, ushort all_enable, ushort latch_source, ushort triger_chunnel)
        {
            var __ret = __Internal.dmc_set_latch_mode(CardNo, axis, all_enable, latch_source, triger_chunnel);
            return __ret;
        }

        public static short dmc_get_latch_mode(ushort CardNo, ushort axis, ref ushort all_enable, ref ushort latch_source, ref ushort triger_chunnel)
        {
            fixed (ushort* __all_enable2 = &all_enable)
            {
                var __arg2 = __all_enable2;
                fixed (ushort* __latch_source3 = &latch_source)
                {
                    var __arg3 = __latch_source3;
                    fixed (ushort* __triger_chunnel4 = &triger_chunnel)
                    {
                        var __arg4 = __triger_chunnel4;
                        var __ret = __Internal.dmc_get_latch_mode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_SetLtcOutMode(ushort CardNo, ushort axis, ushort enable, ushort bitno)
        {
            var __ret = __Internal.dmc_SetLtcOutMode(CardNo, axis, enable, bitno);
            return __ret;
        }

        public static short dmc_GetLtcOutMode(ushort CardNo, ushort axis, ref ushort enable, ref ushort bitno)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __bitno3 = &bitno)
                {
                    var __arg3 = __bitno3;
                    var __ret = __Internal.dmc_GetLtcOutMode(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_get_latch_flag(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_latch_flag(CardNo, axis);
            return __ret;
        }

        public static short dmc_reset_latch_flag(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_reset_latch_flag(CardNo, axis);
            return __ret;
        }

        public static int dmc_get_latch_value(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_latch_value(CardNo, axis);
            return __ret;
        }

        public static short dmc_get_latch_value_unit(ushort CardNo, ushort axis, ref double pos_by_mm)
        {
            fixed (double* __pos_by_mm2 = &pos_by_mm)
            {
                var __arg2 = __pos_by_mm2;
                var __ret = __Internal.dmc_get_latch_value_unit(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_get_latch_flag_extern(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_latch_flag_extern(CardNo, axis);
            return __ret;
        }

        public static int dmc_get_latch_value_extern(ushort CardNo, ushort axis, ushort index)
        {
            var __ret = __Internal.dmc_get_latch_value_extern(CardNo, axis, index);
            return __ret;
        }

        public static short dmc_set_latch_stop_time(ushort CardNo, ushort axis, int time)
        {
            var __ret = __Internal.dmc_set_latch_stop_time(CardNo, axis, time);
            return __ret;
        }

        public static short dmc_get_latch_stop_time(ushort CardNo, ushort axis, ref int time)
        {
            fixed (int* __time2 = &time)
            {
                var __arg2 = __time2;
                var __ret = __Internal.dmc_get_latch_stop_time(CardNo, axis, __arg2);
                return __ret;
            }
        }

        /// <summary>
        /// <para>*******************************************************************************************************</para>
        /// <para>�������� �&#185;滮20170308 ����</para>
        /// <para>*******************************************************************************************************</para>
        /// </summary>
        public static short dmc_ltc_set_mode(ushort CardNo, ushort latch, ushort ltc_mode, ushort ltc_logic, double filter)
        {
            var __ret = __Internal.dmc_ltc_set_mode(CardNo, latch, ltc_mode, ltc_logic, filter);
            return __ret;
        }

        public static short dmc_ltc_get_mode(ushort CardNo, ushort latch, ref ushort ltc_mode, ref ushort ltc_logic, ref double filter)
        {
            fixed (ushort* __ltc_mode2 = &ltc_mode)
            {
                var __arg2 = __ltc_mode2;
                fixed (ushort* __ltc_logic3 = &ltc_logic)
                {
                    var __arg3 = __ltc_logic3;
                    fixed (double* __filter4 = &filter)
                    {
                        var __arg4 = __filter4;
                        var __ret = __Internal.dmc_ltc_get_mode(CardNo, latch, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_ltc_set_source(ushort CardNo, ushort latch, ushort axis, ushort ltc_source)
        {
            var __ret = __Internal.dmc_ltc_set_source(CardNo, latch, axis, ltc_source);
            return __ret;
        }

        public static short dmc_ltc_get_source(ushort CardNo, ushort latch, ushort axis, ref ushort ltc_source)
        {
            fixed (ushort* __ltc_source3 = &ltc_source)
            {
                var __arg3 = __ltc_source3;
                var __ret = __Internal.dmc_ltc_get_source(CardNo, latch, axis, __arg3);
                return __ret;
            }
        }

        public static short dmc_ltc_reset(ushort CardNo, ushort latch)
        {
            var __ret = __Internal.dmc_ltc_reset(CardNo, latch);
            return __ret;
        }

        public static short dmc_ltc_get_number(ushort CardNo, ushort latch, ushort axis, ref int number)
        {
            fixed (int* __number3 = &number)
            {
                var __arg3 = __number3;
                var __ret = __Internal.dmc_ltc_get_number(CardNo, latch, axis, __arg3);
                return __ret;
            }
        }

        public static short dmc_ltc_get_value_unit(ushort CardNo, ushort latch, ushort axis, ref double value)
        {
            fixed (double* __value3 = &value)
            {
                var __arg3 = __value3;
                var __ret = __Internal.dmc_ltc_get_value_unit(CardNo, latch, axis, __arg3);
                return __ret;
            }
        }

        /// <summary>***************************λ�&#241;ȽϺ���***************************</summary>
        public static short dmc_compare_set_config(ushort CardNo, ushort axis, ushort enable, ushort cmp_source)
        {
            var __ret = __Internal.dmc_compare_set_config(CardNo, axis, enable, cmp_source);
            return __ret;
        }

        public static short dmc_compare_get_config(ushort CardNo, ushort axis, ref ushort enable, ref ushort cmp_source)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __cmp_source3 = &cmp_source)
                {
                    var __arg3 = __cmp_source3;
                    var __ret = __Internal.dmc_compare_get_config(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_compare_clear_points(ushort CardNo, ushort cmp)
        {
            var __ret = __Internal.dmc_compare_clear_points(CardNo, cmp);
            return __ret;
        }

        public static short dmc_compare_add_point(ushort CardNo, ushort cmp, int pos, ushort dir, ushort action, uint actpara)
        {
            var __ret = __Internal.dmc_compare_add_point(CardNo, cmp, pos, dir, action, actpara);
            return __ret;
        }

        public static short dmc_compare_get_current_point(ushort CardNo, ushort cmp, ref int pos)
        {
            fixed (int* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                var __ret = __Internal.dmc_compare_get_current_point(CardNo, cmp, __arg2);
                return __ret;
            }
        }

        public static short dmc_compare_get_points_runned(ushort CardNo, ushort cmp, ref int pointNum)
        {
            fixed (int* __pointNum2 = &pointNum)
            {
                var __arg2 = __pointNum2;
                var __ret = __Internal.dmc_compare_get_points_runned(CardNo, cmp, __arg2);
                return __ret;
            }
        }

        public static short dmc_compare_get_points_remained(ushort CardNo, ushort cmp, ref int pointNum)
        {
            fixed (int* __pointNum2 = &pointNum)
            {
                var __arg2 = __pointNum2;
                var __ret = __Internal.dmc_compare_get_points_remained(CardNo, cmp, __arg2);
                return __ret;
            }
        }

        public static short dmc_compare_set_config_extern(ushort CardNo, ushort enable, ushort cmp_source)
        {
            var __ret = __Internal.dmc_compare_set_config_extern(CardNo, enable, cmp_source);
            return __ret;
        }

        public static short dmc_compare_get_config_extern(ushort CardNo, ref ushort enable, ref ushort cmp_source)
        {
            fixed (ushort* __enable1 = &enable)
            {
                var __arg1 = __enable1;
                fixed (ushort* __cmp_source2 = &cmp_source)
                {
                    var __arg2 = __cmp_source2;
                    var __ret = __Internal.dmc_compare_get_config_extern(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short dmc_compare_clear_points_extern(ushort CardNo)
        {
            var __ret = __Internal.dmc_compare_clear_points_extern(CardNo);
            return __ret;
        }

        public static short dmc_compare_add_point_extern(ushort CardNo, ref ushort axis, ref int pos, ref ushort dir, ushort action, uint actpara)
        {
            fixed (ushort* __axis1 = &axis)
            {
                var __arg1 = __axis1;
                fixed (int* __pos2 = &pos)
                {
                    var __arg2 = __pos2;
                    fixed (ushort* __dir3 = &dir)
                    {
                        var __arg3 = __dir3;
                        var __ret = __Internal.dmc_compare_add_point_extern(CardNo, __arg1, __arg2, __arg3, action, actpara);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_compare_get_current_point_extern(ushort CardNo, ref int pos)
        {
            fixed (int* __pos1 = &pos)
            {
                var __arg1 = __pos1;
                var __ret = __Internal.dmc_compare_get_current_point_extern(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_compare_add_point_extern_unit(ushort CardNo, ref ushort axis, ref double pos, ref ushort dir, ushort action, uint actpara)
        {
            fixed (ushort* __axis1 = &axis)
            {
                var __arg1 = __axis1;
                fixed (double* __pos2 = &pos)
                {
                    var __arg2 = __pos2;
                    fixed (ushort* __dir3 = &dir)
                    {
                        var __arg3 = __dir3;
                        var __ret = __Internal.dmc_compare_add_point_extern_unit(CardNo, __arg1, __arg2, __arg3, action, actpara);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_compare_get_current_point_extern_unit(ushort CardNo, ref double pos)
        {
            fixed (double* __pos1 = &pos)
            {
                var __arg1 = __pos1;
                var __ret = __Internal.dmc_compare_get_current_point_extern_unit(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_compare_get_points_runned_extern(ushort CardNo, ref int pointNum)
        {
            fixed (int* __pointNum1 = &pointNum)
            {
                var __arg1 = __pointNum1;
                var __ret = __Internal.dmc_compare_get_points_runned_extern(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_compare_get_points_remained_extern(ushort CardNo, ref int pointNum)
        {
            fixed (int* __pointNum1 = &pointNum)
            {
                var __arg1 = __pointNum1;
                var __ret = __Internal.dmc_compare_get_points_remained_extern(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_compare_set_config_multi(ushort CardNo, ushort queue, ushort enable, ushort axis, ushort cmp_source)
        {
            var __ret = __Internal.dmc_compare_set_config_multi(CardNo, queue, enable, axis, cmp_source);
            return __ret;
        }

        public static short dmc_compare_get_config_multi(ushort CardNo, ushort queue, ref ushort enable, ref ushort axis, ref ushort cmp_source)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __axis3 = &axis)
                {
                    var __arg3 = __axis3;
                    fixed (ushort* __cmp_source4 = &cmp_source)
                    {
                        var __arg4 = __cmp_source4;
                        var __ret = __Internal.dmc_compare_get_config_multi(CardNo, queue, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_compare_add_point_multi(ushort CardNo, ushort cmp, int pos, ushort dir, ushort action, uint actpara, double times)
        {
            var __ret = __Internal.dmc_compare_add_point_multi(CardNo, cmp, pos, dir, action, actpara, times);
            return __ret;
        }

        public static short dmc_hcmp_set_mode(ushort CardNo, ushort hcmp, ushort cmp_mode)
        {
            var __ret = __Internal.dmc_hcmp_set_mode(CardNo, hcmp, cmp_mode);
            return __ret;
        }

        public static short dmc_hcmp_get_mode(ushort CardNo, ushort hcmp, ref ushort cmp_mode)
        {
            fixed (ushort* __cmp_mode2 = &cmp_mode)
            {
                var __arg2 = __cmp_mode2;
                var __ret = __Internal.dmc_hcmp_get_mode(CardNo, hcmp, __arg2);
                return __ret;
            }
        }

        public static short dmc_hcmp_set_config_extern(ushort CardNo, ushort hcmp, ushort axis, ushort cmp_source, ushort cmp_logic, ushort cmp_mode, int dist, int time)
        {
            var __ret = __Internal.dmc_hcmp_set_config_extern(CardNo, hcmp, axis, cmp_source, cmp_logic, cmp_mode, dist, time);
            return __ret;
        }

        public static short dmc_hcmp_get_config_extern(ushort CardNo, ushort hcmp, ref ushort axis, ref ushort cmp_source, ref ushort cmp_logic, ref ushort cmp_mode, ref int dist, ref int time)
        {
            fixed (ushort* __axis2 = &axis)
            {
                var __arg2 = __axis2;
                fixed (ushort* __cmp_source3 = &cmp_source)
                {
                    var __arg3 = __cmp_source3;
                    fixed (ushort* __cmp_logic4 = &cmp_logic)
                    {
                        var __arg4 = __cmp_logic4;
                        fixed (ushort* __cmp_mode5 = &cmp_mode)
                        {
                            var __arg5 = __cmp_mode5;
                            fixed (int* __dist6 = &dist)
                            {
                                var __arg6 = __dist6;
                                fixed (int* __time7 = &time)
                                {
                                    var __arg7 = __time7;
                                    var __ret = __Internal.dmc_hcmp_get_config_extern(CardNo, hcmp, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    return __ret;
                                }
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_hcmp_set_config(ushort CardNo, ushort hcmp, ushort axis, ushort cmp_source, ushort cmp_logic, int time)
        {
            var __ret = __Internal.dmc_hcmp_set_config(CardNo, hcmp, axis, cmp_source, cmp_logic, time);
            return __ret;
        }

        public static short dmc_hcmp_get_config(ushort CardNo, ushort hcmp, ref ushort axis, ref ushort cmp_source, ref ushort cmp_logic, ref int time)
        {
            fixed (ushort* __axis2 = &axis)
            {
                var __arg2 = __axis2;
                fixed (ushort* __cmp_source3 = &cmp_source)
                {
                    var __arg3 = __cmp_source3;
                    fixed (ushort* __cmp_logic4 = &cmp_logic)
                    {
                        var __arg4 = __cmp_logic4;
                        fixed (int* __time5 = &time)
                        {
                            var __arg5 = __time5;
                            var __ret = __Internal.dmc_hcmp_get_config(CardNo, hcmp, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_hcmp_add_point(ushort CardNo, ushort hcmp, int cmp_pos)
        {
            var __ret = __Internal.dmc_hcmp_add_point(CardNo, hcmp, cmp_pos);
            return __ret;
        }

        public static short dmc_hcmp_set_liner(ushort CardNo, ushort hcmp, int Increment, int Count)
        {
            var __ret = __Internal.dmc_hcmp_set_liner(CardNo, hcmp, Increment, Count);
            return __ret;
        }

        public static short dmc_hcmp_get_liner(ushort CardNo, ushort hcmp, ref int Increment, ref int Count)
        {
            fixed (int* __Increment2 = &Increment)
            {
                var __arg2 = __Increment2;
                fixed (int* __Count3 = &Count)
                {
                    var __arg3 = __Count3;
                    var __ret = __Internal.dmc_hcmp_get_liner(CardNo, hcmp, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_hcmp_get_current_state(ushort CardNo, ushort hcmp, ref int remained_points, ref int current_point, ref int runned_points)
        {
            fixed (int* __remained_points2 = &remained_points)
            {
                var __arg2 = __remained_points2;
                fixed (int* __current_point3 = &current_point)
                {
                    var __arg3 = __current_point3;
                    fixed (int* __runned_points4 = &runned_points)
                    {
                        var __arg4 = __runned_points4;
                        var __ret = __Internal.dmc_hcmp_get_current_state(CardNo, hcmp, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_hcmp_clear_points(ushort CardNo, ushort hcmp)
        {
            var __ret = __Internal.dmc_hcmp_clear_points(CardNo, hcmp);
            return __ret;
        }

        public static short dmc_read_cmp_pin(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_read_cmp_pin(CardNo, axis);
            return __ret;
        }

        public static short dmc_write_cmp_pin(ushort CardNo, ushort axis, ushort on_off)
        {
            var __ret = __Internal.dmc_write_cmp_pin(CardNo, axis, on_off);
            return __ret;
        }

        public static short dmc_hcmp_2d_set_enable(ushort CardNo, ushort hcmp, ushort cmp_enable)
        {
            var __ret = __Internal.dmc_hcmp_2d_set_enable(CardNo, hcmp, cmp_enable);
            return __ret;
        }

        public static short dmc_hcmp_2d_get_enable(ushort CardNo, ushort hcmp, ref ushort cmp_enable)
        {
            fixed (ushort* __cmp_enable2 = &cmp_enable)
            {
                var __arg2 = __cmp_enable2;
                var __ret = __Internal.dmc_hcmp_2d_get_enable(CardNo, hcmp, __arg2);
                return __ret;
            }
        }

        public static short dmc_hcmp_2d_set_config(ushort CardNo, ushort hcmp, ushort cmp_mode, ushort x_axis, ushort x_cmp_source, ushort y_axis, ushort y_cmp_source, int error, ushort cmp_logic, int time, ushort pwm_enable, double duty, int freq, ushort port_sel, ushort pwm_number)
        {
            var __ret = __Internal.dmc_hcmp_2d_set_config(CardNo, hcmp, cmp_mode, x_axis, x_cmp_source, y_axis, y_cmp_source, error, cmp_logic, time, pwm_enable, duty, freq, port_sel, pwm_number);
            return __ret;
        }

        public static short dmc_hcmp_2d_get_config(ushort CardNo, ushort hcmp, ref ushort cmp_mode, ref ushort x_axis, ref ushort x_cmp_source, ref ushort y_axis, ref ushort y_cmp_source, ref int error, ref ushort cmp_logic, ref int time, ref ushort pwm_enable, ref double duty, ref int freq, ref ushort port_sel, ref ushort pwm_number)
        {
            fixed (ushort* __cmp_mode2 = &cmp_mode)
            {
                var __arg2 = __cmp_mode2;
                fixed (ushort* __x_axis3 = &x_axis)
                {
                    var __arg3 = __x_axis3;
                    fixed (ushort* __x_cmp_source4 = &x_cmp_source)
                    {
                        var __arg4 = __x_cmp_source4;
                        fixed (ushort* __y_axis5 = &y_axis)
                        {
                            var __arg5 = __y_axis5;
                            fixed (ushort* __y_cmp_source6 = &y_cmp_source)
                            {
                                var __arg6 = __y_cmp_source6;
                                fixed (int* __error7 = &error)
                                {
                                    var __arg7 = __error7;
                                    fixed (ushort* __cmp_logic8 = &cmp_logic)
                                    {
                                        var __arg8 = __cmp_logic8;
                                        fixed (int* __time9 = &time)
                                        {
                                            var __arg9 = __time9;
                                            fixed (ushort* __pwm_enable10 = &pwm_enable)
                                            {
                                                var __arg10 = __pwm_enable10;
                                                fixed (double* __duty11 = &duty)
                                                {
                                                    var __arg11 = __duty11;
                                                    fixed (int* __freq12 = &freq)
                                                    {
                                                        var __arg12 = __freq12;
                                                        fixed (ushort* __port_sel13 = &port_sel)
                                                        {
                                                            var __arg13 = __port_sel13;
                                                            fixed (ushort* __pwm_number14 = &pwm_number)
                                                            {
                                                                var __arg14 = __pwm_number14;
                                                                var __ret = __Internal.dmc_hcmp_2d_get_config(CardNo, hcmp, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                                return __ret;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_hcmp_2d_add_point(ushort CardNo, ushort hcmp, int x_cmp_pos, int y_cmp_pos)
        {
            var __ret = __Internal.dmc_hcmp_2d_add_point(CardNo, hcmp, x_cmp_pos, y_cmp_pos);
            return __ret;
        }

        public static short dmc_hcmp_2d_get_current_state(ushort CardNo, ushort hcmp, ref int remained_points, ref int x_current_point, ref int y_current_point, ref int runned_points, ref ushort current_state)
        {
            fixed (int* __remained_points2 = &remained_points)
            {
                var __arg2 = __remained_points2;
                fixed (int* __x_current_point3 = &x_current_point)
                {
                    var __arg3 = __x_current_point3;
                    fixed (int* __y_current_point4 = &y_current_point)
                    {
                        var __arg4 = __y_current_point4;
                        fixed (int* __runned_points5 = &runned_points)
                        {
                            var __arg5 = __runned_points5;
                            fixed (ushort* __current_state6 = &current_state)
                            {
                                var __arg6 = __current_state6;
                                var __ret = __Internal.dmc_hcmp_2d_get_current_state(CardNo, hcmp, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_hcmp_2d_clear_points(ushort CardNo, ushort hcmp)
        {
            var __ret = __Internal.dmc_hcmp_2d_clear_points(CardNo, hcmp);
            return __ret;
        }

        public static short dmc_hcmp_2d_force_output(ushort CardNo, ushort hcmp, ushort enable)
        {
            var __ret = __Internal.dmc_hcmp_2d_force_output(CardNo, hcmp, enable);
            return __ret;
        }

        /// <summary>******************ͨ��IO����*************************</summary>
        public static short dmc_read_inbit(ushort CardNo, ushort bitno)
        {
            var __ret = __Internal.dmc_read_inbit(CardNo, bitno);
            return __ret;
        }

        public static short dmc_write_outbit(ushort CardNo, ushort bitno, ushort on_off)
        {
            var __ret = __Internal.dmc_write_outbit(CardNo, bitno, on_off);
            return __ret;
        }

        public static short dmc_read_outbit(ushort CardNo, ushort bitno)
        {
            var __ret = __Internal.dmc_read_outbit(CardNo, bitno);
            return __ret;
        }

        public static uint dmc_read_inport(ushort CardNo, ushort portno)
        {
            var __ret = __Internal.dmc_read_inport(CardNo, portno);
            return __ret;
        }

        public static uint dmc_read_outport(ushort CardNo, ushort portno)
        {
            var __ret = __Internal.dmc_read_outport(CardNo, portno);
            return __ret;
        }

        public static short dmc_write_outport(ushort CardNo, ushort portno, uint outport_val)
        {
            var __ret = __Internal.dmc_write_outport(CardNo, portno, outport_val);
            return __ret;
        }

        public static short dmc_write_outport_16X(ushort CardNo, ushort portno, uint outport_val)
        {
            var __ret = __Internal.dmc_write_outport_16X(CardNo, portno, outport_val);
            return __ret;
        }

        public static short dmc_set_io_map_virtual(ushort CardNo, ushort bitno, ushort MapIoType, ushort MapIoIndex, double Filter)
        {
            var __ret = __Internal.dmc_set_io_map_virtual(CardNo, bitno, MapIoType, MapIoIndex, Filter);
            return __ret;
        }

        public static short dmc_get_io_map_virtual(ushort CardNo, ushort bitno, ref ushort MapIoType, ref ushort MapIoIndex, ref double Filter)
        {
            fixed (ushort* __MapIoType2 = &MapIoType)
            {
                var __arg2 = __MapIoType2;
                fixed (ushort* __MapIoIndex3 = &MapIoIndex)
                {
                    var __arg3 = __MapIoIndex3;
                    fixed (double* __Filter4 = &Filter)
                    {
                        var __arg4 = __Filter4;
                        var __ret = __Internal.dmc_get_io_map_virtual(CardNo, bitno, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_read_inbit_virtual(ushort CardNo, ushort bitno)
        {
            var __ret = __Internal.dmc_read_inbit_virtual(CardNo, bitno);
            return __ret;
        }

        public static short dmc_reverse_outbit(ushort CardNo, ushort bitno, double reverse_time)
        {
            var __ret = __Internal.dmc_reverse_outbit(CardNo, bitno, reverse_time);
            return __ret;
        }

        public static short dmc_set_io_count_mode(ushort CardNo, ushort bitno, ushort mode, double filter)
        {
            var __ret = __Internal.dmc_set_io_count_mode(CardNo, bitno, mode, filter);
            return __ret;
        }

        public static short dmc_get_io_count_mode(ushort CardNo, ushort bitno, ref ushort mode, ref double filter)
        {
            fixed (ushort* __mode2 = &mode)
            {
                var __arg2 = __mode2;
                fixed (double* __filter3 = &filter)
                {
                    var __arg3 = __filter3;
                    var __ret = __Internal.dmc_get_io_count_mode(CardNo, bitno, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_set_io_count_value(ushort CardNo, ushort bitno, uint CountValue)
        {
            var __ret = __Internal.dmc_set_io_count_value(CardNo, bitno, CountValue);
            return __ret;
        }

        public static short dmc_get_io_count_value(ushort CardNo, ushort bitno, ref uint CountValue)
        {
            fixed (uint* __CountValue2 = &CountValue)
            {
                var __arg2 = __CountValue2;
                var __ret = __Internal.dmc_get_io_count_value(CardNo, bitno, __arg2);
                return __ret;
            }
        }

        /// <summary>*******************ר��IO�ź�***********************</summary>
        public static short dmc_set_axis_io_map(ushort CardNo, ushort Axis, ushort IoType, ushort MapIoType, ushort MapIoIndex, double Filter)
        {
            var __ret = __Internal.dmc_set_axis_io_map(CardNo, Axis, IoType, MapIoType, MapIoIndex, Filter);
            return __ret;
        }

        public static short dmc_get_axis_io_map(ushort CardNo, ushort Axis, ushort IoType, ref ushort MapIoType, ref ushort MapIoIndex, ref double Filter)
        {
            fixed (ushort* __MapIoType3 = &MapIoType)
            {
                var __arg3 = __MapIoType3;
                fixed (ushort* __MapIoIndex4 = &MapIoIndex)
                {
                    var __arg4 = __MapIoIndex4;
                    fixed (double* __Filter5 = &Filter)
                    {
                        var __arg5 = __Filter5;
                        var __ret = __Internal.dmc_get_axis_io_map(CardNo, Axis, IoType, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_special_input_filter(ushort CardNo, double Filter)
        {
            var __ret = __Internal.dmc_set_special_input_filter(CardNo, Filter);
            return __ret;
        }

        public static short dmc_set_sd_mode(ushort CardNo, ushort axis, ushort enable, ushort sd_logic, ushort sd_mode)
        {
            var __ret = __Internal.dmc_set_sd_mode(CardNo, axis, enable, sd_logic, sd_mode);
            return __ret;
        }

        public static short dmc_get_sd_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort sd_logic, ref ushort sd_mode)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __sd_logic3 = &sd_logic)
                {
                    var __arg3 = __sd_logic3;
                    fixed (ushort* __sd_mode4 = &sd_mode)
                    {
                        var __arg4 = __sd_mode4;
                        var __ret = __Internal.dmc_get_sd_mode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_inp_mode(ushort CardNo, ushort axis, ushort enable, ushort inp_logic)
        {
            var __ret = __Internal.dmc_set_inp_mode(CardNo, axis, enable, inp_logic);
            return __ret;
        }

        public static short dmc_get_inp_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort inp_logic)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __inp_logic3 = &inp_logic)
                {
                    var __arg3 = __inp_logic3;
                    var __ret = __Internal.dmc_get_inp_mode(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_set_rdy_mode(ushort CardNo, ushort axis, ushort enable, ushort rdy_logic)
        {
            var __ret = __Internal.dmc_set_rdy_mode(CardNo, axis, enable, rdy_logic);
            return __ret;
        }

        public static short dmc_get_rdy_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort rdy_logic)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __rdy_logic3 = &rdy_logic)
                {
                    var __arg3 = __rdy_logic3;
                    var __ret = __Internal.dmc_get_rdy_mode(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_set_erc_mode(ushort CardNo, ushort axis, ushort enable, ushort erc_logic, ushort erc_width, ushort erc_off_time)
        {
            var __ret = __Internal.dmc_set_erc_mode(CardNo, axis, enable, erc_logic, erc_width, erc_off_time);
            return __ret;
        }

        public static short dmc_get_erc_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort erc_logic, ref ushort erc_width, ref ushort erc_off_time)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __erc_logic3 = &erc_logic)
                {
                    var __arg3 = __erc_logic3;
                    fixed (ushort* __erc_width4 = &erc_width)
                    {
                        var __arg4 = __erc_width4;
                        fixed (ushort* __erc_off_time5 = &erc_off_time)
                        {
                            var __arg5 = __erc_off_time5;
                            var __ret = __Internal.dmc_get_erc_mode(CardNo, axis, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_set_alm_mode(ushort CardNo, ushort axis, ushort enable, ushort alm_logic, ushort alm_action)
        {
            var __ret = __Internal.dmc_set_alm_mode(CardNo, axis, enable, alm_logic, alm_action);
            return __ret;
        }

        public static short dmc_get_alm_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort alm_logic, ref ushort alm_action)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __alm_logic3 = &alm_logic)
                {
                    var __arg3 = __alm_logic3;
                    fixed (ushort* __alm_action4 = &alm_action)
                    {
                        var __arg4 = __alm_action4;
                        var __ret = __Internal.dmc_get_alm_mode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_ez_mode(ushort CardNo, ushort axis, ushort ez_logic, ushort ez_mode, double filter)
        {
            var __ret = __Internal.dmc_set_ez_mode(CardNo, axis, ez_logic, ez_mode, filter);
            return __ret;
        }

        public static short dmc_get_ez_mode(ushort CardNo, ushort axis, ref ushort ez_logic, ref ushort ez_mode, ref double filter)
        {
            fixed (ushort* __ez_logic2 = &ez_logic)
            {
                var __arg2 = __ez_logic2;
                fixed (ushort* __ez_mode3 = &ez_mode)
                {
                    var __arg3 = __ez_mode3;
                    fixed (double* __filter4 = &filter)
                    {
                        var __arg4 = __filter4;
                        var __ret = __Internal.dmc_get_ez_mode(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_write_sevon_pin(ushort CardNo, ushort axis, ushort on_off)
        {
            var __ret = __Internal.dmc_write_sevon_pin(CardNo, axis, on_off);
            return __ret;
        }

        public static short dmc_read_sevon_pin(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_read_sevon_pin(CardNo, axis);
            return __ret;
        }

        public static short dmc_read_rdy_pin(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_read_rdy_pin(CardNo, axis);
            return __ret;
        }

        public static short dmc_write_erc_pin(ushort CardNo, ushort axis, ushort on_off)
        {
            var __ret = __Internal.dmc_write_erc_pin(CardNo, axis, on_off);
            return __ret;
        }

        public static short dmc_read_erc_pin(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_read_erc_pin(CardNo, axis);
            return __ret;
        }

        public static short dmc_write_sevrst_pin(ushort CardNo, ushort axis, ushort on_off)
        {
            var __ret = __Internal.dmc_write_sevrst_pin(CardNo, axis, on_off);
            return __ret;
        }

        public static short dmc_read_sevrst_pin(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_read_sevrst_pin(CardNo, axis);
            return __ret;
        }

        public static short dmc_set_io_dstp_mode(ushort CardNo, ushort axis, ushort enable, ushort logic)
        {
            var __ret = __Internal.dmc_set_io_dstp_mode(CardNo, axis, enable, logic);
            return __ret;
        }

        public static short dmc_get_io_dstp_mode(ushort CardNo, ushort axis, ref ushort enable, ref ushort logic)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __logic3 = &logic)
                {
                    var __arg3 = __logic3;
                    var __ret = __Internal.dmc_get_io_dstp_mode(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_set_dec_stop_time(ushort CardNo, ushort axis, double time)
        {
            var __ret = __Internal.dmc_set_dec_stop_time(CardNo, axis, time);
            return __ret;
        }

        public static short dmc_get_dec_stop_time(ushort CardNo, ushort axis, ref double time)
        {
            fixed (double* __time2 = &time)
            {
                var __arg2 = __time2;
                var __ret = __Internal.dmc_get_dec_stop_time(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_vector_dec_stop_time(ushort CardNo, ushort Crd, double time)
        {
            var __ret = __Internal.dmc_set_vector_dec_stop_time(CardNo, Crd, time);
            return __ret;
        }

        public static short dmc_get_vector_dec_stop_time(ushort CardNo, ushort Crd, ref double time)
        {
            fixed (double* __time2 = &time)
            {
                var __arg2 = __time2;
                var __ret = __Internal.dmc_get_vector_dec_stop_time(CardNo, Crd, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_dec_stop_dist(ushort CardNo, ushort axis, int dist)
        {
            var __ret = __Internal.dmc_set_dec_stop_dist(CardNo, axis, dist);
            return __ret;
        }

        public static short dmc_get_dec_stop_dist(ushort CardNo, ushort axis, ref int dist)
        {
            fixed (int* __dist2 = &dist)
            {
                var __arg2 = __dist2;
                var __ret = __Internal.dmc_get_dec_stop_dist(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_io_dstp_bitno(ushort CardNo, ushort axis, ushort bitno, double filter)
        {
            var __ret = __Internal.dmc_set_io_dstp_bitno(CardNo, axis, bitno, filter);
            return __ret;
        }

        public static short dmc_get_io_dstp_bitno(ushort CardNo, ushort axis, ref ushort bitno, ref double filter)
        {
            fixed (ushort* __bitno2 = &bitno)
            {
                var __arg2 = __bitno2;
                fixed (double* __filter3 = &filter)
                {
                    var __arg3 = __filter3;
                    var __ret = __Internal.dmc_get_io_dstp_bitno(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        /// <summary>**********************����������*********************</summary>
        public static short dmc_set_counter_inmode(ushort CardNo, ushort axis, ushort mode)
        {
            var __ret = __Internal.dmc_set_counter_inmode(CardNo, axis, mode);
            return __ret;
        }

        public static short dmc_get_counter_inmode(ushort CardNo, ushort axis, ref ushort mode)
        {
            fixed (ushort* __mode2 = &mode)
            {
                var __arg2 = __mode2;
                var __ret = __Internal.dmc_get_counter_inmode(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static int dmc_get_encoder(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_encoder(CardNo, axis);
            return __ret;
        }

        public static short dmc_set_encoder(ushort CardNo, ushort axis, int encoder_value)
        {
            var __ret = __Internal.dmc_set_encoder(CardNo, axis, encoder_value);
            return __ret;
        }

        public static short dmc_set_encoder_unit(ushort CardNo, ushort axis, double pos)
        {
            var __ret = __Internal.dmc_set_encoder_unit(CardNo, axis, pos);
            return __ret;
        }

        public static short dmc_get_encoder_unit(ushort CardNo, ushort axis, ref double pos)
        {
            fixed (double* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                var __ret = __Internal.dmc_get_encoder_unit(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_handwheel_encoder(ushort CardNo, ushort channel, int pos)
        {
            var __ret = __Internal.dmc_set_handwheel_encoder(CardNo, channel, pos);
            return __ret;
        }

        public static short dmc_get_handwheel_encoder(ushort CardNo, ushort channel, ref int pos)
        {
            fixed (int* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                var __ret = __Internal.dmc_get_handwheel_encoder(CardNo, channel, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_extra_encoder_mode(ushort CardNo, ushort channel, ushort inmode, ushort multi)
        {
            var __ret = __Internal.dmc_set_extra_encoder_mode(CardNo, channel, inmode, multi);
            return __ret;
        }

        public static short dmc_get_extra_encoder_mode(ushort CardNo, ushort channel, ref ushort inmode, ref ushort multi)
        {
            fixed (ushort* __inmode2 = &inmode)
            {
                var __arg2 = __inmode2;
                fixed (ushort* __multi3 = &multi)
                {
                    var __arg3 = __multi3;
                    var __ret = __Internal.dmc_get_extra_encoder_mode(CardNo, channel, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_set_extra_encoder(ushort CardNo, ushort channel, int pos)
        {
            var __ret = __Internal.dmc_set_extra_encoder(CardNo, channel, pos);
            return __ret;
        }

        public static short dmc_get_extra_encoder(ushort CardNo, ushort channel, ref int pos)
        {
            fixed (int* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                var __ret = __Internal.dmc_get_extra_encoder(CardNo, channel, __arg2);
                return __ret;
            }
        }

        /// <summary>*******************λ�&#252;�������**************************</summary>
        public static short dmc_set_position(ushort CardNo, ushort axis, int current_position)
        {
            var __ret = __Internal.dmc_set_position(CardNo, axis, current_position);
            return __ret;
        }

        public static int dmc_get_position(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_position(CardNo, axis);
            return __ret;
        }

        public static short dmc_set_position_unit(ushort CardNo, ushort axis, double pos)
        {
            var __ret = __Internal.dmc_set_position_unit(CardNo, axis, pos);
            return __ret;
        }

        public static short dmc_get_position_unit(ushort CardNo, ushort axis, ref double pos)
        {
            fixed (double* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                var __ret = __Internal.dmc_get_position_unit(CardNo, axis, __arg2);
                return __ret;
            }
        }

        /// <summary>************************�˶�״̬*******************************</summary>
        public static double dmc_read_current_speed(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_read_current_speed(CardNo, axis);
            return __ret;
        }

        public static short dmc_read_current_speed_unit(ushort CardNo, ushort axis, ref double current_speed)
        {
            fixed (double* __current_speed2 = &current_speed)
            {
                var __arg2 = __current_speed2;
                var __ret = __Internal.dmc_read_current_speed_unit(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static double dmc_read_vector_speed(ushort CardNo)
        {
            var __ret = __Internal.dmc_read_vector_speed(CardNo);
            return __ret;
        }

        public static int dmc_get_target_position(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_target_position(CardNo, axis);
            return __ret;
        }

        public static short dmc_get_target_position_unit(ushort CardNo, ushort axis, ref double pos)
        {
            fixed (double* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                var __ret = __Internal.dmc_get_target_position_unit(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_check_done(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_check_done(CardNo, axis);
            return __ret;
        }

        public static uint dmc_axis_io_status(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_axis_io_status(CardNo, axis);
            return __ret;
        }

        public static short dmc_stop(ushort CardNo, ushort axis, ushort stop_mode)
        {
            var __ret = __Internal.dmc_stop(CardNo, axis, stop_mode);
            return __ret;
        }

        public static short dmc_check_done_multicoor(ushort CardNo, ushort Crd)
        {
            var __ret = __Internal.dmc_check_done_multicoor(CardNo, Crd);
            return __ret;
        }

        public static short dmc_stop_multicoor(ushort CardNo, ushort Crd, ushort stop_mode)
        {
            var __ret = __Internal.dmc_stop_multicoor(CardNo, Crd, stop_mode);
            return __ret;
        }

        public static short dmc_emg_stop(ushort CardNo)
        {
            var __ret = __Internal.dmc_emg_stop(CardNo);
            return __ret;
        }

        public static short dmc_LinkState(ushort CardNo, ref ushort State)
        {
            fixed (ushort* __State1 = &State)
            {
                var __arg1 = __State1;
                var __ret = __Internal.dmc_LinkState(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_get_axis_run_mode(ushort CardNo, ushort axis, ref ushort run_mode)
        {
            fixed (ushort* __run_mode2 = &run_mode)
            {
                var __arg2 = __run_mode2;
                var __ret = __Internal.dmc_get_axis_run_mode(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_get_stop_reason(ushort CardNo, ushort axis, ref int StopReason)
        {
            fixed (int* __StopReason2 = &StopReason)
            {
                var __arg2 = __StopReason2;
                var __ret = __Internal.dmc_get_stop_reason(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_clear_stop_reason(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_clear_stop_reason(CardNo, axis);
            return __ret;
        }

        public static short dmc_set_trace(ushort CardNo, ushort axis, ushort enable)
        {
            var __ret = __Internal.dmc_set_trace(CardNo, axis, enable);
            return __ret;
        }

        public static short dmc_get_trace(ushort CardNo, ushort axis, ref ushort enable)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                var __ret = __Internal.dmc_get_trace(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_read_trace_data(ushort CardNo, ushort axis, ushort data_option, ref int ReceiveSize, ref double time, ref double data, ref int remain_num)
        {
            fixed (int* __ReceiveSize3 = &ReceiveSize)
            {
                var __arg3 = __ReceiveSize3;
                fixed (double* __time4 = &time)
                {
                    var __arg4 = __time4;
                    fixed (double* __data5 = &data)
                    {
                        var __arg5 = __data5;
                        fixed (int* __remain_num6 = &remain_num)
                        {
                            var __arg6 = __remain_num6;
                            var __ret = __Internal.dmc_read_trace_data(CardNo, axis, data_option, __arg3, __arg4, __arg5, __arg6);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_trace_start(ushort CardNo, ushort AxisNum, ref ushort AxisList)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                var __ret = __Internal.dmc_trace_start(CardNo, AxisNum, __arg2);
                return __ret;
            }
        }

        public static short dmc_trace_stop(ushort CardNo)
        {
            var __ret = __Internal.dmc_trace_stop(CardNo);
            return __ret;
        }

        public static short dmc_calculate_arclength_center(ref double start_pos, ref double target_pos, ref double cen_pos, ushort arc_dir, double circle, ref double ArcLength)
        {
            fixed (double* __start_pos0 = &start_pos)
            {
                var __arg0 = __start_pos0;
                fixed (double* __target_pos1 = &target_pos)
                {
                    var __arg1 = __target_pos1;
                    fixed (double* __cen_pos2 = &cen_pos)
                    {
                        var __arg2 = __cen_pos2;
                        fixed (double* __ArcLength5 = &ArcLength)
                        {
                            var __arg5 = __ArcLength5;
                            var __ret = __Internal.dmc_calculate_arclength_center(__arg0, __arg1, __arg2, arc_dir, circle, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// <para>*******************************�����岹����**************************************</para>
        /// <para>�����岹���ٶȺ����͵��β岹��ͬ</para>
        /// <para>**********************************************************************************</para>
        /// </summary>
        public static short dmc_conti_open_list(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                var __ret = __Internal.dmc_conti_open_list(CardNo, Crd, AxisNum, __arg3);
                return __ret;
            }
        }

        public static short dmc_conti_close_list(ushort CardNo, ushort Crd)
        {
            var __ret = __Internal.dmc_conti_close_list(CardNo, Crd);
            return __ret;
        }

        public static short dmc_conti_reset_list(ushort CardNo, ushort Crd)
        {
            var __ret = __Internal.dmc_conti_reset_list(CardNo, Crd);
            return __ret;
        }

        public static short dmc_conti_stop_list(ushort CardNo, ushort Crd, ushort stop_mode)
        {
            var __ret = __Internal.dmc_conti_stop_list(CardNo, Crd, stop_mode);
            return __ret;
        }

        public static short dmc_conti_pause_list(ushort CardNo, ushort Crd)
        {
            var __ret = __Internal.dmc_conti_pause_list(CardNo, Crd);
            return __ret;
        }

        public static short dmc_conti_start_list(ushort CardNo, ushort Crd)
        {
            var __ret = __Internal.dmc_conti_start_list(CardNo, Crd);
            return __ret;
        }

        public static short dmc_conti_get_run_state(ushort CardNo, ushort Crd)
        {
            var __ret = __Internal.dmc_conti_get_run_state(CardNo, Crd);
            return __ret;
        }

        public static int dmc_conti_remain_space(ushort CardNo, ushort Crd)
        {
            var __ret = __Internal.dmc_conti_remain_space(CardNo, Crd);
            return __ret;
        }

        public static int dmc_conti_read_current_mark(ushort CardNo, ushort Crd)
        {
            var __ret = __Internal.dmc_conti_read_current_mark(CardNo, Crd);
            return __ret;
        }

        public static short dmc_conti_set_blend(ushort CardNo, ushort Crd, ushort enable)
        {
            var __ret = __Internal.dmc_conti_set_blend(CardNo, Crd, enable);
            return __ret;
        }

        public static short dmc_conti_get_blend(ushort CardNo, ushort Crd, ref ushort enable)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                var __ret = __Internal.dmc_conti_get_blend(CardNo, Crd, __arg2);
                return __ret;
            }
        }

        public static short dmc_conti_set_override(ushort CardNo, ushort Crd, double Percent)
        {
            var __ret = __Internal.dmc_conti_set_override(CardNo, Crd, Percent);
            return __ret;
        }

        public static short dmc_conti_change_speed_ratio(ushort CardNo, ushort Crd, double percent)
        {
            var __ret = __Internal.dmc_conti_change_speed_ratio(CardNo, Crd, percent);
            return __ret;
        }

        public static short dmc_conti_set_lookahead_mode(ushort CardNo, ushort Crd, ushort enable, int LookaheadSegments, double PathError, double LookaheadAcc)
        {
            var __ret = __Internal.dmc_conti_set_lookahead_mode(CardNo, Crd, enable, LookaheadSegments, PathError, LookaheadAcc);
            return __ret;
        }

        public static short dmc_conti_get_lookahead_mode(ushort CardNo, ushort Crd, ref ushort enable, ref int LookaheadSegments, ref double PathError, ref double LookaheadAcc)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (int* __LookaheadSegments3 = &LookaheadSegments)
                {
                    var __arg3 = __LookaheadSegments3;
                    fixed (double* __PathError4 = &PathError)
                    {
                        var __arg4 = __PathError4;
                        fixed (double* __LookaheadAcc5 = &LookaheadAcc)
                        {
                            var __arg5 = __LookaheadAcc5;
                            var __ret = __Internal.dmc_conti_get_lookahead_mode(CardNo, Crd, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_conti_wait_input(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double TimeOut, int mark)
        {
            var __ret = __Internal.dmc_conti_wait_input(CardNo, Crd, bitno, on_off, TimeOut, mark);
            return __ret;
        }

        public static short dmc_conti_delay_outbit_to_start(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double delay_value, ushort delay_mode, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_delay_outbit_to_start(CardNo, Crd, bitno, on_off, delay_value, delay_mode, ReverseTime);
            return __ret;
        }

        public static short dmc_conti_delay_outbit_to_stop(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double delay_time, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_delay_outbit_to_stop(CardNo, Crd, bitno, on_off, delay_time, ReverseTime);
            return __ret;
        }

        public static short dmc_conti_ahead_outbit_to_stop(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double ahead_value, ushort ahead_mode, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_ahead_outbit_to_stop(CardNo, Crd, bitno, on_off, ahead_value, ahead_mode, ReverseTime);
            return __ret;
        }

        public static short dmc_conti_accurate_outbit_unit(ushort CardNo, ushort Crd, ushort cmp_no, ushort on_off, ushort axis, double abs_pos, ushort pos_source, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_accurate_outbit_unit(CardNo, Crd, cmp_no, on_off, axis, abs_pos, pos_source, ReverseTime);
            return __ret;
        }

        public static short dmc_conti_write_outbit(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_write_outbit(CardNo, Crd, bitno, on_off, ReverseTime);
            return __ret;
        }

        public static short dmc_conti_clear_io_action(ushort CardNo, ushort Crd, uint Io_Mask)
        {
            var __ret = __Internal.dmc_conti_clear_io_action(CardNo, Crd, Io_Mask);
            return __ret;
        }

        public static short dmc_conti_set_pause_output(ushort CardNo, ushort Crd, ushort action, int mask, int state)
        {
            var __ret = __Internal.dmc_conti_set_pause_output(CardNo, Crd, action, mask, state);
            return __ret;
        }

        public static short dmc_conti_get_pause_output(ushort CardNo, ushort Crd, ref ushort action, ref int mask, ref int state)
        {
            fixed (ushort* __action2 = &action)
            {
                var __arg2 = __action2;
                fixed (int* __mask3 = &mask)
                {
                    var __arg3 = __mask3;
                    fixed (int* __state4 = &state)
                    {
                        var __arg4 = __state4;
                        var __ret = __Internal.dmc_conti_get_pause_output(CardNo, Crd, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_conti_delay(ushort CardNo, ushort Crd, double delay_time, int mark)
        {
            var __ret = __Internal.dmc_conti_delay(CardNo, Crd, delay_time, mark);
            return __ret;
        }

        public static short dmc_conti_reverse_outbit(ushort CardNo, ushort Crd, ushort bitno, double reverse_time)
        {
            var __ret = __Internal.dmc_conti_reverse_outbit(CardNo, Crd, bitno, reverse_time);
            return __ret;
        }

        public static short dmc_conti_delay_outbit(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double delay_time)
        {
            var __ret = __Internal.dmc_conti_delay_outbit(CardNo, Crd, bitno, on_off, delay_time);
            return __ret;
        }

        public static short dmc_conti_line_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double pPosList, ushort posi_mode, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __pPosList4 = &pPosList)
                {
                    var __arg4 = __pPosList4;
                    var __ret = __Internal.dmc_conti_line_unit(CardNo, Crd, AxisNum, __arg3, __arg4, posi_mode, mark);
                    return __ret;
                }
            }
        }

        public static short dmc_conti_arc_move_center_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, ref double Cen_Pos, ushort Arc_Dir, int Circle, ushort posi_mode, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    fixed (double* __Cen_Pos5 = &Cen_Pos)
                    {
                        var __arg5 = __Cen_Pos5;
                        var __ret = __Internal.dmc_conti_arc_move_center_unit(CardNo, Crd, AxisNum, __arg3, __arg4, __arg5, Arc_Dir, Circle, posi_mode, mark);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_conti_arc_move_radius_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, double Arc_Radius, ushort Arc_Dir, int Circle, ushort posi_mode, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    var __ret = __Internal.dmc_conti_arc_move_radius_unit(CardNo, Crd, AxisNum, __arg3, __arg4, Arc_Radius, Arc_Dir, Circle, posi_mode, mark);
                    return __ret;
                }
            }
        }

        public static short dmc_conti_arc_move_3points_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, ref double Mid_Pos, int Circle, ushort posi_mode, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    fixed (double* __Mid_Pos5 = &Mid_Pos)
                    {
                        var __arg5 = __Mid_Pos5;
                        var __ret = __Internal.dmc_conti_arc_move_3points_unit(CardNo, Crd, AxisNum, __arg3, __arg4, __arg5, Circle, posi_mode, mark);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_conti_rectangle_move_unit(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, ref double Mark_Pos, int num, ushort rect_mode, ushort posi_mode, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    fixed (double* __Mark_Pos5 = &Mark_Pos)
                    {
                        var __arg5 = __Mark_Pos5;
                        var __ret = __Internal.dmc_conti_rectangle_move_unit(CardNo, Crd, AxisNum, __arg3, __arg4, __arg5, num, rect_mode, posi_mode, mark);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_conti_pmove_unit(ushort CardNo, ushort Crd, ushort axis, double dist, ushort posi_mode, ushort mode, int imark)
        {
            var __ret = __Internal.dmc_conti_pmove_unit(CardNo, Crd, axis, dist, posi_mode, mode, imark);
            return __ret;
        }

        public static short dmc_conti_set_involute_mode(ushort CardNo, ushort Crd, ushort mode)
        {
            var __ret = __Internal.dmc_conti_set_involute_mode(CardNo, Crd, mode);
            return __ret;
        }

        public static short dmc_conti_get_involute_mode(ushort CardNo, ushort Crd, ref ushort mode)
        {
            fixed (ushort* __mode2 = &mode)
            {
                var __arg2 = __mode2;
                var __ret = __Internal.dmc_conti_get_involute_mode(CardNo, Crd, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_gear_follow_profile(ushort CardNo, ushort axis, ushort enable, ushort master_axis, double ratio)
        {
            var __ret = __Internal.dmc_set_gear_follow_profile(CardNo, axis, enable, master_axis, ratio);
            return __ret;
        }

        public static short dmc_get_gear_follow_profile(ushort CardNo, ushort axis, ref ushort enable, ref ushort master_axis, ref double ratio)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __master_axis3 = &master_axis)
                {
                    var __arg3 = __master_axis3;
                    fixed (double* __ratio4 = &ratio)
                    {
                        var __arg4 = __ratio4;
                        var __ret = __Internal.dmc_get_gear_follow_profile(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_conti_line_unit_extern(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, ref double Cen_Pos, ushort posi_mode, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    fixed (double* __Cen_Pos5 = &Cen_Pos)
                    {
                        var __arg5 = __Cen_Pos5;
                        var __ret = __Internal.dmc_conti_line_unit_extern(CardNo, Crd, AxisNum, __arg3, __arg4, __arg5, posi_mode, mark);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_conti_arc_move_center_unit_extern(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Target_Pos, ref double Cen_Pos, double Arc_Radius, ushort posi_mode, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Target_Pos4 = &Target_Pos)
                {
                    var __arg4 = __Target_Pos4;
                    fixed (double* __Cen_Pos5 = &Cen_Pos)
                    {
                        var __arg5 = __Cen_Pos5;
                        var __ret = __Internal.dmc_conti_arc_move_center_unit_extern(CardNo, Crd, AxisNum, __arg3, __arg4, __arg5, Arc_Radius, posi_mode, mark);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>*******************************PWM���ܺ���******************************</summary>
        public static short dmc_set_pwm_pin(ushort CardNo, ushort portno, ushort ON_OFF, double dfreqency, double dduty)
        {
            var __ret = __Internal.dmc_set_pwm_pin(CardNo, portno, ON_OFF, dfreqency, dduty);
            return __ret;
        }

        public static short dmc_get_pwm_pin(ushort CardNo, ushort portno, ref ushort ON_OFF, ref double dfreqency, ref double dduty)
        {
            fixed (ushort* __ON_OFF2 = &ON_OFF)
            {
                var __arg2 = __ON_OFF2;
                fixed (double* __dfreqency3 = &dfreqency)
                {
                    var __arg3 = __dfreqency3;
                    fixed (double* __dduty4 = &dduty)
                    {
                        var __arg4 = __dduty4;
                        var __ret = __Internal.dmc_get_pwm_pin(CardNo, portno, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_pwm_enable(ushort CardNo, ushort enable)
        {
            var __ret = __Internal.dmc_set_pwm_enable(CardNo, enable);
            return __ret;
        }

        public static short dmc_get_pwm_enable(ushort CardNo, ref ushort enable)
        {
            fixed (ushort* __enable1 = &enable)
            {
                var __arg1 = __enable1;
                var __ret = __Internal.dmc_get_pwm_enable(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_set_pwm_output(ushort CardNo, ushort PwmNo, double fDuty, double fFre)
        {
            var __ret = __Internal.dmc_set_pwm_output(CardNo, PwmNo, fDuty, fFre);
            return __ret;
        }

        public static short dmc_get_pwm_output(ushort CardNo, ushort PwmNo, ref double fDuty, ref double fFre)
        {
            fixed (double* __fDuty2 = &fDuty)
            {
                var __arg2 = __fDuty2;
                fixed (double* __fFre3 = &fFre)
                {
                    var __arg3 = __fFre3;
                    var __ret = __Internal.dmc_get_pwm_output(CardNo, PwmNo, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_conti_set_pwm_output(ushort CardNo, ushort Crd, ushort PwmNo, double fDuty, double fFre)
        {
            var __ret = __Internal.dmc_conti_set_pwm_output(CardNo, Crd, PwmNo, fDuty, fFre);
            return __ret;
        }

        public static short dmc_set_pwm_enable_extern(ushort CardNo, ushort channel, ushort enable)
        {
            var __ret = __Internal.dmc_set_pwm_enable_extern(CardNo, channel, enable);
            return __ret;
        }

        public static short dmc_get_pwm_enable_extern(ushort CardNo, ushort channel, ref ushort enable)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                var __ret = __Internal.dmc_get_pwm_enable_extern(CardNo, channel, __arg2);
                return __ret;
            }
        }

        /// <summary>
        /// <para>********PWM�ٶȸ���**************</para>
        /// <para>mode:����ģʽ0-������ ����״̬ 1-������ ����͵�ƽ2-������ ����ߵ�ƽ3-���� ռ�ձ��Զ�����4-���� Ƶ���Զ�����</para>
        /// <para>MaxVel:��������ٶȣ���λunit</para>
        /// <para>MaxValue:������ռ�ձȻ���Ƶ��</para>
        /// <para>OutValue���������Ƶ�ʻ�ռ�ձ�</para>
        /// <para>***********************************</para>
        /// </summary>
        public static short dmc_conti_set_pwm_follow_speed(ushort CardNo, ushort Crd, ushort pwm_no, ushort mode, double MaxVel, double MaxValue, double OutValue)
        {
            var __ret = __Internal.dmc_conti_set_pwm_follow_speed(CardNo, Crd, pwm_no, mode, MaxVel, MaxValue, OutValue);
            return __ret;
        }

        public static short dmc_conti_get_pwm_follow_speed(ushort CardNo, ushort Crd, ushort pwm_no, ref ushort mode, ref double MaxVel, ref double MaxValue, ref double OutValue)
        {
            fixed (ushort* __mode3 = &mode)
            {
                var __arg3 = __mode3;
                fixed (double* __MaxVel4 = &MaxVel)
                {
                    var __arg4 = __MaxVel4;
                    fixed (double* __MaxValue5 = &MaxValue)
                    {
                        var __arg5 = __MaxValue5;
                        fixed (double* __OutValue6 = &OutValue)
                        {
                            var __arg6 = __OutValue6;
                            var __ret = __Internal.dmc_conti_get_pwm_follow_speed(CardNo, Crd, pwm_no, __arg3, __arg4, __arg5, __arg6);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_set_pwm_onoff_duty(ushort CardNo, ushort PwmNo, double fOnDuty, double fOffDuty)
        {
            var __ret = __Internal.dmc_set_pwm_onoff_duty(CardNo, PwmNo, fOnDuty, fOffDuty);
            return __ret;
        }

        public static short dmc_get_pwm_onoff_duty(ushort CardNo, ushort PwmNo, ref double fOnDuty, ref double fOffDuty)
        {
            fixed (double* __fOnDuty2 = &fOnDuty)
            {
                var __arg2 = __fOnDuty2;
                fixed (double* __fOffDuty3 = &fOffDuty)
                {
                    var __arg3 = __fOffDuty3;
                    var __ret = __Internal.dmc_get_pwm_onoff_duty(CardNo, PwmNo, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_conti_delay_pwm_to_start(ushort CardNo, ushort Crd, ushort pwmno, ushort on_off, double delay_value, ushort delay_mode, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_delay_pwm_to_start(CardNo, Crd, pwmno, on_off, delay_value, delay_mode, ReverseTime);
            return __ret;
        }

        public static short dmc_conti_delay_pwm_to_stop(ushort CardNo, ushort Crd, ushort pwmno, ushort on_off, double delay_time, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_delay_pwm_to_stop(CardNo, Crd, pwmno, on_off, delay_time, ReverseTime);
            return __ret;
        }

        public static short dmc_conti_ahead_pwm_to_stop(ushort CardNo, ushort Crd, ushort bitno, ushort on_off, double ahead_value, ushort ahead_mode, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_ahead_pwm_to_stop(CardNo, Crd, bitno, on_off, ahead_value, ahead_mode, ReverseTime);
            return __ret;
        }

        public static short dmc_conti_write_pwm(ushort CardNo, ushort Crd, ushort pwmno, ushort on_off, double ReverseTime)
        {
            var __ret = __Internal.dmc_conti_write_pwm(CardNo, Crd, pwmno, on_off, ReverseTime);
            return __ret;
        }

        /// <summary>*******************ADDA���*****************************</summary>
        public static short dmc_set_da_enable(ushort CardNo, ushort enable)
        {
            var __ret = __Internal.dmc_set_da_enable(CardNo, enable);
            return __ret;
        }

        public static short dmc_get_da_enable(ushort CardNo, ref ushort enable)
        {
            fixed (ushort* __enable1 = &enable)
            {
                var __arg1 = __enable1;
                var __ret = __Internal.dmc_get_da_enable(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_set_da_output(ushort CardNo, ushort channel, double Vout)
        {
            var __ret = __Internal.dmc_set_da_output(CardNo, channel, Vout);
            return __ret;
        }

        public static short dmc_get_da_output(ushort CardNo, ushort channel, ref double Vout)
        {
            fixed (double* __Vout2 = &Vout)
            {
                var __arg2 = __Vout2;
                var __ret = __Internal.dmc_get_da_output(CardNo, channel, __arg2);
                return __ret;
            }
        }

        public static short dmc_get_ad_input(ushort CardNo, ushort channel, ref double Vout)
        {
            fixed (double* __Vout2 = &Vout)
            {
                var __arg2 = __Vout2;
                var __ret = __Internal.dmc_get_ad_input(CardNo, channel, __arg2);
                return __ret;
            }
        }

        public static short dmc_conti_set_da_output(ushort CardNo, ushort Crd, ushort channel, double Vout)
        {
            var __ret = __Internal.dmc_conti_set_da_output(CardNo, Crd, channel, Vout);
            return __ret;
        }

        public static short dmc_conti_set_da_enable(ushort CardNo, ushort Crd, ushort enable, ushort channel, int mark)
        {
            var __ret = __Internal.dmc_conti_set_da_enable(CardNo, Crd, enable, channel, mark);
            return __ret;
        }

        /// <summary>
        /// <para>********DA�ٶȸ���**************</para>
        /// <para>da_no:ͨ����</para>
        /// <para>MaxVel:��������ٶȣ���λunit</para>
        /// <para>MaxValue:����ѹ</para>
        /// <para>***********************************</para>
        /// </summary>
        public static short dmc_conti_set_da_follow_speed(ushort CardNo, ushort Crd, ushort da_no, double MaxVel, double MaxValue, double acc_offset, double dec_offset, double acc_dist, double dec_dist)
        {
            var __ret = __Internal.dmc_conti_set_da_follow_speed(CardNo, Crd, da_no, MaxVel, MaxValue, acc_offset, dec_offset, acc_dist, dec_dist);
            return __ret;
        }

        public static short dmc_conti_get_da_follow_speed(ushort CardNo, ushort Crd, ushort da_no, ref double MaxVel, ref double MaxValue, ref double acc_offset, ref double dec_offset, ref double acc_dist, ref double dec_dist)
        {
            fixed (double* __MaxVel3 = &MaxVel)
            {
                var __arg3 = __MaxVel3;
                fixed (double* __MaxValue4 = &MaxValue)
                {
                    var __arg4 = __MaxValue4;
                    fixed (double* __acc_offset5 = &acc_offset)
                    {
                        var __arg5 = __acc_offset5;
                        fixed (double* __dec_offset6 = &dec_offset)
                        {
                            var __arg6 = __dec_offset6;
                            fixed (double* __acc_dist7 = &acc_dist)
                            {
                                var __arg7 = __acc_dist7;
                                fixed (double* __dec_dist8 = &dec_dist)
                                {
                                    var __arg8 = __dec_dist8;
                                    var __ret = __Internal.dmc_conti_get_da_follow_speed(CardNo, Crd, da_no, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                    return __ret;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>****************************CAN IO**********************************</summary>
        public static short dmc_set_can_state(ushort CardNo, ushort NodeNum, ushort state, ushort baud)
        {
            var __ret = __Internal.dmc_set_can_state(CardNo, NodeNum, state, baud);
            return __ret;
        }

        public static short dmc_get_can_state(ushort CardNo, ref ushort NodeNum, ref ushort state)
        {
            fixed (ushort* __NodeNum1 = &NodeNum)
            {
                var __arg1 = __NodeNum1;
                fixed (ushort* __state2 = &state)
                {
                    var __arg2 = __state2;
                    var __ret = __Internal.dmc_get_can_state(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        /// <summary>/0-�Ͽ���1-���ӣ�2-�쳣</summary>
        public static short dmc_get_can_errcode(ushort CardNo, ref ushort Errcode)
        {
            fixed (ushort* __Errcode1 = &Errcode)
            {
                var __arg1 = __Errcode1;
                var __ret = __Internal.dmc_get_can_errcode(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_write_can_outbit(ushort CardNo, ushort Node, ushort bitno, ushort on_off)
        {
            var __ret = __Internal.dmc_write_can_outbit(CardNo, Node, bitno, on_off);
            return __ret;
        }

        public static short dmc_read_can_outbit(ushort CardNo, ushort Node, ushort bitno)
        {
            var __ret = __Internal.dmc_read_can_outbit(CardNo, Node, bitno);
            return __ret;
        }

        public static short dmc_read_can_inbit(ushort CardNo, ushort Node, ushort bitno)
        {
            var __ret = __Internal.dmc_read_can_inbit(CardNo, Node, bitno);
            return __ret;
        }

        public static short dmc_write_can_outport(ushort CardNo, ushort Node, ushort PortNo, uint outport_val)
        {
            var __ret = __Internal.dmc_write_can_outport(CardNo, Node, PortNo, outport_val);
            return __ret;
        }

        public static uint dmc_read_can_outport(ushort CardNo, ushort Node, ushort PortNo)
        {
            var __ret = __Internal.dmc_read_can_outport(CardNo, Node, PortNo);
            return __ret;
        }

        public static uint dmc_read_can_inport(ushort CardNo, ushort Node, ushort PortNo)
        {
            var __ret = __Internal.dmc_read_can_inport(CardNo, Node, PortNo);
            return __ret;
        }

        public static short dmc_get_can_errcode_extern(ushort CardNo, ref ushort Errcode, ref ushort msg_losed, ref ushort emg_msg_num, ref ushort lostHeartB, ref ushort EmgMsg)
        {
            fixed (ushort* __Errcode1 = &Errcode)
            {
                var __arg1 = __Errcode1;
                fixed (ushort* __msg_losed2 = &msg_losed)
                {
                    var __arg2 = __msg_losed2;
                    fixed (ushort* __emg_msg_num3 = &emg_msg_num)
                    {
                        var __arg3 = __emg_msg_num3;
                        fixed (ushort* __lostHeartB4 = &lostHeartB)
                        {
                            var __arg4 = __lostHeartB4;
                            fixed (ushort* __EmgMsg5 = &EmgMsg)
                            {
                                var __arg5 = __EmgMsg5;
                                var __ret = __Internal.dmc_get_can_errcode_extern(CardNo, __arg1, __arg2, __arg3, __arg4, __arg5);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static int dmc_set_profile_limit(ushort CardNo, ushort axis, double Max_Vel, double Max_Acc, double EvenTime)
        {
            var __ret = __Internal.dmc_set_profile_limit(CardNo, axis, Max_Vel, Max_Acc, EvenTime);
            return __ret;
        }

        public static int dmc_get_profile_limit(ushort CardNo, ushort axis, ref double Max_Vel, ref double Max_Acc, ref double EvenTime)
        {
            fixed (double* __Max_Vel2 = &Max_Vel)
            {
                var __arg2 = __Max_Vel2;
                fixed (double* __Max_Acc3 = &Max_Acc)
                {
                    var __arg3 = __Max_Acc3;
                    fixed (double* __EvenTime4 = &EvenTime)
                    {
                        var __arg4 = __EvenTime4;
                        var __ret = __Internal.dmc_get_profile_limit(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static int dmc_set_vector_profile_limit(ushort CardNo, ushort Crd, double Max_Vel, double Max_Acc, double EvenTime)
        {
            var __ret = __Internal.dmc_set_vector_profile_limit(CardNo, Crd, Max_Vel, Max_Acc, EvenTime);
            return __ret;
        }

        public static int dmc_get_vector_profile_limit(ushort CardNo, ushort Crd, ref double Max_Vel, ref double Max_Acc, ref double EvenTime)
        {
            fixed (double* __Max_Vel2 = &Max_Vel)
            {
                var __arg2 = __Max_Vel2;
                fixed (double* __Max_Acc3 = &Max_Acc)
                {
                    var __arg3 = __Max_Acc3;
                    fixed (double* __EvenTime4 = &EvenTime)
                    {
                        var __arg4 = __EvenTime4;
                        var __ret = __Internal.dmc_get_vector_profile_limit(CardNo, Crd, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_arc_limit(ushort CardNo, ushort Crd, ushort Enable, double MaxCenAcc, double MaxArcError)
        {
            var __ret = __Internal.dmc_set_arc_limit(CardNo, Crd, Enable, MaxCenAcc, MaxArcError);
            return __ret;
        }

        public static short dmc_get_arc_limit(ushort CardNo, ushort Crd, ref ushort Enable, ref double MaxCenAcc, ref double MaxArcError)
        {
            fixed (ushort* __Enable2 = &Enable)
            {
                var __arg2 = __Enable2;
                fixed (double* __MaxCenAcc3 = &MaxCenAcc)
                {
                    var __arg3 = __MaxCenAcc3;
                    fixed (double* __MaxArcError4 = &MaxArcError)
                    {
                        var __arg4 = __MaxArcError4;
                        var __ret = __Internal.dmc_get_arc_limit(CardNo, Crd, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_softltc_set_mode(ushort CardNo, ushort latch, ushort ltc_enable, ushort ltc_mode, ushort ltc_inbit, ushort ltc_logic, double filter)
        {
            var __ret = __Internal.dmc_softltc_set_mode(CardNo, latch, ltc_enable, ltc_mode, ltc_inbit, ltc_logic, filter);
            return __ret;
        }

        public static short dmc_softltc_get_mode(ushort CardNo, ushort latch, ref ushort ltc_enable, ref ushort ltc_mode, ref ushort ltc_inbit, ref ushort ltc_logic, ref double filter)
        {
            fixed (ushort* __ltc_enable2 = &ltc_enable)
            {
                var __arg2 = __ltc_enable2;
                fixed (ushort* __ltc_mode3 = &ltc_mode)
                {
                    var __arg3 = __ltc_mode3;
                    fixed (ushort* __ltc_inbit4 = &ltc_inbit)
                    {
                        var __arg4 = __ltc_inbit4;
                        fixed (ushort* __ltc_logic5 = &ltc_logic)
                        {
                            var __arg5 = __ltc_logic5;
                            fixed (double* __filter6 = &filter)
                            {
                                var __arg6 = __filter6;
                                var __ret = __Internal.dmc_softltc_get_mode(CardNo, latch, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_softltc_set_source(ushort CardNo, ushort latch, ushort axis, ushort ltc_source)
        {
            var __ret = __Internal.dmc_softltc_set_source(CardNo, latch, axis, ltc_source);
            return __ret;
        }

        public static short dmc_softltc_get_source(ushort CardNo, ushort latch, ushort axis, ref ushort ltc_source)
        {
            fixed (ushort* __ltc_source3 = &ltc_source)
            {
                var __arg3 = __ltc_source3;
                var __ret = __Internal.dmc_softltc_get_source(CardNo, latch, axis, __arg3);
                return __ret;
            }
        }

        public static short dmc_softltc_reset(ushort CardNo, ushort latch)
        {
            var __ret = __Internal.dmc_softltc_reset(CardNo, latch);
            return __ret;
        }

        public static short dmc_softltc_get_number(ushort CardNo, ushort latch, ushort axis, ref int number)
        {
            fixed (int* __number3 = &number)
            {
                var __arg3 = __number3;
                var __ret = __Internal.dmc_softltc_get_number(CardNo, latch, axis, __arg3);
                return __ret;
            }
        }

        public static short dmc_softltc_get_value_unit(ushort CardNo, ushort latch, ushort axis, ref double value)
        {
            fixed (double* __value3 = &value)
            {
                var __arg3 = __value3;
                var __ret = __Internal.dmc_softltc_get_value_unit(CardNo, latch, axis, __arg3);
                return __ret;
            }
        }

        public static short dmc_set_IoFilter(ushort CardNo, ushort bitno, double filter)
        {
            var __ret = __Internal.dmc_set_IoFilter(CardNo, bitno, filter);
            return __ret;
        }

        public static short dmc_get_IoFilter(ushort CardNo, ushort bitno, ref double filter)
        {
            fixed (double* __filter2 = &filter)
            {
                var __arg2 = __filter2;
                var __ret = __Internal.dmc_get_IoFilter(CardNo, bitno, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_lsc_index_value(ushort CardNo, ushort axis, ushort IndexID, int IndexValue)
        {
            var __ret = __Internal.dmc_set_lsc_index_value(CardNo, axis, IndexID, IndexValue);
            return __ret;
        }

        public static short dmc_get_lsc_index_value(ushort CardNo, ushort axis, ushort IndexID, ref int IndexValue)
        {
            fixed (int* __IndexValue3 = &IndexValue)
            {
                var __arg3 = __IndexValue3;
                var __ret = __Internal.dmc_get_lsc_index_value(CardNo, axis, IndexID, __arg3);
                return __ret;
            }
        }

        public static short dmc_set_lsc_config(ushort CardNo, ushort axis, ushort Origin, uint Interal, uint NegIndex, uint PosIndex, double Ratio)
        {
            var __ret = __Internal.dmc_set_lsc_config(CardNo, axis, Origin, Interal, NegIndex, PosIndex, Ratio);
            return __ret;
        }

        public static short dmc_get_lsc_config(ushort CardNo, ushort axis, ref ushort Origin, ref uint Interal, ref uint NegIndex, ref uint PosIndex, ref double Ratio)
        {
            fixed (ushort* __Origin2 = &Origin)
            {
                var __arg2 = __Origin2;
                fixed (uint* __Interal3 = &Interal)
                {
                    var __arg3 = __Interal3;
                    fixed (uint* __NegIndex4 = &NegIndex)
                    {
                        var __arg4 = __NegIndex4;
                        fixed (uint* __PosIndex5 = &PosIndex)
                        {
                            var __arg5 = __PosIndex5;
                            fixed (double* __Ratio6 = &Ratio)
                            {
                                var __arg6 = __Ratio6;
                                var __ret = __Internal.dmc_get_lsc_config(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_watchdog(ushort CardNo, ushort enable, uint time)
        {
            var __ret = __Internal.dmc_set_watchdog(CardNo, enable, time);
            return __ret;
        }

        public static short dmc_call_watchdog(ushort CardNo)
        {
            var __ret = __Internal.dmc_call_watchdog(CardNo);
            return __ret;
        }

        public static short dmc_read_diagnoseData(ushort CardNo)
        {
            var __ret = __Internal.dmc_read_diagnoseData(CardNo);
            return __ret;
        }

        public static short dmc_conti_set_cmd_end(ushort CardNo, ushort Crd, ushort enable)
        {
            var __ret = __Internal.dmc_conti_set_cmd_end(CardNo, Crd, enable);
            return __ret;
        }

        public static short dmc_set_zone_limit_config(ushort CardNo, ref ushort axis, ref ushort Source, int x_pos_p, int x_pos_n, int y_pos_p, int y_pos_n, ushort action_para)
        {
            fixed (ushort* __axis1 = &axis)
            {
                var __arg1 = __axis1;
                fixed (ushort* __Source2 = &Source)
                {
                    var __arg2 = __Source2;
                    var __ret = __Internal.dmc_set_zone_limit_config(CardNo, __arg1, __arg2, x_pos_p, x_pos_n, y_pos_p, y_pos_n, action_para);
                    return __ret;
                }
            }
        }

        public static short dmc_get_zone_limit_config(ushort CardNo, ref ushort axis, ref ushort Source, ref int x_pos_p, ref int x_pos_n, ref int y_pos_p, ref int y_pos_n, ref ushort action_para)
        {
            fixed (ushort* __axis1 = &axis)
            {
                var __arg1 = __axis1;
                fixed (ushort* __Source2 = &Source)
                {
                    var __arg2 = __Source2;
                    fixed (int* __x_pos_p3 = &x_pos_p)
                    {
                        var __arg3 = __x_pos_p3;
                        fixed (int* __x_pos_n4 = &x_pos_n)
                        {
                            var __arg4 = __x_pos_n4;
                            fixed (int* __y_pos_p5 = &y_pos_p)
                            {
                                var __arg5 = __y_pos_p5;
                                fixed (int* __y_pos_n6 = &y_pos_n)
                                {
                                    var __arg6 = __y_pos_n6;
                                    fixed (ushort* __action_para7 = &action_para)
                                    {
                                        var __arg7 = __action_para7;
                                        var __ret = __Internal.dmc_get_zone_limit_config(CardNo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                        return __ret;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_zone_limit_enable(ushort CardNo, ushort enable)
        {
            var __ret = __Internal.dmc_set_zone_limit_enable(CardNo, enable);
            return __ret;
        }

        public static short dmc_set_interlock_config(ushort CardNo, ref ushort axis, ref ushort Source, int delta_pos, ushort action_para)
        {
            fixed (ushort* __axis1 = &axis)
            {
                var __arg1 = __axis1;
                fixed (ushort* __Source2 = &Source)
                {
                    var __arg2 = __Source2;
                    var __ret = __Internal.dmc_set_interlock_config(CardNo, __arg1, __arg2, delta_pos, action_para);
                    return __ret;
                }
            }
        }

        public static short dmc_get_interlock_config(ushort CardNo, ref ushort axis, ref ushort Source, ref int delta_pos, ref ushort action_para)
        {
            fixed (ushort* __axis1 = &axis)
            {
                var __arg1 = __axis1;
                fixed (ushort* __Source2 = &Source)
                {
                    var __arg2 = __Source2;
                    fixed (int* __delta_pos3 = &delta_pos)
                    {
                        var __arg3 = __delta_pos3;
                        fixed (ushort* __action_para4 = &action_para)
                        {
                            var __arg4 = __action_para4;
                            var __ret = __Internal.dmc_get_interlock_config(CardNo, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_set_interlock_enable(ushort CardNo, ushort enable)
        {
            var __ret = __Internal.dmc_set_interlock_enable(CardNo, enable);
            return __ret;
        }

        public static short dmc_set_grant_error_protect(ushort CardNo, ushort axis, ushort enable, uint dstp_error, uint emg_error)
        {
            var __ret = __Internal.dmc_set_grant_error_protect(CardNo, axis, enable, dstp_error, emg_error);
            return __ret;
        }

        public static short dmc_get_grant_error_protect(ushort CardNo, ushort axis, ref ushort enable, ref uint dstp_error, ref uint emg_error)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (uint* __dstp_error3 = &dstp_error)
                {
                    var __arg3 = __dstp_error3;
                    fixed (uint* __emg_error4 = &emg_error)
                    {
                        var __arg4 = __emg_error4;
                        var __ret = __Internal.dmc_get_grant_error_protect(CardNo, axis, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_set_safety_param(ushort CardNo, ushort axis, ushort enable, int safety_pos)
        {
            var __ret = __Internal.dmc_set_safety_param(CardNo, axis, enable, safety_pos);
            return __ret;
        }

        public static short dmc_get_safety_param(ushort CardNo, ushort axis, ref ushort enable, ref int safety_pos)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (int* __safety_pos3 = &safety_pos)
                {
                    var __arg3 = __safety_pos3;
                    var __ret = __Internal.dmc_get_safety_param(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_get_diagnose_param(ushort CardNo, ushort axis, ref int tartet_pos, ref int mode, ref int pulse_pos, ref int endcoder_pos)
        {
            fixed (int* __tartet_pos2 = &tartet_pos)
            {
                var __arg2 = __tartet_pos2;
                fixed (int* __mode3 = &mode)
                {
                    var __arg3 = __mode3;
                    fixed (int* __pulse_pos4 = &pulse_pos)
                    {
                        var __arg4 = __pulse_pos4;
                        fixed (int* __endcoder_pos5 = &endcoder_pos)
                        {
                            var __arg5 = __endcoder_pos5;
                            var __ret = __Internal.dmc_get_diagnose_param(CardNo, axis, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_set_camerablow_config(ushort CardNo, ushort camerablow_en, int cameraPos, ushort piece_num, int piece_distance, ushort axis_sel, int latch_distance_min)
        {
            var __ret = __Internal.dmc_set_camerablow_config(CardNo, camerablow_en, cameraPos, piece_num, piece_distance, axis_sel, latch_distance_min);
            return __ret;
        }

        public static short dmc_get_camerablow_config(ushort CardNo, ref ushort camerablow_en, ref int cameraPos, ref ushort piece_num, ref int piece_distance, ref ushort axis_sel, ref int latch_distance_min)
        {
            fixed (ushort* __camerablow_en1 = &camerablow_en)
            {
                var __arg1 = __camerablow_en1;
                fixed (int* __cameraPos2 = &cameraPos)
                {
                    var __arg2 = __cameraPos2;
                    fixed (ushort* __piece_num3 = &piece_num)
                    {
                        var __arg3 = __piece_num3;
                        fixed (int* __piece_distance4 = &piece_distance)
                        {
                            var __arg4 = __piece_distance4;
                            fixed (ushort* __axis_sel5 = &axis_sel)
                            {
                                var __arg5 = __axis_sel5;
                                fixed (int* __latch_distance_min6 = &latch_distance_min)
                                {
                                    var __arg6 = __latch_distance_min6;
                                    var __ret = __Internal.dmc_get_camerablow_config(CardNo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                    return __ret;
                                }
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_clear_camerablow_errorcode(ushort CardNo)
        {
            var __ret = __Internal.dmc_clear_camerablow_errorcode(CardNo);
            return __ret;
        }

        public static short dmc_get_camerablow_errorcode(ushort CardNo, ref ushort errorcode)
        {
            fixed (ushort* __errorcode1 = &errorcode)
            {
                var __arg1 = __errorcode1;
                var __ret = __Internal.dmc_get_camerablow_errorcode(CardNo, __arg1);
                return __ret;
            }
        }

        public static short dmc_set_io_limit_config(ushort CardNo, ushort portno, ushort enable, ushort axis_sel, ushort el_mode, ushort el_logic)
        {
            var __ret = __Internal.dmc_set_io_limit_config(CardNo, portno, enable, axis_sel, el_mode, el_logic);
            return __ret;
        }

        public static short dmc_get_io_limit_config(ushort CardNo, ushort portno, ref ushort enable, ref ushort axis_sel, ref ushort el_mode, ref ushort el_logic)
        {
            fixed (ushort* __enable2 = &enable)
            {
                var __arg2 = __enable2;
                fixed (ushort* __axis_sel3 = &axis_sel)
                {
                    var __arg3 = __axis_sel3;
                    fixed (ushort* __el_mode4 = &el_mode)
                    {
                        var __arg4 = __el_mode4;
                        fixed (ushort* __el_logic5 = &el_logic)
                        {
                            var __arg5 = __el_logic5;
                            var __ret = __Internal.dmc_get_io_limit_config(CardNo, portno, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_set_handwheel_filter(ushort CardNo, ushort axis, double filter_factor)
        {
            var __ret = __Internal.dmc_set_handwheel_filter(CardNo, axis, filter_factor);
            return __ret;
        }

        public static short dmc_get_handwheel_filter(ushort CardNo, ushort axis, ref double filter_factor)
        {
            fixed (double* __filter_factor2 = &filter_factor)
            {
                var __arg2 = __filter_factor2;
                var __ret = __Internal.dmc_get_handwheel_filter(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_conti_get_interp_map(ushort CardNo, ushort Crd, ref ushort AxisNum, ref ushort AxisList, ref double pPosList)
        {
            fixed (ushort* __AxisNum2 = &AxisNum)
            {
                var __arg2 = __AxisNum2;
                fixed (ushort* __AxisList3 = &AxisList)
                {
                    var __arg3 = __AxisList3;
                    fixed (double* __pPosList4 = &pPosList)
                    {
                        var __arg4 = __pPosList4;
                        var __ret = __Internal.dmc_conti_get_interp_map(CardNo, Crd, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_conti_get_crd_errcode(ushort CardNo, ushort Crd, ref ushort errcode)
        {
            fixed (ushort* __errcode2 = &errcode)
            {
                var __arg2 = __errcode2;
                var __ret = __Internal.dmc_conti_get_crd_errcode(CardNo, Crd, __arg2);
                return __ret;
            }
        }

        public static short dmc_line_unit_follow(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double Dist, ushort posi_mode)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __Dist4 = &Dist)
                {
                    var __arg4 = __Dist4;
                    var __ret = __Internal.dmc_line_unit_follow(CardNo, Crd, AxisNum, __arg3, __arg4, posi_mode);
                    return __ret;
                }
            }
        }

        public static short dmc_conti_line_unit_follow(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double pPosList, ushort posi_mode, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __pPosList4 = &pPosList)
                {
                    var __arg4 = __pPosList4;
                    var __ret = __Internal.dmc_conti_line_unit_follow(CardNo, Crd, AxisNum, __arg3, __arg4, posi_mode, mark);
                    return __ret;
                }
            }
        }

        public static short dmc_conti_set_da_action(ushort CardNo, ushort Crd, ushort mode, ushort portno, double dvalue)
        {
            var __ret = __Internal.dmc_conti_set_da_action(CardNo, Crd, mode, portno, dvalue);
            return __ret;
        }

        public static short dmc_read_encoder_speed(ushort CardNo, ushort Axis, ref double current_speed)
        {
            fixed (double* __current_speed2 = &current_speed)
            {
                var __arg2 = __current_speed2;
                var __ret = __Internal.dmc_read_encoder_speed(CardNo, Axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_axis_follow_line_enable(ushort CardNo, ushort Crd, ushort enable_flag)
        {
            var __ret = __Internal.dmc_axis_follow_line_enable(CardNo, Crd, enable_flag);
            return __ret;
        }

        public static short dmc_set_interp_compensation(ushort CardNo, ushort axis, double dvalue, double time)
        {
            var __ret = __Internal.dmc_set_interp_compensation(CardNo, axis, dvalue, time);
            return __ret;
        }

        public static short dmc_get_interp_compensation(ushort CardNo, ushort axis, ref double dvalue, ref double time)
        {
            fixed (double* __dvalue2 = &dvalue)
            {
                var __arg2 = __dvalue2;
                fixed (double* __time3 = &time)
                {
                    var __arg3 = __time3;
                    var __ret = __Internal.dmc_get_interp_compensation(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_set_io_exactstop(ushort CardNo, ushort axis, ushort ioNum, ref ushort ioList, ushort enable, ushort valid_logic, ushort action, ushort move_dir)
        {
            fixed (ushort* __ioList3 = &ioList)
            {
                var __arg3 = __ioList3;
                var __ret = __Internal.dmc_set_io_exactstop(CardNo, axis, ioNum, __arg3, enable, valid_logic, action, move_dir);
                return __ret;
            }
        }

        public static short dmc_get_distance_to_start(ushort CardNo, ushort Crd, ref double distance_x, ref double distance_y, int imark)
        {
            fixed (double* __distance_x2 = &distance_x)
            {
                var __arg2 = __distance_x2;
                fixed (double* __distance_y3 = &distance_y)
                {
                    var __arg3 = __distance_y3;
                    var __ret = __Internal.dmc_get_distance_to_start(CardNo, Crd, __arg2, __arg3, imark);
                    return __ret;
                }
            }
        }

        public static short dmc_set_start_distance_flag(ushort CardNo, ushort Crd, ushort flag)
        {
            var __ret = __Internal.dmc_set_start_distance_flag(CardNo, Crd, flag);
            return __ret;
        }

        /// <summary>
        /// <para>****************���&#251;�����λ����**********************</para>
        /// <para>��  ����</para>
        /// <para>CardNo:����</para>
        /// <para>Axis�����</para>
        /// <para>N_limit:����λ������</para>
        /// <para>P_limit:����λ������</para>
        /// <para>����ֵ���������</para>
        /// <para>*****************************************************************</para>
        /// </summary>
        public static short dmc_set_home_soft_limit(ushort CardNo, ushort Axis, int N_limit, int P_limit)
        {
            var __ret = __Internal.dmc_set_home_soft_limit(CardNo, Axis, N_limit, P_limit);
            return __ret;
        }

        public static short dmc_get_home_soft_limit(ushort CardNo, ushort Axis, ref int N_limit, ref int P_limit)
        {
            fixed (int* __N_limit2 = &N_limit)
            {
                var __arg2 = __N_limit2;
                fixed (int* __P_limit3 = &P_limit)
                {
                    var __arg3 = __P_limit3;
                    var __ret = __Internal.dmc_get_home_soft_limit(CardNo, Axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        /// <summary>
        /// <para>*******************</para>
        /// <para>ָ��˵����ʵ�ֵ�����湦�ܣ�����ĳ��������˶������&#244;�ָ��ʱ��������axis������Ŵ�ָ����滺�����Ĳ岹ָ��Ϲ켣�˶���ֱ�����&#245;�����������ϡ�</para>
        /// <para>ָ�����ͣ��岹������ָ��</para>
        /// <para>���������CardNo ����ϵ��</para>
        /// <para>axis ������</para>
        /// <para>dist �������(���嵱����λ)</para>
        /// <para>follow_mode //�˶�ģʽ��0-��ͣ��������1-�˶�������</para>
        /// <para>imark �κ�</para>
        /// <para>�����������</para>
        /// <para>*****************************</para>
        /// </summary>
        public static short dmc_conti_gear_unit(ushort CardNo, ushort Crd, ushort axis, double dist, ushort follow_mode, int imark)
        {
            var __ret = __Internal.dmc_conti_gear_unit(CardNo, Crd, axis, dist, follow_mode, imark);
            return __ret;
        }

        public static short dmc_set_path_fitting_enable(ushort CardNo, ushort Crd, ushort enable)
        {
            var __ret = __Internal.dmc_set_path_fitting_enable(CardNo, Crd, enable);
            return __ret;
        }

        public static short dmc_enable_leadscrew_comp(ushort CardNo, ushort axis, ushort enable)
        {
            var __ret = __Internal.dmc_enable_leadscrew_comp(CardNo, axis, enable);
            return __ret;
        }

        public static short dmc_set_leadscrew_comp_config(ushort CardNo, ushort axis, ushort n, int startpos, int lenpos, ref int pCompPos, ref int pCompNeg)
        {
            fixed (int* __pCompPos5 = &pCompPos)
            {
                var __arg5 = __pCompPos5;
                fixed (int* __pCompNeg6 = &pCompNeg)
                {
                    var __arg6 = __pCompNeg6;
                    var __ret = __Internal.dmc_set_leadscrew_comp_config(CardNo, axis, n, startpos, lenpos, __arg5, __arg6);
                    return __ret;
                }
            }
        }

        public static short dmc_t_pmove_extern(ushort CardNo, ushort axis, double MidPos, double TargetPos, double Min_Vel, double Max_Vel, double stop_Vel, double acc, double dec, ushort posi_mode)
        {
            var __ret = __Internal.dmc_t_pmove_extern(CardNo, axis, MidPos, TargetPos, Min_Vel, Max_Vel, stop_Vel, acc, dec, posi_mode);
            return __ret;
        }

        public static short dmc_set_pulse_encoder_count_error(ushort CardNo, ushort axis, ushort error)
        {
            var __ret = __Internal.dmc_set_pulse_encoder_count_error(CardNo, axis, error);
            return __ret;
        }

        public static short dmc_get_pulse_encoder_count_error(ushort CardNo, ushort axis, ref ushort error)
        {
            fixed (ushort* __error2 = &error)
            {
                var __arg2 = __error2;
                var __ret = __Internal.dmc_get_pulse_encoder_count_error(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_check_pulse_encoder_count_error(ushort CardNo, ushort axis, ref int pulse_position, ref int enc_position)
        {
            fixed (int* __pulse_position2 = &pulse_position)
            {
                var __arg2 = __pulse_position2;
                fixed (int* __enc_position3 = &enc_position)
                {
                    var __arg3 = __enc_position3;
                    var __ret = __Internal.dmc_check_pulse_encoder_count_error(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_update_target_position_extern(ushort CardNo, ushort axis, double mid_pos, double aim_pos, double vel, ushort posi_mode)
        {
            var __ret = __Internal.dmc_update_target_position_extern(CardNo, axis, mid_pos, aim_pos, vel, posi_mode);
            return __ret;
        }

        public static short dmc_sorting_close(ushort CardNo)
        {
            var __ret = __Internal.dmc_sorting_close(CardNo);
            return __ret;
        }

        public static short dmc_sorting_start(ushort CardNo)
        {
            var __ret = __Internal.dmc_sorting_start(CardNo);
            return __ret;
        }

        public static short dmc_sorting_set_init_config(ushort CardNo, ushort cameraCount, ref int pCameraPos, ref ushort pCamIONo, uint cameraTime, ushort cameraTrigLevel, ushort blowCount, ref int pBlowPos, ref ushort pBlowIONo, uint blowTime, ushort blowTrigLevel, ushort axis, ushort dir, ushort checkMode)
        {
            fixed (int* __pCameraPos2 = &pCameraPos)
            {
                var __arg2 = __pCameraPos2;
                fixed (ushort* __pCamIONo3 = &pCamIONo)
                {
                    var __arg3 = __pCamIONo3;
                    fixed (int* __pBlowPos7 = &pBlowPos)
                    {
                        var __arg7 = __pBlowPos7;
                        fixed (ushort* __pBlowIONo8 = &pBlowIONo)
                        {
                            var __arg8 = __pBlowIONo8;
                            var __ret = __Internal.dmc_sorting_set_init_config(CardNo, cameraCount, __arg2, __arg3, cameraTime, cameraTrigLevel, blowCount, __arg7, __arg8, blowTime, blowTrigLevel, axis, dir, checkMode);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_sorting_set_camera_trig_count(ushort CardNo, ushort cameraNum, uint cameraTrigCnt)
        {
            var __ret = __Internal.dmc_sorting_set_camera_trig_count(CardNo, cameraNum, cameraTrigCnt);
            return __ret;
        }

        public static short dmc_sorting_get_camera_trig_count(ushort CardNo, ushort cameraNum, ref uint pCameraTrigCnt, ushort count)
        {
            fixed (uint* __pCameraTrigCnt2 = &pCameraTrigCnt)
            {
                var __arg2 = __pCameraTrigCnt2;
                var __ret = __Internal.dmc_sorting_get_camera_trig_count(CardNo, cameraNum, __arg2, count);
                return __ret;
            }
        }

        public static short dmc_sorting_set_blow_trig_count(ushort CardNo, ushort blowNum, uint blowTrigCnt)
        {
            var __ret = __Internal.dmc_sorting_set_blow_trig_count(CardNo, blowNum, blowTrigCnt);
            return __ret;
        }

        public static short dmc_sorting_get_blow_trig_count(ushort CardNo, ushort blowNum, ref uint pBlowTrigCnt, ushort count)
        {
            fixed (uint* __pBlowTrigCnt2 = &pBlowTrigCnt)
            {
                var __arg2 = __pBlowTrigCnt2;
                var __ret = __Internal.dmc_sorting_get_blow_trig_count(CardNo, blowNum, __arg2, count);
                return __ret;
            }
        }

        public static short dmc_sorting_get_camera_config(ushort CardNo, ushort index, ref int pos, ref uint trigTime, ref ushort ioNo, ref ushort trigLevel)
        {
            fixed (int* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                fixed (uint* __trigTime3 = &trigTime)
                {
                    var __arg3 = __trigTime3;
                    fixed (ushort* __ioNo4 = &ioNo)
                    {
                        var __arg4 = __ioNo4;
                        fixed (ushort* __trigLevel5 = &trigLevel)
                        {
                            var __arg5 = __trigLevel5;
                            var __ret = __Internal.dmc_sorting_get_camera_config(CardNo, index, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_sorting_get_blow_config(ushort CardNo, ushort index, ref int pos, ref uint trigTime, ref ushort ioNo, ref ushort trigLevel)
        {
            fixed (int* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                fixed (uint* __trigTime3 = &trigTime)
                {
                    var __arg3 = __trigTime3;
                    fixed (ushort* __ioNo4 = &ioNo)
                    {
                        var __arg4 = __ioNo4;
                        fixed (ushort* __trigLevel5 = &trigLevel)
                        {
                            var __arg5 = __trigLevel5;
                            var __ret = __Internal.dmc_sorting_get_blow_config(CardNo, index, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_sorting_get_blow_status(ushort CardNo, ref uint trigCntAll, ref ushort trigMore, ref ushort trigLess)
        {
            fixed (uint* __trigCntAll1 = &trigCntAll)
            {
                var __arg1 = __trigCntAll1;
                fixed (ushort* __trigMore2 = &trigMore)
                {
                    var __arg2 = __trigMore2;
                    fixed (ushort* __trigLess3 = &trigLess)
                    {
                        var __arg3 = __trigLess3;
                        var __ret = __Internal.dmc_sorting_get_blow_status(CardNo, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public static short dmc_sorting_trig_blow(ushort CardNo, ushort blowNum)
        {
            var __ret = __Internal.dmc_sorting_trig_blow(CardNo, blowNum);
            return __ret;
        }

        public static short dmc_sorting_set_blow_enable(ushort CardNo, ushort blowNum, ushort enable)
        {
            var __ret = __Internal.dmc_sorting_set_blow_enable(CardNo, blowNum, enable);
            return __ret;
        }

        public static short dmc_sorting_set_piece_config(ushort CardNo, uint maxWidth, uint minWidth, uint minDistance, uint minTimeIntervel)
        {
            var __ret = __Internal.dmc_sorting_set_piece_config(CardNo, maxWidth, minWidth, minDistance, minTimeIntervel);
            return __ret;
        }

        public static short dmc_sorting_get_piece_status(ushort CardNo, ref uint pieceFind, ref uint piecePassCam, ref uint dist2next, ref uint pieceWidth)
        {
            fixed (uint* __pieceFind1 = &pieceFind)
            {
                var __arg1 = __pieceFind1;
                fixed (uint* __piecePassCam2 = &piecePassCam)
                {
                    var __arg2 = __piecePassCam2;
                    fixed (uint* __dist2next3 = &dist2next)
                    {
                        var __arg3 = __dist2next3;
                        fixed (uint* __pieceWidth4 = &pieceWidth)
                        {
                            var __arg4 = __pieceWidth4;
                            var __ret = __Internal.dmc_sorting_get_piece_status(CardNo, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_sorting_set_cam_trig_phase(ushort CardNo, ushort blowNo, double coef)
        {
            var __ret = __Internal.dmc_sorting_set_cam_trig_phase(CardNo, blowNo, coef);
            return __ret;
        }

        public static short dmc_sorting_set_blow_trig_phase(ushort CardNo, ushort blowNo, double coef)
        {
            var __ret = __Internal.dmc_sorting_set_blow_trig_phase(CardNo, blowNo, coef);
            return __ret;
        }

        public static short dmc_set_sevon_enable(ushort CardNo, ushort axis, ushort on_off)
        {
            var __ret = __Internal.dmc_set_sevon_enable(CardNo, axis, on_off);
            return __ret;
        }

        public static short dmc_get_sevon_enable(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_get_sevon_enable(CardNo, axis);
            return __ret;
        }

        public static short dmc_compare_add_point_cycle(ushort CardNo, ushort cmp, int pos, ushort dir, uint bitno, uint cycle, ushort level)
        {
            var __ret = __Internal.dmc_compare_add_point_cycle(CardNo, cmp, pos, dir, bitno, cycle, level);
            return __ret;
        }

        public static short dmc_set_encoder_count_error_action_config(ushort CardNo, ushort enable, ushort stopmode)
        {
            var __ret = __Internal.dmc_set_encoder_count_error_action_config(CardNo, enable, stopmode);
            return __ret;
        }

        public static short dmc_get_encoder_count_error_action_config(ushort CardNo, ref ushort enable, ref ushort stopmode)
        {
            fixed (ushort* __enable1 = &enable)
            {
                var __arg1 = __enable1;
                fixed (ushort* __stopmode2 = &stopmode)
                {
                    var __arg2 = __stopmode2;
                    var __ret = __Internal.dmc_get_encoder_count_error_action_config(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short dmc_set_home_el_return(ushort CardNo, ushort axis, ushort enable)
        {
            var __ret = __Internal.dmc_set_home_el_return(CardNo, axis, enable);
            return __ret;
        }

        public static short dmc_conti_set_encoder_da_follow_enable(ushort CardNo, ushort Crd, ushort axis, ushort enable)
        {
            var __ret = __Internal.dmc_conti_set_encoder_da_follow_enable(CardNo, Crd, axis, enable);
            return __ret;
        }

        public static short dmc_conti_get_encoder_da_follow_enable(ushort CardNo, ushort Crd, ref ushort axis, ref ushort enable)
        {
            fixed (ushort* __axis2 = &axis)
            {
                var __arg2 = __axis2;
                fixed (ushort* __enable3 = &enable)
                {
                    var __arg3 = __enable3;
                    var __ret = __Internal.dmc_conti_get_encoder_da_follow_enable(CardNo, Crd, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_check_done_pos(ushort CardNo, ushort axis, ushort posi_mode)
        {
            var __ret = __Internal.dmc_check_done_pos(CardNo, axis, posi_mode);
            return __ret;
        }

        public static short dmc_set_factor_error(ushort CardNo, ushort axis, double factor, int error)
        {
            var __ret = __Internal.dmc_set_factor_error(CardNo, axis, factor, error);
            return __ret;
        }

        public static short dmc_set_factor(ushort CardNo, ushort axis, double factor)
        {
            var __ret = __Internal.dmc_set_factor(CardNo, axis, factor);
            return __ret;
        }

        public static short dmc_set_error(ushort CardNo, ushort axis, int error)
        {
            var __ret = __Internal.dmc_set_error(CardNo, axis, error);
            return __ret;
        }

        public static short dmc_get_factor_error(ushort CardNo, ushort axis, ref double factor, ref int error)
        {
            fixed (double* __factor2 = &factor)
            {
                var __arg2 = __factor2;
                fixed (int* __error3 = &error)
                {
                    var __arg3 = __error3;
                    var __ret = __Internal.dmc_get_factor_error(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_check_success_pulse(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_check_success_pulse(CardNo, axis);
            return __ret;
        }

        public static short dmc_check_success_encoder(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.dmc_check_success_encoder(CardNo, axis);
            return __ret;
        }

        public static short dmc_set_io_count_profile(ushort CardNo, ushort chan, ushort bitno, ushort mode, double filter, double count_value, ref ushort axis_list, ushort axis_num, ushort stop_mode)
        {
            fixed (ushort* __axis_list6 = &axis_list)
            {
                var __arg6 = __axis_list6;
                var __ret = __Internal.dmc_set_io_count_profile(CardNo, chan, bitno, mode, filter, count_value, __arg6, axis_num, stop_mode);
                return __ret;
            }
        }

        public static short dmc_get_io_count_profile(ushort CardNo, ushort chan, ref ushort bitno, ref ushort mode, ref double filter, ref double count_value, ref ushort axis_list, ref ushort axis_num, ref ushort stop_mode)
        {
            fixed (ushort* __bitno2 = &bitno)
            {
                var __arg2 = __bitno2;
                fixed (ushort* __mode3 = &mode)
                {
                    var __arg3 = __mode3;
                    fixed (double* __filter4 = &filter)
                    {
                        var __arg4 = __filter4;
                        fixed (double* __count_value5 = &count_value)
                        {
                            var __arg5 = __count_value5;
                            fixed (ushort* __axis_list6 = &axis_list)
                            {
                                var __arg6 = __axis_list6;
                                fixed (ushort* __axis_num7 = &axis_num)
                                {
                                    var __arg7 = __axis_num7;
                                    fixed (ushort* __stop_mode8 = &stop_mode)
                                    {
                                        var __arg8 = __stop_mode8;
                                        var __ret = __Internal.dmc_get_io_count_profile(CardNo, chan, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                        return __ret;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_set_io_count_enable(ushort CardNo, ushort chan, ushort ifenable)
        {
            var __ret = __Internal.dmc_set_io_count_enable(CardNo, chan, ifenable);
            return __ret;
        }

        public static short dmc_clear_io_count(ushort CardNo, ushort chan)
        {
            var __ret = __Internal.dmc_clear_io_count(CardNo, chan);
            return __ret;
        }

        public static short dmc_get_io_count_value_extern(ushort CardNo, ushort chan, ref int current_value)
        {
            fixed (int* __current_value2 = &current_value)
            {
                var __arg2 = __current_value2;
                var __ret = __Internal.dmc_get_io_count_value_extern(CardNo, chan, __arg2);
                return __ret;
            }
        }

        public static short dmc_get_position_ex(ushort CardNo, ushort axis, ref double pos)
        {
            fixed (double* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                var __ret = __Internal.dmc_get_position_ex(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_get_encoder_ex(ushort CardNo, ushort axis, ref double pos)
        {
            fixed (double* __pos2 = &pos)
            {
                var __arg2 = __pos2;
                var __ret = __Internal.dmc_get_encoder_ex(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short dmc_set_home_shift_param(ushort CardNo, ushort axis, ushort pos_clear_mode, double ShiftValue)
        {
            var __ret = __Internal.dmc_set_home_shift_param(CardNo, axis, pos_clear_mode, ShiftValue);
            return __ret;
        }

        public static short dmc_get_home_shift_param(ushort CardNo, ushort axis, ref ushort pos_clear_mode, ref double ShiftValue)
        {
            fixed (ushort* __pos_clear_mode2 = &pos_clear_mode)
            {
                var __arg2 = __pos_clear_mode2;
                fixed (double* __ShiftValue3 = &ShiftValue)
                {
                    var __arg3 = __ShiftValue3;
                    var __ret = __Internal.dmc_get_home_shift_param(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short dmc_change_speed_extend(ushort CardNo, ushort axis, double Curr_Vel, double Taccdec, ushort pin_num, ushort trig_mode)
        {
            var __ret = __Internal.dmc_change_speed_extend(CardNo, axis, Curr_Vel, Taccdec, pin_num, trig_mode);
            return __ret;
        }

        public static short dmc_follow_vector_speed_move(ushort CardNo, ushort axis, ushort Follow_AxisNum, ref ushort Follow_AxisList, double ratio)
        {
            fixed (ushort* __Follow_AxisList3 = &Follow_AxisList)
            {
                var __arg3 = __Follow_AxisList3;
                var __ret = __Internal.dmc_follow_vector_speed_move(CardNo, axis, Follow_AxisNum, __arg3, ratio);
                return __ret;
            }
        }

        public static short dmc_conti_line_unit_extend(ushort CardNo, ushort Crd, ushort AxisNum, ref ushort AxisList, ref double pPosList, ushort posi_mode, double Extend_Len, ushort enable, int mark)
        {
            fixed (ushort* __AxisList3 = &AxisList)
            {
                var __arg3 = __AxisList3;
                fixed (double* __pPosList4 = &pPosList)
                {
                    var __arg4 = __pPosList4;
                    var __ret = __Internal.dmc_conti_line_unit_extend(CardNo, Crd, AxisNum, __arg3, __arg4, posi_mode, Extend_Len, enable, mark);
                    return __ret;
                }
            }
        }

        public static short dmc_hcmp_2d_set_config_unit(ushort CardNo, ushort hcmp, ushort cmp_mode, ushort x_axis, ushort x_cmp_source, double x_cmp_error, ushort y_axis, ushort y_cmp_source, double y_cmp_error, ushort cmp_logic, int time)
        {
            var __ret = __Internal.dmc_hcmp_2d_set_config_unit(CardNo, hcmp, cmp_mode, x_axis, x_cmp_source, x_cmp_error, y_axis, y_cmp_source, y_cmp_error, cmp_logic, time);
            return __ret;
        }

        public static short dmc_hcmp_2d_get_config_unit(ushort CardNo, ushort hcmp, ref ushort cmp_mode, ref ushort x_axis, ref ushort x_cmp_source, ref double x_cmp_error, ref ushort y_axis, ref ushort y_cmp_source, ref double y_cmp_error, ref ushort cmp_logic, ref int time)
        {
            fixed (ushort* __cmp_mode2 = &cmp_mode)
            {
                var __arg2 = __cmp_mode2;
                fixed (ushort* __x_axis3 = &x_axis)
                {
                    var __arg3 = __x_axis3;
                    fixed (ushort* __x_cmp_source4 = &x_cmp_source)
                    {
                        var __arg4 = __x_cmp_source4;
                        fixed (double* __x_cmp_error5 = &x_cmp_error)
                        {
                            var __arg5 = __x_cmp_error5;
                            fixed (ushort* __y_axis6 = &y_axis)
                            {
                                var __arg6 = __y_axis6;
                                fixed (ushort* __y_cmp_source7 = &y_cmp_source)
                                {
                                    var __arg7 = __y_cmp_source7;
                                    fixed (double* __y_cmp_error8 = &y_cmp_error)
                                    {
                                        var __arg8 = __y_cmp_error8;
                                        fixed (ushort* __cmp_logic9 = &cmp_logic)
                                        {
                                            var __arg9 = __cmp_logic9;
                                            fixed (int* __time10 = &time)
                                            {
                                                var __arg10 = __time10;
                                                var __ret = __Internal.dmc_hcmp_2d_get_config_unit(CardNo, hcmp, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                                return __ret;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static short dmc_hcmp_2d_set_pwmoutput(ushort CardNo, ushort hcmp, ushort pwm_enable, double duty, double freq, ushort pwm_number)
        {
            var __ret = __Internal.dmc_hcmp_2d_set_pwmoutput(CardNo, hcmp, pwm_enable, duty, freq, pwm_number);
            return __ret;
        }

        public static short dmc_hcmp_2d_get_pwmoutput(ushort CardNo, ushort hcmp, ref ushort pwm_enable, ref double duty, ref double freq, ref ushort pwm_number)
        {
            fixed (ushort* __pwm_enable2 = &pwm_enable)
            {
                var __arg2 = __pwm_enable2;
                fixed (double* __duty3 = &duty)
                {
                    var __arg3 = __duty3;
                    fixed (double* __freq4 = &freq)
                    {
                        var __arg4 = __freq4;
                        fixed (ushort* __pwm_number5 = &pwm_number)
                        {
                            var __arg5 = __pwm_number5;
                            var __ret = __Internal.dmc_hcmp_2d_get_pwmoutput(CardNo, hcmp, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static short dmc_hcmp_2d_add_point_unit(ushort ConnectNo, ushort hcmp, double x_cmp_pos, double y_cmp_pos, ushort cmp_outbit)
        {
            var __ret = __Internal.dmc_hcmp_2d_add_point_unit(ConnectNo, hcmp, x_cmp_pos, y_cmp_pos, cmp_outbit);
            return __ret;
        }

        public static short dmc_hcmp_2d_get_current_state_unit(ushort CardNo, ushort hcmp, ref int remained_points, ref double x_current_point, ref double y_current_point, ref int runned_points, ref ushort current_state, ref ushort current_outbit)
        {
            fixed (int* __remained_points2 = &remained_points)
            {
                var __arg2 = __remained_points2;
                fixed (double* __x_current_point3 = &x_current_point)
                {
                    var __arg3 = __x_current_point3;
                    fixed (double* __y_current_point4 = &y_current_point)
                    {
                        var __arg4 = __y_current_point4;
                        fixed (int* __runned_points5 = &runned_points)
                        {
                            var __arg5 = __runned_points5;
                            fixed (ushort* __current_state6 = &current_state)
                            {
                                var __arg6 = __current_state6;
                                fixed (ushort* __current_outbit7 = &current_outbit)
                                {
                                    var __arg7 = __current_outbit7;
                                    var __ret = __Internal.dmc_hcmp_2d_get_current_state_unit(CardNo, hcmp, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    return __ret;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>***************************������غ���*********************************</summary>
        public static short nmc_set_home_profile(ushort CardNo, ushort axis, ushort home_mode, double Low_Vel, double High_Vel, double Tacc, double Tdec, double offsetpos)
        {
            var __ret = __Internal.nmc_set_home_profile(CardNo, axis, home_mode, Low_Vel, High_Vel, Tacc, Tdec, offsetpos);
            return __ret;
        }

        public static short nmc_get_home_profile(ushort CardNo, ushort axis, ref ushort home_mode, ref double Low_Vel, ref double High_Vel, ref double Tacc, ref double Tdec, ref double offsetpos)
        {
            fixed (ushort* __home_mode2 = &home_mode)
            {
                var __arg2 = __home_mode2;
                fixed (double* __Low_Vel3 = &Low_Vel)
                {
                    var __arg3 = __Low_Vel3;
                    fixed (double* __High_Vel4 = &High_Vel)
                    {
                        var __arg4 = __High_Vel4;
                        fixed (double* __Tacc5 = &Tacc)
                        {
                            var __arg5 = __Tacc5;
                            fixed (double* __Tdec6 = &Tdec)
                            {
                                var __arg6 = __Tdec6;
                                fixed (double* __offsetpos7 = &offsetpos)
                                {
                                    var __arg7 = __offsetpos7;
                                    var __ret = __Internal.nmc_get_home_profile(CardNo, axis, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    return __ret;
                                }
                            }
                        }
                    }
                }
            }
        }

        public static short nmc_home_move(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.nmc_home_move(CardNo, axis);
            return __ret;
        }

        /// <summary>
        /// <para>*****************************************************</para>
        /// <para>portnum��ʾ�˿ںţ���������</para>
        /// <para>0: ��ʾcanopen��0�Ŷ˿�</para>
        /// <para>1: ��ʾcanopen��1�Ŷ˿�</para>
        /// <para>10:��ʾEtherCAT��0�Ŷ˿�</para>
        /// <para>11:��ʾEtherCAT��1�Ŷ˿�</para>
        /// <para>******************************************************</para>
        /// </summary>
        public static short nmc_set_manager_para(ushort CardNo, ushort PortNum, uint Baudrate, ushort ManagerID)
        {
            var __ret = __Internal.nmc_set_manager_para(CardNo, PortNum, Baudrate, ManagerID);
            return __ret;
        }

        public static short nmc_get_manager_para(ushort CardNo, ushort PortNum, ref uint Baudrate, ref ushort ManagerID)
        {
            fixed (uint* __Baudrate2 = &Baudrate)
            {
                var __arg2 = __Baudrate2;
                fixed (ushort* __ManagerID3 = &ManagerID)
                {
                    var __arg3 = __ManagerID3;
                    var __ret = __Internal.nmc_get_manager_para(CardNo, PortNum, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short nmc_set_manager_od(ushort CardNo, ushort PortNum, ushort Index, ushort SubIndex, ushort ValLength, uint Value)
        {
            var __ret = __Internal.nmc_set_manager_od(CardNo, PortNum, Index, SubIndex, ValLength, Value);
            return __ret;
        }

        public static short nmc_get_manager_od(ushort CardNo, ushort PortNum, ushort Index, ushort SubIndex, ushort ValLength, ref uint Value)
        {
            fixed (uint* __Value5 = &Value)
            {
                var __arg5 = __Value5;
                var __ret = __Internal.nmc_get_manager_od(CardNo, PortNum, Index, SubIndex, ValLength, __arg5);
                return __ret;
            }
        }

        public static short nmc_set_node_od(ushort CardNo, ushort PortNum, ushort NodeNum, ushort Index, ushort SubIndex, ushort ValLength, int Value)
        {
            var __ret = __Internal.nmc_set_node_od(CardNo, PortNum, NodeNum, Index, SubIndex, ValLength, Value);
            return __ret;
        }

        public static short nmc_get_node_od(ushort CardNo, ushort PortNum, ushort NodeNum, ushort Index, ushort SubIndex, ushort ValLength, ref int Value)
        {
            fixed (int* __Value6 = &Value)
            {
                var __arg6 = __Value6;
                var __ret = __Internal.nmc_get_node_od(CardNo, PortNum, NodeNum, Index, SubIndex, ValLength, __arg6);
                return __ret;
            }
        }

        public static short nmc_upload_configfile(ushort CardNo, ushort PortNum, string FileName)
        {
            var __ret = __Internal.nmc_upload_configfile(CardNo, PortNum, FileName);
            return __ret;
        }

        public static short nmc_reset_to_factory(ushort CardNo, ushort PortNum, ushort NodeNum)
        {
            var __ret = __Internal.nmc_reset_to_factory(CardNo, PortNum, NodeNum);
            return __ret;
        }

        public static short nmc_write_to_pci(ushort CardNo, ushort PortNum, ushort NodeNum)
        {
            var __ret = __Internal.nmc_write_to_pci(CardNo, PortNum, NodeNum);
            return __ret;
        }

        public static short nmc_download_configfile(ushort CardNo, ushort PortNum, string FileName)
        {
            var __ret = __Internal.nmc_download_configfile(CardNo, PortNum, FileName);
            return __ret;
        }

        public static short nmc_download_mapfile(ushort CardNo, string FileName)
        {
            var __ret = __Internal.nmc_download_mapfile(CardNo, FileName);
            return __ret;
        }

        public static short nmc_set_axis_enable(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.nmc_set_axis_enable(CardNo, axis);
            return __ret;
        }

        public static short nmc_set_axis_disable(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.nmc_set_axis_disable(CardNo, axis);
            return __ret;
        }

        public static short nmc_set_alarm_clear(ushort CardNo, ushort PortNum, ushort NodeNum)
        {
            var __ret = __Internal.nmc_set_alarm_clear(CardNo, PortNum, NodeNum);
            return __ret;
        }

        public static short nmc_get_slave_nodes(ushort CardNo, ushort PortNum, ushort BaudRate, ref ushort NodeId, ref ushort NodeNum)
        {
            fixed (ushort* __NodeId3 = &NodeId)
            {
                var __arg3 = __NodeId3;
                fixed (ushort* __NodeNum4 = &NodeNum)
                {
                    var __arg4 = __NodeNum4;
                    var __ret = __Internal.nmc_get_slave_nodes(CardNo, PortNum, BaudRate, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static short nmc_get_total_axes(ushort CardNo, ref uint TotalAxis)
        {
            fixed (uint* __TotalAxis1 = &TotalAxis)
            {
                var __arg1 = __TotalAxis1;
                var __ret = __Internal.nmc_get_total_axes(CardNo, __arg1);
                return __ret;
            }
        }

        public static short nmc_get_total_adcnum(ushort CardNo, ref ushort TotalIn, ref ushort TotalOut)
        {
            fixed (ushort* __TotalIn1 = &TotalIn)
            {
                var __arg1 = __TotalIn1;
                fixed (ushort* __TotalOut2 = &TotalOut)
                {
                    var __arg2 = __TotalOut2;
                    var __ret = __Internal.nmc_get_total_adcnum(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short nmc_get_total_ionum(ushort CardNo, ref ushort TotalIn, ref ushort TotalOut)
        {
            fixed (ushort* __TotalIn1 = &TotalIn)
            {
                var __arg1 = __TotalIn1;
                fixed (ushort* __TotalOut2 = &TotalOut)
                {
                    var __arg2 = __TotalOut2;
                    var __ret = __Internal.nmc_get_total_ionum(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short nmc_clear_alarm_fieldbus(ushort CardNo, ushort PortNum)
        {
            var __ret = __Internal.nmc_clear_alarm_fieldbus(CardNo, PortNum);
            return __ret;
        }

        public static short nmc_get_controller_workmode(ushort CardNo, ref ushort controller_mode)
        {
            fixed (ushort* __controller_mode1 = &controller_mode)
            {
                var __arg1 = __controller_mode1;
                var __ret = __Internal.nmc_get_controller_workmode(CardNo, __arg1);
                return __ret;
            }
        }

        public static short nmc_set_controller_workmode(ushort CardNo, ushort controller_mode)
        {
            var __ret = __Internal.nmc_set_controller_workmode(CardNo, controller_mode);
            return __ret;
        }

        public static short nmc_set_cycletime(ushort CardNo, ushort PortNum, uint CycleTime)
        {
            var __ret = __Internal.nmc_set_cycletime(CardNo, PortNum, CycleTime);
            return __ret;
        }

        public static short nmc_get_cycletime(ushort CardNo, ushort PortNum, ref uint CycleTime)
        {
            fixed (uint* __CycleTime2 = &CycleTime)
            {
                var __arg2 = __CycleTime2;
                var __ret = __Internal.nmc_get_cycletime(CardNo, PortNum, __arg2);
                return __ret;
            }
        }

        public static short dmc_get_perline_time(ushort CardNo, ushort TypeIndex, ref uint Averagetime, ref uint Maxtime, ref ulong Cycles)
        {
            fixed (uint* __Averagetime2 = &Averagetime)
            {
                var __arg2 = __Averagetime2;
                fixed (uint* __Maxtime3 = &Maxtime)
                {
                    var __arg3 = __Maxtime3;
                    fixed (ulong* __Cycles4 = &Cycles)
                    {
                        var __arg4 = __Cycles4;
                        var __ret = __Internal.dmc_get_perline_time(CardNo, TypeIndex, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short nmc_set_axis_run_mode(ushort CardNo, ushort axis, ushort run_mode)
        {
            var __ret = __Internal.nmc_set_axis_run_mode(CardNo, axis, run_mode);
            return __ret;
        }

        public static short nmc_get_axis_type(ushort CardNo, ushort axis, ref ushort Axis_Type)
        {
            fixed (ushort* __Axis_Type2 = &Axis_Type)
            {
                var __arg2 = __Axis_Type2;
                var __ret = __Internal.nmc_get_axis_type(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short nmc_get_consume_time_fieldbus(ushort CardNo, ushort PortNum, ref uint Average_time, ref uint Max_time, ref ulong Cycles)
        {
            fixed (uint* __Average_time2 = &Average_time)
            {
                var __arg2 = __Average_time2;
                fixed (uint* __Max_time3 = &Max_time)
                {
                    var __arg3 = __Max_time3;
                    fixed (ulong* __Cycles4 = &Cycles)
                    {
                        var __arg4 = __Cycles4;
                        var __ret = __Internal.nmc_get_consume_time_fieldbus(CardNo, PortNum, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short nmc_clear_consume_time_fieldbus(ushort CardNo, ushort PortNum)
        {
            var __ret = __Internal.nmc_clear_consume_time_fieldbus(CardNo, PortNum);
            return __ret;
        }

        public static short nmc_stop_etc(ushort CardNo, ref ushort ETCState)
        {
            fixed (ushort* __ETCState1 = &ETCState)
            {
                var __arg1 = __ETCState1;
                var __ret = __Internal.nmc_stop_etc(CardNo, __arg1);
                return __ret;
            }
        }

        public static short nmc_get_axis_statusword(ushort CardNo, ushort axis, ref int statusword)
        {
            fixed (int* __statusword2 = &statusword)
            {
                var __arg2 = __statusword2;
                var __ret = __Internal.nmc_get_axis_statusword(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short nmc_set_axis_contrlword(ushort CardNo, ushort Axis, int Contrlword)
        {
            var __ret = __Internal.nmc_set_axis_contrlword(CardNo, Axis, Contrlword);
            return __ret;
        }

        public static short nmc_get_axis_contrlword(ushort CardNo, ushort Axis, ref int Contrlword)
        {
            fixed (int* __Contrlword2 = &Contrlword)
            {
                var __arg2 = __Contrlword2;
                var __ret = __Internal.nmc_get_axis_contrlword(CardNo, Axis, __arg2);
                return __ret;
            }
        }

        public static short nmc_set_axis_contrlmode(ushort CardNo, ushort Axis, int Contrlmode)
        {
            var __ret = __Internal.nmc_set_axis_contrlmode(CardNo, Axis, Contrlmode);
            return __ret;
        }

        public static short nmc_get_axis_contrlmode(ushort CardNo, ushort Axis, ref int Contrlmode)
        {
            fixed (int* __Contrlmode2 = &Contrlmode)
            {
                var __arg2 = __Contrlmode2;
                var __ret = __Internal.nmc_get_axis_contrlmode(CardNo, Axis, __arg2);
                return __ret;
            }
        }

        public static short nmc_get_errcode(ushort CardNo, ushort channel, ref ushort Errcode)
        {
            fixed (ushort* __Errcode2 = &Errcode)
            {
                var __arg2 = __Errcode2;
                var __ret = __Internal.nmc_get_errcode(CardNo, channel, __arg2);
                return __ret;
            }
        }

        public static short nmc_get_card_errcode(ushort CardNo, ref ushort Errcode)
        {
            fixed (ushort* __Errcode1 = &Errcode)
            {
                var __arg1 = __Errcode1;
                var __ret = __Internal.nmc_get_card_errcode(CardNo, __arg1);
                return __ret;
            }
        }

        public static short nmc_get_axis_errcode(ushort CardNo, ushort axis, ref ushort Errcode)
        {
            fixed (ushort* __Errcode2 = &Errcode)
            {
                var __arg2 = __Errcode2;
                var __ret = __Internal.nmc_get_axis_errcode(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short nmc_clear_errcode(ushort CardNo, ushort channel)
        {
            var __ret = __Internal.nmc_clear_errcode(CardNo, channel);
            return __ret;
        }

        public static short nmc_clear_card_errcode(ushort CardNo)
        {
            var __ret = __Internal.nmc_clear_card_errcode(CardNo);
            return __ret;
        }

        public static short nmc_clear_axis_errcode(ushort CardNo, ushort iaxis)
        {
            var __ret = __Internal.nmc_clear_axis_errcode(CardNo, iaxis);
            return __ret;
        }

        public static short nmc_get_LostHeartbeat_Nodes(ushort CardNo, ushort PortNum, ref ushort NodeID, ref ushort NodeNum)
        {
            fixed (ushort* __NodeID2 = &NodeID)
            {
                var __arg2 = __NodeID2;
                fixed (ushort* __NodeNum3 = &NodeNum)
                {
                    var __arg3 = __NodeNum3;
                    var __ret = __Internal.nmc_get_LostHeartbeat_Nodes(CardNo, PortNum, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short nmc_get_EmergeneyMessege_Nodes(ushort CardNo, ushort PortNum, ref uint NodeMsg, ref ushort MsgNum)
        {
            fixed (uint* __NodeMsg2 = &NodeMsg)
            {
                var __arg2 = __NodeMsg2;
                fixed (ushort* __MsgNum3 = &MsgNum)
                {
                    var __arg3 = __MsgNum3;
                    var __ret = __Internal.nmc_get_EmergeneyMessege_Nodes(CardNo, PortNum, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short nmc_SendNmtCommand(ushort CardNo, ushort PortNum, ushort NodeID, ushort NmtCommand)
        {
            var __ret = __Internal.nmc_SendNmtCommand(CardNo, PortNum, NodeID, NmtCommand);
            return __ret;
        }

        public static short nmc_syn_move(ushort CardNo, ushort AxisNum, ref ushort AxisList, ref int Position, ref ushort PosiMode)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                fixed (int* __Position3 = &Position)
                {
                    var __arg3 = __Position3;
                    fixed (ushort* __PosiMode4 = &PosiMode)
                    {
                        var __arg4 = __PosiMode4;
                        var __ret = __Internal.nmc_syn_move(CardNo, AxisNum, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short nmc_syn_move_unit(ushort CardNo, ushort AxisNum, ref ushort AxisList, ref double Position, ref ushort PosiMode)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                fixed (double* __Position3 = &Position)
                {
                    var __arg3 = __Position3;
                    fixed (ushort* __PosiMode4 = &PosiMode)
                    {
                        var __arg4 = __PosiMode4;
                        var __ret = __Internal.nmc_syn_move_unit(CardNo, AxisNum, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short nmc_sync_pmove_unit(ushort CardNo, ushort AxisNum, ref ushort AxisList, ref double Dist, ref ushort PosiMode)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                fixed (double* __Dist3 = &Dist)
                {
                    var __arg3 = __Dist3;
                    fixed (ushort* __PosiMode4 = &PosiMode)
                    {
                        var __arg4 = __PosiMode4;
                        var __ret = __Internal.nmc_sync_pmove_unit(CardNo, AxisNum, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short nmc_sync_vmove_unit(ushort CardNo, ushort AxisNum, ref ushort AxisList, ref ushort Dir)
        {
            fixed (ushort* __AxisList2 = &AxisList)
            {
                var __arg2 = __AxisList2;
                fixed (ushort* __Dir3 = &Dir)
                {
                    var __arg3 = __Dir3;
                    var __ret = __Internal.nmc_sync_vmove_unit(CardNo, AxisNum, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short nmc_set_master_para(ushort CardNo, ushort PortNum, ushort Baudrate, uint NodeCnt, ushort MasterId)
        {
            var __ret = __Internal.nmc_set_master_para(CardNo, PortNum, Baudrate, NodeCnt, MasterId);
            return __ret;
        }

        public static short nmc_get_master_para(ushort CardNo, ushort PortNum, ref ushort Baudrate, ref uint NodeCnt, ref ushort MasterId)
        {
            fixed (ushort* __Baudrate2 = &Baudrate)
            {
                var __arg2 = __Baudrate2;
                fixed (uint* __NodeCnt3 = &NodeCnt)
                {
                    var __arg3 = __NodeCnt3;
                    fixed (ushort* __MasterId4 = &MasterId)
                    {
                        var __arg4 = __MasterId4;
                        var __ret = __Internal.nmc_get_master_para(CardNo, PortNum, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static short nmc_write_outbit(ushort CardNo, ushort NoteID, ushort IoBit, ushort IoValue)
        {
            var __ret = __Internal.nmc_write_outbit(CardNo, NoteID, IoBit, IoValue);
            return __ret;
        }

        public static short nmc_read_outbit(ushort CardNo, ushort NoteID, ushort IoBit, ref ushort IoValue)
        {
            fixed (ushort* __IoValue3 = &IoValue)
            {
                var __arg3 = __IoValue3;
                var __ret = __Internal.nmc_read_outbit(CardNo, NoteID, IoBit, __arg3);
                return __ret;
            }
        }

        public static short nmc_read_inbit(ushort CardNo, ushort NoteID, ushort IoBit, ref ushort IoValue)
        {
            fixed (ushort* __IoValue3 = &IoValue)
            {
                var __arg3 = __IoValue3;
                var __ret = __Internal.nmc_read_inbit(CardNo, NoteID, IoBit, __arg3);
                return __ret;
            }
        }

        public static short nmc_set_da_output(ushort CardNo, ushort NoteID, ushort channel, double Value)
        {
            var __ret = __Internal.nmc_set_da_output(CardNo, NoteID, channel, Value);
            return __ret;
        }

        public static short nmc_get_da_output(ushort CardNo, ushort NoteID, ushort channel, ref double Value)
        {
            fixed (double* __Value3 = &Value)
            {
                var __arg3 = __Value3;
                var __ret = __Internal.nmc_get_da_output(CardNo, NoteID, channel, __arg3);
                return __ret;
            }
        }

        public static short nmc_get_ad_input(ushort CardNo, ushort NoteID, ushort channel, ref double Value)
        {
            fixed (double* __Value3 = &Value)
            {
                var __arg3 = __Value3;
                var __ret = __Internal.nmc_get_ad_input(CardNo, NoteID, channel, __arg3);
                return __ret;
            }
        }

        public static short nmc_set_ad_mode(ushort CardNo, ushort NoteID, ushort channel, ushort mode, uint buffer_nums)
        {
            var __ret = __Internal.nmc_set_ad_mode(CardNo, NoteID, channel, mode, buffer_nums);
            return __ret;
        }

        public static short nmc_get_ad_mode(ushort CardNo, ushort NoteID, ushort channel, ref ushort mode, uint buffer_nums)
        {
            fixed (ushort* __mode3 = &mode)
            {
                var __arg3 = __mode3;
                var __ret = __Internal.nmc_get_ad_mode(CardNo, NoteID, channel, __arg3, buffer_nums);
                return __ret;
            }
        }

        public static short nmc_set_da_mode(ushort CardNo, ushort NoteID, ushort channel, ushort mode, uint buffer_nums)
        {
            var __ret = __Internal.nmc_set_da_mode(CardNo, NoteID, channel, mode, buffer_nums);
            return __ret;
        }

        public static short nmc_get_da_mode(ushort CardNo, ushort NoteID, ushort channel, ref ushort mode, uint buffer_nums)
        {
            fixed (ushort* __mode3 = &mode)
            {
                var __arg3 = __mode3;
                var __ret = __Internal.nmc_get_da_mode(CardNo, NoteID, channel, __arg3, buffer_nums);
                return __ret;
            }
        }

        public static short nmc_write_to_flash(ushort CardNo, ushort PortNum, ushort NodeNum)
        {
            var __ret = __Internal.nmc_write_to_flash(CardNo, PortNum, NodeNum);
            return __ret;
        }

        public static short nmc_set_connect_state(ushort CardNo, ushort NodeNum, ushort state, ushort baud)
        {
            var __ret = __Internal.nmc_set_connect_state(CardNo, NodeNum, state, baud);
            return __ret;
        }

        public static short nmc_get_connect_state(ushort CardNo, ref ushort NodeNum, ref ushort state)
        {
            fixed (ushort* __NodeNum1 = &NodeNum)
            {
                var __arg1 = __NodeNum1;
                fixed (ushort* __state2 = &state)
                {
                    var __arg2 = __state2;
                    var __ret = __Internal.nmc_get_connect_state(CardNo, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static short nmc_write_outport(ushort CardNo, ushort NoteID, ushort portno, uint outport_val)
        {
            var __ret = __Internal.nmc_write_outport(CardNo, NoteID, portno, outport_val);
            return __ret;
        }

        public static short nmc_read_outport(ushort CardNo, ushort NoteID, ushort portno, ref uint outport_val)
        {
            fixed (uint* __outport_val3 = &outport_val)
            {
                var __arg3 = __outport_val3;
                var __ret = __Internal.nmc_read_outport(CardNo, NoteID, portno, __arg3);
                return __ret;
            }
        }

        public static short nmc_read_inport(ushort CardNo, ushort NoteID, ushort portno, ref uint inport_val)
        {
            fixed (uint* __inport_val3 = &inport_val)
            {
                var __arg3 = __inport_val3;
                var __ret = __Internal.nmc_read_inport(CardNo, NoteID, portno, __arg3);
                return __ret;
            }
        }

        public static short nmc_get_axis_state_machine(ushort CardNo, ushort axis, ref ushort Axis_StateMachine)
        {
            fixed (ushort* __Axis_StateMachine2 = &Axis_StateMachine)
            {
                var __arg2 = __Axis_StateMachine2;
                var __ret = __Internal.nmc_get_axis_state_machine(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short nmc_get_axis_setting_contrlmode(ushort CardNo, ushort axis, ref int contrlmode)
        {
            fixed (int* __contrlmode2 = &contrlmode)
            {
                var __arg2 = __contrlmode2;
                var __ret = __Internal.nmc_get_axis_setting_contrlmode(CardNo, axis, __arg2);
                return __ret;
            }
        }

        public static short nmc_get_total_slaves(ushort CardNo, ushort PortNum, ref ushort TotalSlaves)
        {
            fixed (ushort* __TotalSlaves2 = &TotalSlaves)
            {
                var __arg2 = __TotalSlaves2;
                var __ret = __Internal.nmc_get_total_slaves(CardNo, PortNum, __arg2);
                return __ret;
            }
        }

        public static short nmc_get_axis_node_address(ushort CardNo, ushort axis, ref ushort SlaveAddr, ref ushort Sub_SlaveAddr)
        {
            fixed (ushort* __SlaveAddr2 = &SlaveAddr)
            {
                var __arg2 = __SlaveAddr2;
                fixed (ushort* __Sub_SlaveAddr3 = &Sub_SlaveAddr)
                {
                    var __arg3 = __Sub_SlaveAddr3;
                    var __ret = __Internal.nmc_get_axis_node_address(CardNo, axis, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short nmc_set_axis_io_out(ushort CardNo, ushort axis, uint iostate)
        {
            var __ret = __Internal.nmc_set_axis_io_out(CardNo, axis, iostate);
            return __ret;
        }

        public static uint nmc_get_axis_io_out(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.nmc_get_axis_io_out(CardNo, axis);
            return __ret;
        }

        public static uint nmc_get_axis_io_in(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.nmc_get_axis_io_in(CardNo, axis);
            return __ret;
        }

        /// <summary>**********************************************************</summary>
        /// <remarks>
        /// <para>RTEX�����Ӻ���</para>
        /// <para>**********************************************************</para>
        /// </remarks>
        public static short nmc_start_connect(ushort CardNo, ushort chan, ref ushort info, ref ushort len)
        {
            fixed (ushort* __info2 = &info)
            {
                var __arg2 = __info2;
                fixed (ushort* __len3 = &len)
                {
                    var __arg3 = __len3;
                    var __ret = __Internal.nmc_start_connect(CardNo, chan, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static short nmc_get_vendor_info(ushort CardNo, ushort axis, sbyte* info, ref ushort len)
        {
            fixed (ushort* __len3 = &len)
            {
                var __arg3 = __len3;
                var __ret = __Internal.nmc_get_vendor_info(CardNo, axis, info, __arg3);
                return __ret;
            }
        }

        public static short nmc_get_slave_type_info(ushort CardNo, ushort axis, sbyte* info, ref ushort len)
        {
            fixed (ushort* __len3 = &len)
            {
                var __arg3 = __len3;
                var __ret = __Internal.nmc_get_slave_type_info(CardNo, axis, info, __arg3);
                return __ret;
            }
        }

        public static short nmc_get_slave_name_info(ushort CardNo, ushort axis, sbyte* info, ref ushort len)
        {
            fixed (ushort* __len3 = &len)
            {
                var __arg3 = __len3;
                var __ret = __Internal.nmc_get_slave_name_info(CardNo, axis, info, __arg3);
                return __ret;
            }
        }

        public static short nmc_get_slave_version_info(ushort CardNo, ushort axis, sbyte* info, ref ushort len)
        {
            fixed (ushort* __len3 = &len)
            {
                var __arg3 = __len3;
                var __ret = __Internal.nmc_get_slave_version_info(CardNo, axis, info, __arg3);
                return __ret;
            }
        }

        public static short nmc_write_parameter(ushort CardNo, ushort axis, ushort index, ushort subindex, uint para_data)
        {
            var __ret = __Internal.nmc_write_parameter(CardNo, axis, index, subindex, para_data);
            return __ret;
        }

        /// <summary>
        /// <para>************************************************************</para>
        /// <para>����˵����RTEX������дEEPROM����</para>
        /// </summary>
        /// <remarks>************************************************************</remarks>
        public static short nmc_write_slave_eeprom(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.nmc_write_slave_eeprom(CardNo, axis);
            return __ret;
        }

        /// <summary>
        /// <para>************************************************************</para>
        /// <para>index:rtex�������Ĳ�������</para>
        /// <para>subindex:rtex��������index����&#181;Ĳ������</para>
        /// <para>para_data:�����Ĳ���ֵ</para>
        /// <para>************************************************************</para>
        /// </summary>
        public static short nmc_read_parameter(ushort CardNo, ushort axis, ushort index, ushort subindex, ref uint para_data)
        {
            fixed (uint* __para_data4 = &para_data)
            {
                var __arg4 = __para_data4;
                var __ret = __Internal.nmc_read_parameter(CardNo, axis, index, subindex, __arg4);
                return __ret;
            }
        }

        /// <summary>
        /// <para>************************************************************</para>
        /// <para>index:rtex�������Ĳ�������</para>
        /// <para>subindex:rtex��������index����&#181;Ĳ������</para>
        /// <para>para_data:�����Ĳ���ֵ</para>
        /// <para>************************************************************</para>
        /// </summary>
        public static short nmc_read_parameter_attributes(ushort CardNo, ushort axis, ushort index, ushort subindex, ref uint para_data)
        {
            fixed (uint* __para_data4 = &para_data)
            {
                var __arg4 = __para_data4;
                var __ret = __Internal.nmc_read_parameter_attributes(CardNo, axis, index, subindex, __arg4);
                return __ret;
            }
        }

        public static short nmc_set_cmdcycletime(ushort CardNo, ushort PortNum, uint cmdtime)
        {
            var __ret = __Internal.nmc_set_cmdcycletime(CardNo, PortNum, cmdtime);
            return __ret;
        }

        public static short nmc_get_cmdcycletime(ushort CardNo, ushort PortNum, ref uint cmdtime)
        {
            fixed (uint* __cmdtime2 = &cmdtime)
            {
                var __arg2 = __cmdtime2;
                var __ret = __Internal.nmc_get_cmdcycletime(CardNo, PortNum, __arg2);
                return __ret;
            }
        }

        public static short nmc_start_log(ushort CardNo, ushort chan, ushort node, ushort Ifenable)
        {
            var __ret = __Internal.nmc_start_log(CardNo, chan, node, Ifenable);
            return __ret;
        }

        public static short nmc_get_log(ushort CardNo, ushort chan, ushort node, ref uint data)
        {
            fixed (uint* __data3 = &data)
            {
                var __arg3 = __data3;
                var __ret = __Internal.nmc_get_log(CardNo, chan, node, __arg3);
                return __ret;
            }
        }

        public static short nmc_config_atuo_log(ushort CardNo, ushort ifenable, ushort dir, ushort byte_index, ushort mask, ushort condition, uint counter)
        {
            var __ret = __Internal.nmc_config_atuo_log(CardNo, ifenable, dir, byte_index, mask, condition, counter);
            return __ret;
        }

        public static short nmc_write_rxpdo_extra(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, int Value)
        {
            var __ret = __Internal.nmc_write_rxpdo_extra(CardNo, PortNum, address, DataLen, Value);
            return __ret;
        }

        public static short nmc_read_rxpdo_extra(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, ref int Value)
        {
            fixed (int* __Value4 = &Value)
            {
                var __arg4 = __Value4;
                var __ret = __Internal.nmc_read_rxpdo_extra(CardNo, PortNum, address, DataLen, __arg4);
                return __ret;
            }
        }

        public static short nmc_read_txpdo_extra(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, ref int Value)
        {
            fixed (int* __Value4 = &Value)
            {
                var __arg4 = __Value4;
                var __ret = __Internal.nmc_read_txpdo_extra(CardNo, PortNum, address, DataLen, __arg4);
                return __ret;
            }
        }

        public static short nmc_write_rxpdo_extra_uint(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, uint Value)
        {
            var __ret = __Internal.nmc_write_rxpdo_extra_uint(CardNo, PortNum, address, DataLen, Value);
            return __ret;
        }

        public static short nmc_read_rxpdo_extra_uint(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, ref uint Value)
        {
            fixed (uint* __Value4 = &Value)
            {
                var __arg4 = __Value4;
                var __ret = __Internal.nmc_read_rxpdo_extra_uint(CardNo, PortNum, address, DataLen, __arg4);
                return __ret;
            }
        }

        public static short nmc_read_txpdo_extra_uint(ushort CardNo, ushort PortNum, ushort address, ushort DataLen, ref uint Value)
        {
            fixed (uint* __Value4 = &Value)
            {
                var __arg4 = __Value4;
                var __ret = __Internal.nmc_read_txpdo_extra_uint(CardNo, PortNum, address, DataLen, __arg4);
                return __ret;
            }
        }

        public static short nmc_get_log_state(ushort CardNo, ushort chan, ref uint state)
        {
            fixed (uint* __state2 = &state)
            {
                var __arg2 = __state2;
                var __ret = __Internal.nmc_get_log_state(CardNo, chan, __arg2);
                return __ret;
            }
        }

        public static short nmc_driver_reset(ushort CardNo, ushort axis)
        {
            var __ret = __Internal.nmc_driver_reset(CardNo, axis);
            return __ret;
        }

        public static short nmc_set_offset_pos(ushort CardNo, ushort axis, double offset_pos)
        {
            var __ret = __Internal.nmc_set_offset_pos(CardNo, axis, offset_pos);
            return __ret;
        }

        public static short nmc_get_offset_pos(ushort CardNo, ushort axis, ref double offset_pos)
        {
            fixed (double* __offset_pos2 = &offset_pos)
            {
                var __arg2 = __offset_pos2;
                var __ret = __Internal.nmc_get_offset_pos(CardNo, axis, __arg2);
                return __ret;
            }
        }
    }
}
